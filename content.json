[{"title":"Solr全文检索","date":"2017-01-11T02:15:37.099Z","path":"2017/01/11/solr全文检索/","text":"时间又过去了好久，最近在鼓捣微信开发停不来下…..在上一篇博文记录了使用redis为商城系统添加缓存服务，以提高网站的访问速度和性能。另外，我们很容易注意到搜索服务在商城网站中是必不可少的，事实上，在内容繁多的一般网站业也会有搜索功能，而这里很多人就想到Lucene或Solr。 一、Lucene和Solr一说到全文检索总会提到Lucene和Solr，但这两者有什么区别，官网上已经解释了很清楚： Lucene Core, our flagship sub-project, provides Java-based indexing and search technology, as well as spellchecking, hit highlighting and advanced analysis/tokenization capabilities. SolrTM is a high performance search server built using Lucene Core, with XML/HTTP and JSON/Python/Ruby APIs, hit highlighting, faceted search, caching, replication, and a web admin interface. 说白了Lucene是个Java Library，而Solr是一个基于Lucene的全文搜索服务器。如果使用Lucene需要自行实现一堆东西，但更灵活；Solr作为企业级的搜索引擎系统，使用方便。商城这里用solr练手，实际的商城网站如京东或淘宝，当然，肯定是其他高大上的东西了。 二、安装Solr 先到Solr官网下载,Solr的版本基本是和Lucene一起更新的，不就前看到的时候5.5.0版，现在都到6.3.0版了。商城教程使用的tomcat和solr版本都比较老，这里直接用tomcat8和solr6.3.0。在高版本solr中原商城教程有些方法已经过时，不推荐使用，这里会重新实现一遍。 解压solr压缩包，可以看到几个文件夹，有常规的docs文档、licenses版本信息和example例子。bin目录下是命令操作区，dos下在本目录执行 solr start 快速启动solr，在浏览器输入 localhost:8983 可看到solr的基本操作页面，这里我们不直接启动，而是将solr发布到tomcat。contrib文件包含了一些扩展工具包，dist是solr编译之后的目标文件夹，包含各类jar包，server文件夹即应用文件夹。 将solr-6.3.0\\server\\solr-webapp下的webapp文件复制到tomcat的webapps下并重命名为solr，即当成一个发布的工程。 将solr-6.3.0\\server\\lib\\ext下的文件复制到刚重命名的solr工程中 WEB-INF\\lib 目录下，在WEB-INF创建classes文件夹，将solr-6.3.0\\server\\resources下的log4j.properties复制到classes文件夹中，这些都是一些日志相关的东西。 接着需要创建一个solr home，随意在某个目录下创建一个文件夹并命名为solr_home，例如D盘下D:\\solr_home，然后将solr-6.3.0\\server\\solr文件夹复制过来。编辑solr工程web.xml文件，指定solr home的路径为D:\\solr_home。索引库默认存放在这个文件夹，并包含刚复制过来分配置文件。 12345&lt;env-entry&gt; &lt;env-entry-name&gt;solr/home&lt;/env-entry-name&gt; &lt;env-entry-value&gt;D:/solr_home/solr&lt;/env-entry-value&gt; &lt;env-entry-type&gt;java.lang.String&lt;/env-entry-type&gt;&lt;/env-entry&gt; 尝试访问http://localhost:8080/solr/index.html报错403，资源拒绝访问，回到solr工程的web.xml文件，可以看到有这么一段配置 12345678910111213141516&lt;!-- Get rid of error message --&gt; &lt;security-constraint&gt; &lt;web-resource-collection&gt; &lt;web-resource-name&gt;Disable TRACE&lt;/web-resource-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;http-method&gt;TRACE&lt;/http-method&gt; &lt;/web-resource-collection&gt; &lt;auth-constraint/&gt; &lt;/security-constraint&gt; &lt;security-constraint&gt; &lt;web-resource-collection&gt; &lt;web-resource-name&gt;Enable everything but TRACE&lt;/web-resource-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;http-method-omission&gt;TRACE&lt;/http-method-omission&gt; &lt;/web-resource-collection&gt; &lt;/security-constraint&gt; 注释掉本段配置，开放访问权限就能正常访问。 三、创建core 将solr-6.3.0/dist中的solr-dataimporthandler、solr-dataimporthandler-extras的jar包复制到tomcat\\webapps\\solr\\WEB-INF\\lib目录下； 在D:\\solr_home\\solr下创建taotao_core文件夹，并在taotao_core下创建data和conf文件夹。将solr-6.3.0\\example\\example-DIH\\solr\\solr\\conf所有文件和文件夹复制到D:\\solr_home\\solr\\taotao_core\\conf目录下； 访问solr工程，创建core，instanceDir和name填core文件夹的名字，即taotao_core。 四、配置IK中文分词器 下载跟solr对应版本的IK分词器IK-analyze-solr6.3，解压后将jar包复制到solr工程WEB-INF\\lib目录下，将IKAnalyzer.cfg.xml配置文件和mydict.dic、stopword.dic两个词典复制到到solr工程WEB-INF\\classes目录下。 配置业务字段：修改D:\\solr_home\\solr\\taotao_core\\conf下的managed-schema文件在底部&lt; /schema&gt;线加上 12345678910111213141516&lt;fieldType name=\"text_ik\" class=\"solr.TextField\"&gt; &lt;analyzer class=\"org.wltea.analyzer.lucene.IKAnalyzer\"/&gt;&lt;/fieldType&gt;&lt;field name=\"item_title\" type=\"text_ik\" indexed=\"true\" stored=\"true\"/&gt;&lt;field name=\"item_sell_point\" type=\"text_ik\" indexed=\"true\" stored=\"true\"/&gt;&lt;field name=\"item_price\" type=\"long\" indexed=\"true\" stored=\"true\"/&gt;&lt;field name=\"item_image\" type=\"string\" indexed=\"false\" stored=\"true\" /&gt;&lt;field name=\"item_category_name\" type=\"string\" indexed=\"true\" stored=\"true\" /&gt;&lt;field name=\"item_desc\" type=\"text_ik\" indexed=\"true\" stored=\"false\" /&gt;&lt;field name=\"item_keywords\" type=\"text_ik\" indexed=\"true\" stored=\"false\" multiValued=\"true\"/&gt;&lt;copyField source=\"item_title\" dest=\"item_keywords\"/&gt;&lt;copyField source=\"item_sell_point\" dest=\"item_keywords\"/&gt;&lt;copyField source=\"item_category_name\" dest=\"item_keywords\"/&gt;&lt;copyField source=\"item_desc\" dest=\"item_keywords\"/&gt; 重启服务器，选择taotao_core点击分词器 analysis，FieldType选择item_desc,贴上一段文本分析测试 五、在taotao-search整合并使用solr 创建taotao-search工程，同样数据库、SpringMvc照着配置，没什么好说的，applicationContext-solr.xml需要修改一下，因为httpSolrServer在6.3版本已经过时了，换成HttpSolrClient连接solr服务。从原来的HttpSolrServer可以看到,类已经deprecated了，改为使用HttpSolrClient123456789101112131415161718/** * @deprecated Use &#123;@link org.apache.solr.client.solrj.impl.HttpSolrClient&#125; */@Deprecatedpublic class HttpSolrServer extends HttpSolrClient &#123; public HttpSolrServer(String baseURL) &#123; super(baseURL); &#125; public HttpSolrServer(String baseURL, HttpClient client) &#123; super(baseURL, client); &#125; public HttpSolrServer(String baseURL, HttpClient client, ResponseParser parser) &#123; super(baseURL, client, parser); &#125;&#125; 再看下HttpSolrClient类中一个地方，baseURL参数依旧，注释给了个例子，如果是标准的solr玩意，照着这个规则配，当我们的solr是发布到tomcat的，一会配的url不行就改下123456789/** * @param baseURL * The URL of the Solr server. For example, \" * &lt;code&gt;http://localhost:8983/solr/&lt;/code&gt;\" if you are using the * standard distribution Solr webapp on your local machine. */ public HttpSolrClient(String baseURL) &#123; this(baseURL, null, new BinaryResponseParser()); &#125; applicationContext-solr.xml中bean的配置1234567891011&lt;!-- 配置SolrServer对象 --&gt; &lt;!-- 单机版 --&gt; &lt;!-- &lt;bean id=\"HttpSolrClient\" class=\"org.apache.solr.client.solrj.impl.HttpSolrServer\"&gt; --&gt; &lt;bean id=\"HttpSolrClient\" class=\"org.apache.solr.client.solrj.impl.HttpSolrClient\"&gt; &lt;constructor-arg name=\"baseURL\" value=\"$&#123;SOLR.SERVER.URL&#125;\"&gt;&lt;/constructor-arg&gt; &lt;/bean&gt; &lt;!-- 集群版 --&gt; &lt;!-- &lt;bean id=\"cloudSolrServer\" class=\"org.apache.solr.client.solrj.impl.CloudSolrServer\"&gt; &lt;constructor-arg name=\"zkHost\" value=\"192.168.25.154:2181,192.168.25.154:2182,192.168.25.154:2183\"&gt;&lt;/constructor-arg&gt; &lt;property name=\"defaultCollection\" value=\"collection2\"&gt;&lt;/property&gt; &lt;/bean&gt; --&gt; 其中SOLR.SERVER.URL变量的配置在resource.properties中配置,指向solr下的core就是了，正常连接http://localhost:8080/solr/index.html#/taotao_core 的index.html#去掉，如果在tomcat的server xml配了根路径，没有index.html，中间的#/同样需要去掉1SOLR.SERVER.URL=http://localhost:8080/solr/taotao_core ItemServiceImpl改为注入HttpSolrClient123//private SolrServer solrServer;//过时方法，废弃不用@Autowiredprivate HttpSolrClient solrServer;//使用HttpSolrClient，实例化名称solrServer懒得改，注意 SearchDaoImpl搜索服务同理换下HttpSolrClient访问http://localhost:8083/search/manager/importall 导入数据，成功状态200，数据多可能比较慢query一下看看导进来那些东东，可以看到查到商品了搜下“移动电源试试” http://localhost:8083/search/query?q=移动电源&amp;page=3&amp;rows=15 六、发布搜索服务到taotao-portal 在taotao-portal资源文件resource.properties配置搜索服务连接 1SEARCH_BASE_URL=http://localhost:8083/search/query 业务照搬，或根据自己的需要修改。感觉事实上非要建个search工程实在是…封装个类足以。测试搜索如下","tags":[{"name":"Solr","slug":"Solr","permalink":"http://javazgs.com/tags/Solr/"}]},{"title":"给博客换个主题","date":"2016-12-28T16:20:54.229Z","path":"2016/12/29/给博客换个主题/","text":"搭好了博客之后，想把博客换了个hexo主题，挑来挑去最后选了Litten的Yilia主题。事实好多主题都做得很棒，现在不管是网站和移动端的应用，都很注重页面展示和交互体验，由此前端的技术也是日新月异，作为一个后端，看得真是眼花缭乱。 转眼间2016也即将过去了，这年毕业了，开始工作，真正地靠自己生活着，做了许多事情，也学会很多东西。整体上马马虎虎，但事实还有许多事情没有做好，找个时间再写个年终总结吧。 加首歌试试 markdown真是好用啊。顺便加上多说评论。 以下测试 12345public class HelloWorld &#123; public static void main(String[] args) &#123; System.out.println(\"欢迎来到啊深的博客。\"); &#125;&#125; 故人西辞黄鹤楼，烟花三月下扬州。孤帆远影碧空尽，惟见长江天际流。 16/12/29","tags":[{"name":"博客","slug":"博客","permalink":"http://javazgs.com/tags/博客/"}]},{"title":"欢迎来到我的博客","date":"2016-12-20T06:20:09.498Z","path":"2016/12/20/hello-world/","text":"之前鼓捣服务器的时候买了个域名耍耍，空间到期之后域名一直放着，不久前才想起github上能搭个博客能用自定义域名，而且刚好又不需要备案，遂开始鼓捣个博客。","tags":[{"name":"其他","slug":"其他","permalink":"http://javazgs.com/tags/其他/"}]}]