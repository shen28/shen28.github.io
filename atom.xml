<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zgshen&#39;s notes</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zgshen.me/"/>
  <updated>2019-03-07T02:06:18.315Z</updated>
  <id>https://zgshen.me/</id>
  
  <author>
    <name>zgshen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot打包和部署(补充)</title>
    <link href="https://zgshen.me/2019/01/02/SpringBoot%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2(%E8%A1%A5%E5%85%85)/"/>
    <id>https://zgshen.me/2019/01/02/SpringBoot打包部署(补充)/</id>
    <published>2019-01-01T16:00:00.000Z</published>
    <updated>2019-03-07T02:06:18.315Z</updated>
    
    <content type="html"><![CDATA[<p>SpringBoot 工程若用简单的 <code>clean package</code> 命令打包会包含所有依赖 jar 包，如果工程依赖比较多的时候，打的包通常动不动就几十 m 大。这使得在部署到远程的时候，如果你的网络是小水管的就要传半天了，而且上微服务的项目，多个工程，一个工程还多台机器，更新部署需要浪费许多时间。</p><p>SpringBoot 启动可以以加载外部依赖目录来启动工程，所以我不必每次打包都包含一堆 jar 包，只需要把 jar 统一放一个目录，启动时指定依赖目录启动就行。</p><p>在网上搜索各类资料和博客，大多以下方式打包。<br>以 maven 打包为例，使用 SpringBoot 打包插件先正常打包<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">layout</span>&gt;</span>ZIP<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 依赖变化去掉打包重新传完jar包后再打开打包 --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- &lt;include&gt;</span></span><br><span class="line"><span class="comment">                        &lt;groupId&gt;nothing&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">                        &lt;artifactId&gt;nothing&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">                    &lt;/include&gt; --&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>打包后的目录结构，将 lib 目录的依赖包拷贝出来上传到服务器，依赖一般很少改动，若依赖改变重新传一次<br><img src="https://i.imgur.com/iNMHmVK.jpg" alt title></p><p> 打开 include nothing 的配置重新打包<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>nothing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nothing<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>打包后的文件，很小了，不用每次部署都传大文件<br><img src="https://i.imgur.com/IY80hVI.jpg" alt title></p><p>另外也可以直接用 maven maven-dependency-plugin 插件直接把 jar 包拷贝到目标目录，不需要去包里拷贝，更直接<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">layout</span>&gt;</span>ZIP<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 不含依赖 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>nothing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nothing<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 拷贝依赖jar包到target/lib --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">includeTypes</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">includeTypes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">includeScope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">includeScope</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                    $&#123;project.build.directory&#125;/lib</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>启动指定 lib 目录，java -Dloader.path=/app/demo/lib -jar demo-*.jar<br>以发行包和 lib 依赖目录都在 /app/demo 目录下为例，启动的参考脚本，jvm 及其他参数自行加上，注意你的进程名，别把其他进程也 kill 了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">workdir=/app/demo</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line">    <span class="built_in">cd</span> <span class="variable">$workdir</span></span><br><span class="line">nohup  java -Dloader.path=<span class="string">"lib/"</span> -Xms512m -Xmx1024m -jar demo-*.jar  &gt; demo.out 2&gt;&amp;1 &amp;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"demo service has started."</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">    pid=`ps -ef | grep  <span class="string">'demo-'</span> | grep -v grep | awk <span class="string">'&#123; print $2 &#125;'</span>`</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$pid</span></span><br><span class="line">    <span class="built_in">kill</span> -9 <span class="variable">$pid</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"demo service has stoped."</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line">start</span><br><span class="line">  ;;</span><br><span class="line">stop)</span><br><span class="line">stop</span><br><span class="line">;;</span><br><span class="line">restart)</span><br><span class="line">stop</span><br><span class="line">start</span><br><span class="line">;;</span><br><span class="line">  *)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Usage: ./demo.sh &#123;start|stop|restart&#125;"</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure></p><p>保存为 <code>demo.sh</code><br>授权755 <code>chmod 755 demo.sh</code><br>启动 <code>./demo.sh start</code><br>查看日志输出 <code>tail -20f /app/demo/demo.out</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SpringBoot 工程若用简单的 &lt;code&gt;clean package&lt;/code&gt; 命令打包会包含所有依赖 jar 包，如果工程依赖比较多的时候，打的包通常动不动就几十 m 大。这使得在部署到远程的时候，如果你的网络是小水管的就要传半天了，而且上微服务的项目，多个工
      
    
    </summary>
    
      <category term="技术" scheme="https://zgshen.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Spring" scheme="https://zgshen.me/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Mysql切换表和删除大表操作备忘</title>
    <link href="https://zgshen.me/2018/12/15/Mysql%E5%88%87%E6%8D%A2%E8%A1%A8%E5%92%8C%E5%88%A0%E9%99%A4%E5%A4%A7%E8%A1%A8%E6%93%8D%E4%BD%9C%E5%A4%87%E5%BF%98/"/>
    <id>https://zgshen.me/2018/12/15/Mysql切换表和删除大表操作备忘/</id>
    <published>2018-12-14T16:00:00.000Z</published>
    <updated>2019-03-03T14:47:00.013Z</updated>
    
    <content type="html"><![CDATA[<p>线上有一张日志表累计了太多数据，占用了服务器100多G的内存，需要把历史的数据清除掉，腾出空间。直接删除表的记录 Mysql 是不会自动归还硬盘空间的，需要对表进行 <code>OPTIMIZE TABLE</code> 优化操作归还空间，但此操作会长时间锁定表，不能在线上随便操作。<br><a id="more"></a><br>另一种方式就是新建一张新的表结构与日志表相同，把新的表表名互换，切到新表。之后就可以把占空间大的旧表删除，由于 <code>drop</code> 操作删除表会有锁影响数据库其他操作，而且如果是普通硬盘删除100多G数据也不会很快，会影响服务器IO操作。因此，删除大表一般使用网络上大多人推荐的建立硬链接来进行删除的方式。</p><h4 id="切换表操作"><a href="#切换表操作" class="headerlink" title="切换表操作"></a>切换表操作</h4><p>建表 <code>cc_card_log_1206</code> ，结构与表 <code>cc_card_log</code> 完全相同,把表 <code>cc_card_log_1206</code> 相互切换表名 <code>cc_card_log</code>，锁写操作，互换表名，解锁。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">LOCK</span> <span class="keyword">TABLES</span> cc_card_log WRITE, cc_card_log_1206 WRITE;</div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> cc_card_log <span class="keyword">RENAME</span> <span class="keyword">TO</span> cc_card_log_120601;</div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> cc_card_log_1206 <span class="keyword">RENAME</span> <span class="keyword">TO</span> cc_card_log;</div><div class="line"><span class="keyword">UNLOCK</span> <span class="keyword">TABLES</span>;</div></pre></td></tr></table></figure><h4 id="删除大表"><a href="#删除大表" class="headerlink" title="删除大表"></a>删除大表</h4><p>要删除的表已经很大<br><img src="https://i.imgur.com/1ml0e2B.png" alt="表占用" title=""></p><p>可以利用硬链接和 <code>truncate</code> 降低 <code>drop table</code> 对线上环境的影响<br>创建方法都很简单：<br>软链接（符号链接） ln -s   source  target<br>硬链接 （实体链接）ln       source  target</p><p>使用此办法前提条件，需要开启独立表空间，如果是共享表空间无法使用改方法。查询 <code>show variables like &#39;innodb_file_per%&#39;\G</code>，结果值是 ON 表明开启了。<br><img src="https://i.imgur.com/umwKspV.png" alt="查询开启表空间" title=""></p><p>开启独立表空间表文件就都是单独的<br><img src="https://i.imgur.com/2C3DNGG.png" alt="数据库文件" title=""></p><p>建立硬链接 <code>ln cc_card_log_1206.ibd cc_card_log_1206.ibd.hdlk</code> ，<br>之后 cc_card_log_1206.ibd 的 INODES 属性变成了2，变成2之后 drop table 就不会直接把文件删除了，只是删除了链接，避免对数据库的影响，最后再把 cc_card_log_1206.ibd 删除掉就行了。<br><img src="https://i.imgur.com/jAYLKYZ.png" alt="建立硬链接" title=""></p><p>drop 删除表<br><img src="https://i.imgur.com/BT1TMmX.png" alt="drop操作" title=""></p><p>物理上删除表，这里用 truncate 命令直接清空文件也可以，执行 <code>truncate -s 0 cc_card_log_120601.ibd.hdlk</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;线上有一张日志表累计了太多数据，占用了服务器100多G的内存，需要把历史的数据清除掉，腾出空间。直接删除表的记录 Mysql 是不会自动归还硬盘空间的，需要对表进行 &lt;code&gt;OPTIMIZE TABLE&lt;/code&gt; 优化操作归还空间，但此操作会长时间锁定表，不能在线上随便操作。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="https://zgshen.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="https://zgshen.me/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Windows 不流氓的装机软件</title>
    <link href="https://zgshen.me/2018/12/01/Windows%20%E8%A3%85%E6%9C%BA%E8%BD%AF%E4%BB%B6/"/>
    <id>https://zgshen.me/2018/12/01/Windows 装机软件/</id>
    <published>2018-11-30T16:00:00.000Z</published>
    <updated>2019-03-07T02:07:59.728Z</updated>
    
    <content type="html"><![CDATA[<p>Windows 日常使用中，难免会碰到一些流氓软件，安装的时候不小心就装了个全家桶，时不时给你弹个广告，特别是双11的特殊日子，各家软件都给你发来问候，一时间桌面真是红红火火的。虽然知道某些软件其实很好用，知道广告是软件厂商的重要收入来源，但我实在忍受不了在全神贯注工作的时候给你来一发弹窗，实在碍眼得不行，只能寻找替代品。</p><p>其实日常使用大部分软件都有开源性质或无广告版本的，功能也足够强大。</p><h4 id="压缩软件"><a href="#压缩软件" class="headerlink" title="压缩软件"></a>压缩软件</h4><ul><li>7zip  </li><li>bandizip</li></ul><h4 id="杀毒"><a href="#杀毒" class="headerlink" title="杀毒"></a>杀毒</h4><ul><li>win10自带  </li><li>火绒</li></ul><h4 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h4><ul><li>chrome  </li><li>firefox</li></ul><h4 id="视频播放"><a href="#视频播放" class="headerlink" title="视频播放"></a>视频播放</h4><ul><li>potplayer</li></ul><h4 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h4><ul><li>win10自带  </li><li>手心输入法  </li><li>小狼毫  </li></ul><h4 id="代理及抓包工具"><a href="#代理及抓包工具" class="headerlink" title="代理及抓包工具"></a>代理及抓包工具</h4><ul><li>Shadowsockets</li><li>Fiddler</li><li>Charles</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Windows 日常使用中，难免会碰到一些流氓软件，安装的时候不小心就装了个全家桶，时不时给你弹个广告，特别是双11的特殊日子，各家软件都给你发来问候，一时间桌面真是红红火火的。虽然知道某些软件其实很好用，知道广告是软件厂商的重要收入来源，但我实在忍受不了在全神贯注工作的时
      
    
    </summary>
    
      <category term="技术" scheme="https://zgshen.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="其他" scheme="https://zgshen.me/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>域名更换注册商</title>
    <link href="https://zgshen.me/2018/10/14/%E5%9F%9F%E5%90%8D%E6%9B%B4%E6%8D%A2%E6%9C%8D%E5%8A%A1%E5%95%86/"/>
    <id>https://zgshen.me/2018/10/14/域名更换服务商/</id>
    <published>2018-10-13T16:00:00.000Z</published>
    <updated>2019-03-03T14:49:00.739Z</updated>
    
    <content type="html"><![CDATA[<p>域名不论是新注册、续费和转移，不同的注册商的定价和提供的服务都不一样。有些注册商对新注册域名有比较大的优惠，但续费的就不是那么便宜，还好域名是可以转移到别的注册商，所以给我们的选择就比较多了。<a id="more"></a></p><h4 id="一般在哪个注册商注册域名考虑的方面有："><a href="#一般在哪个注册商注册域名考虑的方面有：" class="headerlink" title="一般在哪个注册商注册域名考虑的方面有："></a>一般在哪个注册商注册域名考虑的方面有：</h4><p>价格：要快速知道各注册商的域名定价，可以到一些域名比较网站看看，比如 <code>www.domcomp.com</code> ；<br>备案情况：许多人建博客喜欢用 <code>.me、.im</code> 域名，但这些域名现在国内是无法备案的，所以只能选择国外的注册商；<br>whois ：不少注册商都有提供免费的 whois 隐私保护功能；<br>dns ：域名解析功能，不同注册商也有所区别。例如这次我从 Namecheap 转到 Porkbun ，Porkbun 并没有找到二级域名重定向到顶级域名功能，比如把 www 定向到顶级域名，只支持重定向到另一个域名。</p><h4 id="一般域名的转移步骤都是一样的："><a href="#一般域名的转移步骤都是一样的：" class="headerlink" title="一般域名的转移步骤都是一样的："></a>一般域名的转移步骤都是一样的：</h4><p>首先原注册商解锁域名，停掉 whois ；<br>然后就是 transfer 操作了，注册商会给你生成一个转让授权码；<br>接着到新的注册商进行转入，需要用到原注册商授权码；<br>最后一般等个5天，如果原注册商一直没确认，你的域名就会就会自动转到新的注册商，当然有的注册商有给你转出同意的选择就比较快。所以照这个时间，转移域名一般在到期前的一周操作就行。</p><p>这次 transfer 只买了一年，选择了 Porkbun 。</p><p><img src="https://i.imgur.com/m9vDwUo.png" alt="porkbun" title=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;域名不论是新注册、续费和转移，不同的注册商的定价和提供的服务都不一样。有些注册商对新注册域名有比较大的优惠，但续费的就不是那么便宜，还好域名是可以转移到别的注册商，所以给我们的选择就比较多了。
    
    </summary>
    
      <category term="技术" scheme="https://zgshen.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="其他" scheme="https://zgshen.me/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>星球大战</title>
    <link href="https://zgshen.me/2018/02/23/%E6%98%9F%E7%90%83%E5%A4%A7%E6%88%98/"/>
    <id>https://zgshen.me/2018/02/23/星球大战/</id>
    <published>2018-02-22T16:00:00.000Z</published>
    <updated>2019-03-03T14:50:23.191Z</updated>
    
    <content type="html"><![CDATA[<p>趁着春节，把星球大战系列电影刷了一遍，除了最后一部《星球大战：最后的绝地武士》还没正版资源，所以还没看。<br><img src="https://i.imgur.com/uOmRjVv.jpg" alt="starwars" title="starwars"><br>星战电影拍摄时间线比较有意思的是先拍了正传的三部，后来才补全拍的几部前传。虽然从1977年正传第一部到2017年第八部，跨度40年，电影技术与时俱进，但早年的几部也经过了重制，特效和观影效果不至于看起来太尴尬。<br>系列电影让人感触的是，随着一部部作品的发展，角色的命运也被慢慢揭示。甚至，扮演这些角色的演员，由于他们所扮演的角色成为自己的另一个符号，被世人所熟知，比如我们的莱亚公主。而且，他们的命运也跟戏里的角色有了关联，这样想起来，编剧也是个不得了的工作呢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;趁着春节，把星球大战系列电影刷了一遍，除了最后一部《星球大战：最后的绝地武士》还没正版资源，所以还没看。&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/uOmRjVv.jpg&quot; alt=&quot;starwars&quot; title=&quot;starwars&quot;&gt;&lt;br&gt;星战
      
    
    </summary>
    
      <category term="生活" scheme="https://zgshen.me/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="其他" scheme="https://zgshen.me/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>天河公园</title>
    <link href="https://zgshen.me/2017/10/08/tianhe/"/>
    <id>https://zgshen.me/2017/10/08/tianhe/</id>
    <published>2017-10-07T16:00:00.000Z</published>
    <updated>2019-03-03T15:07:31.020Z</updated>
    
    <content type="html"><![CDATA[<p>跑跑步…<br><img src="https://i.imgur.com/wlNk0y3.png" alt="天河公园" title="天河公园"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;跑跑步…&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/wlNk0y3.png&quot; alt=&quot;天河公园&quot; title=&quot;天河公园&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="生活" scheme="https://zgshen.me/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="其他" scheme="https://zgshen.me/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>闭包</title>
    <link href="https://zgshen.me/2017/09/12/%E9%97%AD%E5%8C%85/"/>
    <id>https://zgshen.me/2017/09/12/闭包/</id>
    <published>2017-09-11T16:00:00.000Z</published>
    <updated>2019-03-03T14:49:43.089Z</updated>
    
    <content type="html"><![CDATA[<p>在Web开发中，在使用JavScript时，就算没用过，也听说过闭包这个名词。闭将外部作用域中的局部变量封闭起来的函数成为闭包，本质就是一个函数。<a id="more"></a><br>闭包的作用</p><ul><li>保护函数内变量的安全，不能被外部随意修改，只能通过制定函数接口操作</li><li>在内存中维持变量，不会被销毁，所以弊端是滥用可能造成内存泄漏</li></ul><p>例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> num = <span class="number">9</span>;</div><div class="line">    add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    num++;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">clo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> num;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> clo;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//add();//这里还不能执行</span></div><div class="line"><span class="keyword">var</span> f = fun();<span class="comment">//获得闭包函数</span></div><div class="line">add();<span class="comment">//操作num的值</span></div><div class="line"><span class="keyword">var</span> value = f();<span class="comment">//执行函数获取局部变量num的值 11</span></div></pre></td></tr></table></figure></p><p>以上例子最终的 value 值就是局部变量 num 的值， clo 函数就是闭包。<br>我们无法直接访问 num 变量，但根据Javascript的链式作用域，对于 clo ， fun 内部的所有内部变量都是可见的，所以只要把 clo 作为返回值就可以在外部访问 num 内部变量了。<br>add 函数在这里是一个全局变量，在Javascript中，在函数中变量定义不加上 var 或者其他类型，会被视为全局变量，但要在函数执行后得到声明才能使用，如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> i = <span class="number">1</span>;<span class="comment">//局部</span></div><div class="line">    j = <span class="number">2</span>;<span class="comment">//全局，执行test函数时声明，之后全局可用</span></div><div class="line">&#125;</div><div class="line">test();</div><div class="line"><span class="built_in">console</span>.log(j)</div></pre></td></tr></table></figure></p><p>所以在 fun 函数执行后声明完成，就可以在外部执行，由于闭包 clo 维持了 num 变量，所以在外部 add 函数修改的 num 跟在 fun 函数中 num 的是同一个。</p><p>事实上， num 变量在函数中有点类似 Java 中的私有变量，外部不能直接访问，而需要函数内部其他方法访问。以函数对象写另一个例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> age = <span class="number">23</span>;</div><div class="line">    <span class="keyword">var</span> name = <span class="string">"shen"</span>;</div><div class="line">    <span class="keyword">this</span>.getAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> age;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.setAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    age++;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> ff = <span class="keyword">new</span> foo();</div><div class="line"><span class="comment">//ff.age;//访问不到局部变量</span></div><div class="line">ff.setAge();</div><div class="line"><span class="built_in">console</span>.log(ff.getAge())<span class="comment">//24</span></div><div class="line"><span class="built_in">console</span>.log(ff.getName())<span class="comment">//shen</span></div></pre></td></tr></table></figure></p><p>在 Java 中，也有类似的闭包实现存在，匿名内部类就是一个例子，它可以访问外部类的成员变量（相当于第一个例子的clo函数可以访问fun函数的num变量）。但是，由于Java无法保证内部类使用的外部类的局部变量在内外部类同步都指向同一基本类型数据或对象，因为Java只是把外部类的变量做一个拷贝丢给了内部类另一个变量而已。所以，只能干脆限制在内部类访问的外部类变量必须定义为 final 类型，即初始化后就不能修改<br>接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cat</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>测试类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eatSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//final int num = 10;</span></div><div class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;<span class="comment">//final默认可以不写，但当你尝试对num进行操作，比如num++之类，编译器会报错（环境Java8）</span></div><div class="line">        Cat a = <span class="keyword">new</span> Cat() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"eat "</span> + num + <span class="string">" fish"</span>);<span class="comment">//访问外部num变量</span></div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        a.eat();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//Java8支持更简便的Lambda表达式</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LambdaEatTest</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;</div><div class="line">        Cat cat = ()-&gt;System.out.println(<span class="string">"eat "</span> + num + <span class="string">" fish"</span>);</div><div class="line">        cat.eat();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> Test().eatSomething();</div><div class="line">        <span class="keyword">new</span> Test().LambdaEatTest();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>因此，也有些人认为Java的闭包不能算是真正意义上的闭包，有不可修改外部变量的限制。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Web开发中，在使用JavScript时，就算没用过，也听说过闭包这个名词。闭将外部作用域中的局部变量封闭起来的函数成为闭包，本质就是一个函数。
    
    </summary>
    
      <category term="技术" scheme="https://zgshen.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java基础" scheme="https://zgshen.me/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>RESTful API开发的简单应用</title>
    <link href="https://zgshen.me/2017/09/02/RESTful%20API%20%E5%BC%80%E5%8F%91/"/>
    <id>https://zgshen.me/2017/09/02/RESTful API 开发/</id>
    <published>2017-09-01T16:00:00.000Z</published>
    <updated>2019-03-03T14:47:21.872Z</updated>
    
    <content type="html"><![CDATA[<p>在很早之前接触 Spring MVC 的时候，都知道 Spring MVC 支持 RESTful 风格API的开发，但对于 RESTful 只是有个模糊的认识，以至于甚至在开发写出来的接口其实不符合 RESTful 的要求。</p><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>REST 的全称是 Resource Representational State Transfer ，资源以某种表现形式进行状态转移<br>Resource：资源，即数据；<br>Representational：某种表现形式，比如用JSON，XML，JPEG等；<br>State Transfer：状态变化。通过HTTP动词实现。<br><a id="more"></a><br>HTTP动词有如下几个：</p><ul><li>GET    用来获取资源，</li><li>POST  用来新建资源（也可以用于更新资源），</li><li>PUT    用来更新资源，</li><li>DELETE  用来删除资源</li></ul><p>在RESTful API中，URL中只使用名词来指定资源，原则上不使用动词，并且一般使用复数，比如 GET 操作 <a href="https://v1/users/1" target="_blank" rel="external">https://v1/users/1</a> 来获取用户id为1的信息资源，禁止使用 <a href="http://v1/getUserById" target="_blank" rel="external">http://v1/getUserById</a> 、 <a href="http://v1/deleteUser" target="_blank" rel="external">http://v1/deleteUser</a> 之类的url。</p><h5 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h5><p>一种技术的存在肯定是为了解决一些问题而诞生的，REST是一种软件架构模式，通过使用RESTful 风格的 API 用来解决多端（PC、Android、IOS）共用一套统一的 API ，避免重复开发。</p><h5 id="在-SpringMVC-中的应用"><a href="#在-SpringMVC-中的应用" class="headerlink" title="在 SpringMVC 中的应用"></a>在 SpringMVC 中的应用</h5><p>用 SpringMVC 可以开发 restful 风格的restful api，以 Spring Boot 为基本框架，这里写一个基本的 controller 类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    UserService userService;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"&#123;id&#125;"</span>, method=RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> String userId) </span>&#123;</div><div class="line">        <span class="keyword">return</span> ResultUtil.success(userService.getUserById(userId), <span class="string">"操作成功"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"&#123;id&#125;"</span>, method=RequestMethod.PUT)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> String userId) </span>&#123;</div><div class="line">        <span class="keyword">int</span> num = userService.updateUser(userId);</div><div class="line">        <span class="keyword">if</span> (<span class="number">1</span>==num)&#123;</div><div class="line">            <span class="keyword">return</span> ResultUtil.success(<span class="string">"操作成功"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> ResultUtil.error(<span class="string">"操作失败"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(method=RequestMethod.POST)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">insertUser</span><span class="params">(String userCode, String userName)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> num = userService.insertUser(userCode, userName);</div><div class="line">        <span class="keyword">if</span> (<span class="number">1</span>==num)&#123;</div><div class="line">            <span class="keyword">return</span> ResultUtil.success(<span class="string">"操作成功"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> ResultUtil.error(<span class="string">"操作失败"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"&#123;id&#125;"</span>, method=RequestMethod.DELETE)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> String userId) </span>&#123;</div><div class="line">        <span class="keyword">int</span> num = userService.deleteUser(userId);</div><div class="line">        <span class="keyword">if</span> (<span class="number">1</span>==num)&#123;</div><div class="line">            <span class="keyword">return</span> ResultUtil.success(<span class="string">"操作成功"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> ResultUtil.error(<span class="string">"操作失败"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>ResultUtil 封装返回数据格式，这里只是一个简单的封装<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultUtil</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String SUCCESS = <span class="string">"success"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String MSG = <span class="string">"msg"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String DATA = <span class="string">"data"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">success</span><span class="params">(String msg)</span></span>&#123;</div><div class="line">        Map&lt;String,Object&gt; result = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</div><div class="line">        result.put(SUCCESS, <span class="keyword">true</span>);</div><div class="line">        result.put(MSG, msg);</div><div class="line">        result.put(DATA, <span class="keyword">new</span> Object());</div><div class="line">        <span class="keyword">return</span> JSON.toJSONString(result);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">success</span><span class="params">(Object data, String msg)</span></span>&#123;</div><div class="line">        Map&lt;String,Object&gt; result = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</div><div class="line">        result.put(SUCCESS, <span class="keyword">true</span>);</div><div class="line">        result.put(MSG, msg);</div><div class="line">        result.put(DATA, data);</div><div class="line">        <span class="keyword">return</span> JSON.toJSONString(result);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">error</span><span class="params">(String msg)</span></span>&#123;</div><div class="line">        Map&lt;String,Object&gt; result = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</div><div class="line">        result.put(SUCCESS, <span class="keyword">false</span>);</div><div class="line">        result.put(MSG, msg);</div><div class="line">        result.put(DATA, <span class="keyword">new</span> Object());</div><div class="line">        <span class="keyword">return</span> JSON.toJSONString(result);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">error</span><span class="params">(Object data, String msg)</span></span>&#123;</div><div class="line">        Map&lt;String,Object&gt; result = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</div><div class="line">        result.put(SUCCESS, <span class="keyword">false</span>);</div><div class="line">        result.put(MSG, msg);</div><div class="line">        result.put(DATA, data);</div><div class="line">        <span class="keyword">return</span> JSON.toJSONString(result);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>对应的请求url为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">查询、更新、删除： /users/1</div><div class="line">插入： /users</div></pre></td></tr></table></figure></p><p>有时需要管理版本号会把版本号写在url，比如 <code>v1/users/1</code>、 <code>v2/users/1</code> 。至于请求是什么类型的，可以在请求在head中设置，如果是ajax请求则设置比较简单<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">    <span class="attr">url</span>: <span class="string">'/users/1'</span>,</div><div class="line">    <span class="attr">type</span>: <span class="string">'get'</span>,<span class="comment">//put、delete</span></div><div class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(data)</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$.ajax(&#123;</div><div class="line">    <span class="attr">url</span>: <span class="string">'/users'</span>,</div><div class="line">    <span class="attr">type</span>: <span class="string">'post'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">userCode</span>: <span class="string">'test'</span>,</div><div class="line">        <span class="attr">userName</span>: <span class="string">'测试名字'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(data)</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>RESTful API 的开发涉及许多细节和技术实现，实际开发中的应用会可能会用到一些封装库和框架，这里不做深入了解，只是简单的记录自己的一些基本认识，相关的知识参考了以下的链接。</p><p>#####相关参考链接</p><ul><li><a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm" target="_blank" rel="external">REST的出处论文 - 作者Roy Fielding</a></li><li><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="external">RESTful API 设计指南 - 阮一峰的网络日志</a></li><li><a href="https://zhihu.com/question/28557115/answer/48094438" target="_blank" rel="external">怎样用通俗的语言解释REST，以及RESTful？ - 回答作者: 覃超</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在很早之前接触 Spring MVC 的时候，都知道 Spring MVC 支持 RESTful 风格API的开发，但对于 RESTful 只是有个模糊的认识，以至于甚至在开发写出来的接口其实不符合 RESTful 的要求。&lt;/p&gt;
&lt;h5 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h5&gt;&lt;p&gt;REST 的全称是 Resource Representational State Transfer ，资源以某种表现形式进行状态转移&lt;br&gt;Resource：资源，即数据；&lt;br&gt;Representational：某种表现形式，比如用JSON，XML，JPEG等；&lt;br&gt;State Transfer：状态变化。通过HTTP动词实现。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="https://zgshen.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Web技术" scheme="https://zgshen.me/tags/Web%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>用本地服务器解决node-sass安装失败问题</title>
    <link href="https://zgshen.me/2017/08/20/%E7%94%A8%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%A3%E5%86%B3node-sass%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/"/>
    <id>https://zgshen.me/2017/08/20/用本地服务器解决node-sass安装失败问题/</id>
    <published>2017-08-19T16:00:00.000Z</published>
    <updated>2019-03-03T14:49:21.901Z</updated>
    
    <content type="html"><![CDATA[<p>今天要用到node-sass这东西，使用命令 <code>npm install node-sass --save</code> 安装。然而搞半天始终下载不来，换成淘宝的镜像都不行，因为下载时还会去github下载一个 <code>win32-x64-48_binding.node</code> 的包，然后下不来就一直卡着最后失败。<br>一种解决方法就是根据下载失败提示的链接直接把那个二进制包下载下来，然后放在本地服务器目录下，比如可以根据失败提示的版本号在Nginx的html目录下以版本号建个文件夹放进去，像这样 <code>nginx-1.10.1\html\v4.5.3\win32-x64-48_binding.node</code> ,然后执行 <code>npm install node-sass --save-dev --sass-binary-site=http://localhost:8090/ --registry=https://registry.npm.taobao.org</code> 端口号为Nginx设置的端口号， <code>v4.5.3\win32-x64-48_binding.node</code> 这一串不用加，这样 <code>win32-x64-48_binding.node</code> 这个包就直接从本地服务器下载了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天要用到node-sass这东西，使用命令 &lt;code&gt;npm install node-sass --save&lt;/code&gt; 安装。然而搞半天始终下载不来，换成淘宝的镜像都不行，因为下载时还会去github下载一个 &lt;code&gt;win32-x64-48_binding.
      
    
    </summary>
    
      <category term="技术" scheme="https://zgshen.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="其他" scheme="https://zgshen.me/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>线程池</title>
    <link href="https://zgshen.me/2017/07/20/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>https://zgshen.me/2017/07/20/线程池/</id>
    <published>2017-07-19T16:00:00.000Z</published>
    <updated>2019-03-03T14:49:30.181Z</updated>
    
    <content type="html"><![CDATA[<p>创建一个新的线程是有代价的，创建大量的线程会消耗许多系统资源，影响系统的性能。这时，我们就需要使用线程池来管理线程，线程池能缓存线程，可用闲置的线程来执行新任务，能有效控制线程并发数，并对线程进行一些简单的管理。<a id="more"></a></p><p>先创建一个线程任务类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(TaskThread.class);</div><div class="line">    <span class="keyword">private</span> String task;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TaskThread</span><span class="params">(String task)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.task = task;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        task();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">task</span><span class="params">()</span> </span>&#123;</div><div class="line">        LOG.info(<span class="string">"任务:"</span> + task + <span class="string">"  线程:"</span> + Thread.currentThread().getName());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>按照一般方式我们通过 <code>new Thread(new TaskThread(&quot;task&quot;));</code> 的方式来创建一个线程，再调用start方法来启动线程。而线程池为我们提供了另一种创建管理方式，线程池的实现方式也有多种。</p><h3 id="使用LinkedList做任务队列来实现一个简单线程池"><a href="#使用LinkedList做任务队列来实现一个简单线程池" class="headerlink" title="使用LinkedList做任务队列来实现一个简单线程池"></a>使用LinkedList做任务队列来实现一个简单线程池</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkQueue</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(WorkQueue.class);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,WorkQueue&gt; queues = <span class="keyword">new</span> HashMap&lt;String,WorkQueue&gt;();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> nThreads;<span class="comment">//线程池大小</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PoolWorker[] threads;<span class="comment">//用数组实现线程池</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LinkedList&lt;Runnable&gt; queue;<span class="comment">//双向链表实现任务队列</span></div><div class="line"></div><div class="line">    <span class="comment">/**私有构造**/</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">WorkQueue</span><span class="params">(String name,<span class="keyword">int</span> nThreads)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>.nThreads = nThreads;</div><div class="line">        queue = <span class="keyword">new</span> LinkedList&lt;Runnable&gt;();</div><div class="line">        threads = <span class="keyword">new</span> PoolWorker[nThreads];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">this</span>.nThreads; i++) &#123;</div><div class="line">            threads[i] = <span class="keyword">new</span> PoolWorker(name+<span class="string">"_"</span>+(i+<span class="number">1</span>));</div><div class="line">            threads[i].start();</div><div class="line">        &#125;</div><div class="line">        LOG.info(<span class="string">"初始化线程池，线程数："</span>+nThreads);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**静态工厂方法创建线程池**/</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> WorkQueue <span class="title">createWorkQueue</span><span class="params">(String name,<span class="keyword">int</span> count)</span></span>&#123;</div><div class="line">    WorkQueue wq = queues.get(name);</div><div class="line">    <span class="keyword">if</span>(wq == <span class="keyword">null</span>)&#123;</div><div class="line">    wq = <span class="keyword">new</span> WorkQueue(name,count);</div><div class="line">    queues.put(name, wq);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> wq;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">/**执行任务**/</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable r)</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span>(queue) &#123;</div><div class="line">            queue.addLast(r);</div><div class="line">            queue.notify();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**工作线程类**/</span></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">PoolWorker</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    PoolWorker(String name)&#123;</div><div class="line">    <span class="keyword">super</span>(name);</div><div class="line">    &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            Runnable r;</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">                <span class="keyword">synchronized</span>(queue) &#123;</div><div class="line">                    <span class="keyword">while</span> (queue.isEmpty()) &#123;</div><div class="line">                        <span class="keyword">try</span>&#123;</div><div class="line">                            queue.wait();<span class="comment">//如果任务队列没有任务，等待</span></div><div class="line">                        &#125;<span class="keyword">catch</span> (InterruptedException ignored)&#123;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    r = (Runnable) queue.removeFirst();<span class="comment">//有任务时，取出任务</span></div><div class="line">                &#125;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    LOG.info(<span class="string">"线程:"</span>+Thread.currentThread().getName()+<span class="string">" 开始执行"</span>);</div><div class="line">                    r.run();<span class="comment">//执行任务</span></div><div class="line">                &#125;</div><div class="line">                <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    LOG.info(<span class="string">"线程:"</span>+Thread.currentThread().getName()+<span class="string">" 执行出现异常！"</span>);</div><div class="line">                e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                LOG.info(<span class="string">"线程:"</span>+Thread.currentThread().getName()+<span class="string">" 执行完成"</span>);</div><div class="line">                r = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>测试例子，大小为10的线程池执行20个任务<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">WorkQueue wq = WorkQueue.createWorkQueue(<span class="string">"thread"</span>, <span class="number">10</span>);</div><div class="line"></div><div class="line">TaskThread task[] = <span class="keyword">new</span> TaskThread[<span class="number">20</span>];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; task.length; i++)&#123;</div><div class="line">    task[i] = <span class="keyword">new</span> TaskThread(<span class="string">"task_"</span>+i);</div><div class="line">    wq.execute(task[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="使用Executors和ThreadPoolExecutor创建线程池"><a href="#使用Executors和ThreadPoolExecutor创建线程池" class="headerlink" title="使用Executors和ThreadPoolExecutor创建线程池"></a>使用Executors和ThreadPoolExecutor创建线程池</h3><p>Java 的 java.util.concurrent 包提供了 Executors 类来创建线程池，Executors 类有四种线程池构造，分别为：</p><ul><li>newCachedThreadPool创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</li><li>newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。</li><li>newScheduledThreadPool 创建一个定长线程池，支持定时及周期性任务执行。</li><li>newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。</li></ul><p>之前在阿里的开发手册中有看到，各种 Executors 返回的线程池对象弊端如下：<br>1）    FixedThreadPool 和 SingleThreadPool:<br>允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。<br>2）    CachedThreadPool 和 ScheduledThreadPool:<br>允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</p><p>一般常用 newFixedThreadPool 构造返回 ExecutorService 对象来创建线程池。 ExecutorService 接口继承了 Executor 接口（Executor是接口，Executors是类），提供了线程池的操作的成员函数。</p><p>使用 Executors 创建线程池类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(ThreadPool.class);</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,ThreadPool&gt; pools = <span class="keyword">new</span> HashMap&lt;String,ThreadPool&gt;();</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> threadCount = <span class="number">0</span>;</div><div class="line"><span class="keyword">private</span> String name = <span class="keyword">null</span>;;</div><div class="line">ExecutorService service = <span class="keyword">null</span>;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">ThreadPool</span><span class="params">(String name,<span class="keyword">int</span> count)</span></span>&#123;</div><div class="line"><span class="keyword">this</span>.threadCount = count;</div><div class="line"><span class="keyword">this</span>.name = name;</div><div class="line">service = Executors.newFixedThreadPool(<span class="keyword">this</span>.threadCount);</div><div class="line">LOG.info(<span class="string">"初始化线程池，线程数["</span>+<span class="keyword">this</span>.name+<span class="string">"]："</span>+<span class="keyword">this</span>.threadCount);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ThreadPool <span class="title">createThreadPool</span><span class="params">(String name,<span class="keyword">int</span> count)</span></span>&#123;</div><div class="line">ThreadPool pool = pools.get(name);</div><div class="line">    <span class="keyword">if</span>(pool == <span class="keyword">null</span>)&#123;</div><div class="line">    pool = <span class="keyword">new</span> ThreadPool(name,count);</div><div class="line">    pools.put(name, pool);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> pool;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable r)</span> </span>&#123;</div><div class="line">service.execute(r);</div><div class="line">    &#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line">service.shutdown();</div><div class="line">pools.remove(<span class="keyword">this</span>.getName());</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其中，看下 newFixedThreadPool 方法的源码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</div><div class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</div><div class="line">                                  <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这是 ThreadPoolExecutor 类的一个实现，再看下构造方法的参数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></div><div class="line">                          <span class="keyword">int</span> maximumPoolSize,</div><div class="line">                          <span class="keyword">long</span> keepAliveTime,</div><div class="line">                          TimeUnit unit,</div><div class="line">                          BlockingQueue&lt;Runnable&gt; workQueue) &#123;</div><div class="line">    <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</div><div class="line">         Executors.defaultThreadFactory(), defaultHandler);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ul><li>corePoolSize 核心线程数。核心线程会一直存活，即使没有任务需要处理。即使现有的线程空闲，线程池也会优先创建新线程来处理任务，而不是直接交给现有的线程处理。<br>核心线程在allowCoreThreadTimeout被设置为true时会超时退出，默认情况下不会退出。</li><li>maximumPoolSize 最大的线程数。当线程数大于或等于核心线程，且任务队列已满时，线程池会创建新的线程，直到线程数量达到maximumPoolSize。如果线程数已等于maximumPoolSize，且任务队列已满，则已超出线程池的处理能力，线程池会拒绝处理任务而抛出异常。</li><li>keepAliveTime 存活时间。当线程空闲时间达到keepAliveTime，该线程会退出，直到线程数量等于corePoolSize。如果allowCoreThreadTimeout设置为true，则所有线程均会退出直到线程数量为0。</li></ul><p>allowCoreThreadTimeout 属性标识默认情况下核心线程不会退出，可通过将该参数设置为true，让核心线程也退出。</p><p>测试例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ThreadPool threadPool = ThreadPool.createThreadPool(<span class="string">"testThread"</span>, <span class="number">10</span>);</div><div class="line">TaskThread task[] = <span class="keyword">new</span> TaskThread[<span class="number">20</span>];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; task.length; i++)&#123;</div><div class="line">    task[i] = <span class="keyword">new</span> TaskThread(<span class="string">"task_"</span>+i);</div><div class="line">    threadPool.execute(task[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="ThreadPoolExecutor-其他相关"><a href="#ThreadPoolExecutor-其他相关" class="headerlink" title="ThreadPoolExecutor 其他相关"></a>ThreadPoolExecutor 其他相关</h3><p>ThreadPoolExecutor 本身可以指定创建活跃线程数、限制线程池的大小，还可以创建自己的 RejectedExecutionHandler 来处理不适合放在工作队列里的任务。</p><p>终止策略 RejectedExecutionHandler 实现类,当提交的任务无法进入等待队列且线程池中创建的线程数量已经达到了最大线程数量的限制，则会拒绝新提交的任务<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.concurrent.RejectedExecutionHandler;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RejectedExecutionHandlerImpl</span> <span class="keyword">implements</span> <span class="title">RejectedExecutionHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(RejectedExecutionHandlerImpl.class);</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor executor)</span> </span>&#123;</div><div class="line">        LOG.info(r.toString() + <span class="string">"不能执行。"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>完整测试例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ThreadFactory;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(TaskTest.class);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">/*WorkQueue wq = WorkQueue.createWorkQueue("thread", 10);</span></div><div class="line">        TaskThread task[] = new TaskThread[20];</div><div class="line">        for(int i=0; i&lt;task.length; i++)&#123;</div><div class="line">            task[i] = new TaskThread("task_"+i);</div><div class="line">            wq.execute(task[i]);</div><div class="line">        &#125;*/</div><div class="line"></div><div class="line">        <span class="comment">/*ThreadPool threadPool = ThreadPool.createThreadPool("testThread", 10);</span></div><div class="line">        TaskThread task[] = new TaskThread[20];</div><div class="line">        for(int i=0; i&lt;task.length; i++)&#123;</div><div class="line">            task[i] = new TaskThread("task_"+i);</div><div class="line">            threadPool.execute(task[i]);</div><div class="line">        &#125;*/</div><div class="line"></div><div class="line">        RejectedExecutionHandlerImpl rejectionHandler = <span class="keyword">new</span> RejectedExecutionHandlerImpl();</div><div class="line">        ThreadFactory threadFactory = Executors.defaultThreadFactory();</div><div class="line">        ThreadPoolExecutor threadPool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">2</span>, <span class="number">4</span>, <span class="number">10</span>,</div><div class="line">                TimeUnit.SECONDS, <span class="keyword">new</span> ArrayBlockingQueue&lt;Runnable&gt;(<span class="number">2</span>), threadFactory, rejectionHandler);</div><div class="line">        <span class="comment">//TaskThread task[] = new TaskThread[4];//少数量任务</span></div><div class="line">        TaskThread task[] = <span class="keyword">new</span> TaskThread[<span class="number">20</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;task.length; i++)&#123;</div><div class="line">            task[i] = <span class="keyword">new</span> TaskThread(<span class="string">"task_"</span>+i);</div><div class="line">            threadPool.execute(task[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>线程池线程核心数设置为2，最大线程数设置为4，当执行少数量任务时线程池未饱和不会触发终止策略，而执行大量任务就可能会触发，比如以上测试例子的4个任务和20任务的区别。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;创建一个新的线程是有代价的，创建大量的线程会消耗许多系统资源，影响系统的性能。这时，我们就需要使用线程池来管理线程，线程池能缓存线程，可用闲置的线程来执行新任务，能有效控制线程并发数，并对线程进行一些简单的管理。
    
    </summary>
    
      <category term="技术" scheme="https://zgshen.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java基础" scheme="https://zgshen.me/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 打包部署</title>
    <link href="https://zgshen.me/2017/07/15/Spring%20Boot%E9%83%A8%E7%BD%B2/"/>
    <id>https://zgshen.me/2017/07/15/Spring Boot部署/</id>
    <published>2017-07-14T16:00:00.000Z</published>
    <updated>2019-03-03T14:47:51.708Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot默认集成Web容器，部署也相对简单，如果需要以war包形式部署在外部Web容器上也可以，只需要做一些简单的修改配置。<br><a id="more"></a></p><h2 id="使用集成的Web容器部署方式"><a href="#使用集成的Web容器部署方式" class="headerlink" title="使用集成的Web容器部署方式"></a>使用集成的Web容器部署方式</h2><p><strong>打包</strong><br>maven 工程在 eclipse 中执行 Run as Maven build，输入 clean package 进行打包，这里要注意的是 Spring Boot 打成jar包要可以运行，必须使用Spring Boot提供的一个插件，不然打成的普通的jar是无法运行Spring Boot工程的，一般会提示 jar中没有主清单属性。<br>在pom.xml加入插件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure></p><p>生成的 jar 包使用 <code>java -jar xx.jar</code> 命令就可以启动。</p><h2 id="部署到外部Web容器方式"><a href="#部署到外部Web容器方式" class="headerlink" title="部署到外部Web容器方式"></a>部署到外部Web容器方式</h2><p>在 pom.xml 文件将 <code>&lt;packaging&gt;jar&lt;/packaging&gt;</code> 改为 <code>&lt;packaging&gt;war&lt;/packaging&gt;</code><br>加上build插件，表明此Web工程不需要web.xml文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">failOnMissingWebXml</span>&gt;</span>false<span class="tag">&lt;/<span class="name">failOnMissingWebXml</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure></p><p>排除 Spring Boot Tomcat 组件，scope 属性设为 provided<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p><p>在 Application 即main方法类同包下创建实现外部 Web 容器启动的启动类<br>例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.boot.builder.SpringApplicationBuilder;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.web.support.SpringBootServletInitializer;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WxServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> builder.sources(WxApplication.class);<span class="comment">//WxApplication 为原main函数启动类</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>打包完毕将war包部署到外部Web容器。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot默认集成Web容器，部署也相对简单，如果需要以war包形式部署在外部Web容器上也可以，只需要做一些简单的修改配置。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="https://zgshen.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web框架" scheme="https://zgshen.me/tags/web%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>ThreadLcoal</title>
    <link href="https://zgshen.me/2017/07/01/ThreadLcoal/"/>
    <id>https://zgshen.me/2017/07/01/ThreadLcoal/</id>
    <published>2017-06-30T16:00:00.000Z</published>
    <updated>2019-03-03T14:48:04.093Z</updated>
    
    <content type="html"><![CDATA[<p>ThreadLcoal不是线程，而是一个创建线程的局部变量的类，主要用于存储多线程下类的某些变量，ThreadLocal为每个使用该变量的线程提供独立的变量副本，当前线程的ThreadLocal的变量只能被该线程访问，而其他线程访问不到。<br><a id="more"></a><br><strong>使用</strong><br>类定义，支持泛型<br><code>public class ThreadLocal&lt;T&gt;</code><br>初始化值<br><code>private T setInitialValue()</code><br>set方法<br><code>public void set(T value)</code><br>get方法<br><code>public T get()</code></p><p><strong>例子</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test04</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> ThreadLocal&lt;Integer&gt; local = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</div><div class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">localTread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">()</span></span>&#123;</div><div class="line">            local.set(i++);</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">getNum</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">return</span> local.get();</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span>(local.get() == <span class="keyword">null</span>)&#123;</div><div class="line">                setNum();</div><div class="line">                System.out.println(<span class="string">"set threadlocal num..."</span>);</div><div class="line">            &#125;</div><div class="line">            System.out.print(<span class="string">"the object is: "</span>);</div><div class="line">            System.out.println(local);</div><div class="line">            System.out.println(local.get());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            localTread t = <span class="keyword">new</span> Test04().new localTread();</div><div class="line">            </div><div class="line">            Thread t1 = <span class="keyword">new</span> Thread(t);</div><div class="line">            Thread t2 = <span class="keyword">new</span> Thread(t);</div><div class="line">            Thread t3 = <span class="keyword">new</span> Thread(t);</div><div class="line">            </div><div class="line">            t1.start();</div><div class="line">            Thread.sleep(<span class="number">1000</span>);</div><div class="line">            t2.start();</div><div class="line">            Thread.sleep(<span class="number">1000</span>);</div><div class="line">            t3.start();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">set threadlocal num...</div><div class="line">the object is: java.lang.ThreadLocal@6b2ce86d</div><div class="line">0</div><div class="line">set threadlocal num...</div><div class="line">the object is: java.lang.ThreadLocal@6b2ce86d</div><div class="line">1</div><div class="line">set threadlocal num...</div><div class="line">the object is: java.lang.ThreadLocal@6b2ce86d</div><div class="line">2</div></pre></td></tr></table></figure></p><p>可以看到三个线程访问的都是同一个ThreadLocal，但只能访问当前线程存储的各自的变量。<br>看源码set方法的实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</div><div class="line">Thread t = Thread.currentThread();</div><div class="line">ThreadLocalMap map = getMap(t);</div><div class="line"><span class="keyword">if</span> (map != <span class="keyword">null</span>)</div><div class="line">map.set(<span class="keyword">this</span>, value);</div><div class="line"><span class="keyword">else</span></div><div class="line">createMap(t, value);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>通过获取当前线程，再ThreadL中，ThreadLocalMap用弱引用实现<br>get方法实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">Thread t = Thread.currentThread();</div><div class="line">ThreadLocalMap map = getMap(t);</div><div class="line"><span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</div><div class="line">ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</div><div class="line"><span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">T result = (T)e.value;</div><div class="line"><span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> setInitialValue();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>同样是为了解决多线程中变量冲突的问题，线程同步机制实现在某个时间点只有一个线程能访问变量，而ThreadLcoal是通过存储每个线程自己变量，以隔离多线程访问数据的冲突，一个损耗时间，一个损耗空间。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ThreadLcoal不是线程，而是一个创建线程的局部变量的类，主要用于存储多线程下类的某些变量，ThreadLocal为每个使用该变量的线程提供独立的变量副本，当前线程的ThreadLocal的变量只能被该线程访问，而其他线程访问不到。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="https://zgshen.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java基础" scheme="https://zgshen.me/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>泛型</title>
    <link href="https://zgshen.me/2017/06/30/%E6%B3%9B%E5%9E%8B/"/>
    <id>https://zgshen.me/2017/06/30/泛型/</id>
    <published>2017-06-29T16:00:00.000Z</published>
    <updated>2019-03-03T14:49:15.850Z</updated>
    
    <content type="html"><![CDATA[<p>泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。使用泛型，意味着编写的代码可以被很多不同类型    的对象所重用。<br><a id="more"></a><br><strong>泛型类</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassTest</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> T firtsFiled;</div><div class="line">    <span class="keyword">public</span> T secondFiled;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirtsFiled</span><span class="params">(T data)</span></span>&#123;</div><div class="line">        firtsFiled = data;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSecondFiled</span><span class="params">(T data)</span></span>&#123;</div><div class="line">        secondFiled = data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getFirtsFiled</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> firtsFiled;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getSecondFiled</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> secondFiled;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getStaticData</span><span class="params">(T data)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> data;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>以上是一个简单的泛型类，T成为类型变量，一般使用大写字母命名。在Java中常用变量E表示集合的元素类型，K和V表示关键字与值的类型，T表示任意类型（约定俗成的用法，事实随便一个字母都行）。<br>当实例化泛型类型需要用具体类型替代类型变量<br>例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ClassTest&lt;String&gt; one  = <span class="keyword">new</span> ClassTest&lt;&gt;();</div><div class="line">ClassTest&lt;Integer&gt; two  = <span class="keyword">new</span> ClassTest&lt;&gt;();</div><div class="line">one.setFirtsFiled(<span class="string">"data1"</span>);      </div><div class="line">two.setFirtsFiled(<span class="number">123</span>);</div></pre></td></tr></table></figure></p><p><strong>泛型方法</strong><br>泛型方法可以定义在普通类或泛型类中，与普通方法不同，泛型方法可以在调用它的时候定义类型变量。<br>例如 <code>public static &lt;T&gt; T getStaticData(T data)</code> 就是一个泛型方法，在方法的返回值前加上 <code>&lt;T&gt;</code> ，在调用时指定类型变量，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Integer staticData = ClassTest.getStaticData(<span class="number">9090</span>);</div><div class="line">String hello = ClassTest.getStaticData(<span class="string">"hello"</span>);</div></pre></td></tr></table></figure></p><p><strong>类型变量的限制</strong><br>先看这个代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">getMinData</span><span class="params">(T data)</span></span>&#123;</div><div class="line"><span class="keyword">return</span>  data.compareTo(data) &gt; <span class="number">0</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>之所以在定义泛型方法时给 <code>&lt;T&gt;</code> 继承 <code>Comparable</code> 接口，是因为 <code>data</code> 的类型无法确定，不能保证对象都有 <code>compareTo</code> 方法。<br>一个类型变量或通配符可以有多个限定，例如 <code>T extends Comparable &amp; Serializable</code><br>限定类型用“&amp;”分隔，而逗号用来分隔类型变量。<br>在Java的继承中，可以根据需要拥有多个接口超类型，但限定中至多有一个类。如果用一个类作为限定，它必须是限定列表中的第一个。(core Java)</p><p><strong>类型擦除</strong><br>在虚拟机中没有泛型类型对象，所有对象都属于普通类。Java中的泛型基本上都是在编译器这个级别实现的，生成的字节码信息中是不包含泛型中的类型信息的。在定义一个泛型类型时， 都会提供一个删去类型参数后的原始类型，擦除类型变量，并替换为限定类型（无限定的变量用Object）。<br>例如以上的泛型类擦除类型后的原始类型：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> Object firtsFiled;</div><div class="line">    <span class="keyword">public</span> Object secondFiled;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirtsFiled</span><span class="params">(Object data)</span></span>&#123;</div><div class="line">        firtsFiled = data;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSecondFiled</span><span class="params">(Object data)</span></span>&#123;</div><div class="line">        secondFiled = data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getFirtsFiled</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> firtsFiled;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getSecondFiled</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> secondFiled;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getStaticData</span><span class="params">(Object data)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> data;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>所以，不能存在如此两个方法，编译器会提示错误<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFirtsFiled</span><span class="params">(T a)</span></span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="string">"1"</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFirtsFiled</span><span class="params">(Object w)</span></span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="string">"1"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>通配符类型</strong><br>在泛型操作中进行参数传递时泛型类型必须匹配才能传递，使用通配符来设置传递参数的类型<br>例子，其中Man是Peple的子类，不必关心实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(ClassTest&lt;Peple&gt; p)</span></span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(ClassTest&lt;? extends Peple&gt; p )</span></span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SubClass sub = <span class="keyword">new</span> SubClass();</div><div class="line">        ClassTest&lt;Man&gt; tt = <span class="keyword">new</span> ClassTest&lt;&gt;();</div><div class="line">        <span class="comment">//sub.test(tt);错误</span></div><div class="line">        sub.transfer(tt);</div><div class="line"></div><div class="line">        ClassTest&lt;? extends Peple&gt; tt2 = <span class="keyword">new</span> ClassTest();</div><div class="line">        <span class="comment">//tt2.setFirtsFiled(new Man());错误</span></div><div class="line">        <span class="comment">//tt2.setFirtsFiled(new Peple());错误</span></div><div class="line">        Peple pp =tt2.getSecondFiled();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>当调用 <code>sub.test(tt);</code> 时发生错误，我们不能把一个 <code>ClassTest&lt;Man&gt;</code> 传递给这个方法， tt 的类型是 <code>ClassTest&lt;People&gt;</code> ，但定义 <code>public void transfer(ClassTest&lt;? extends Peple&gt; p )</code> 使用通配符后 <code>sub.transfer(tt);</code> 可以正确使用。<br>再看下面的两个错误，使用通配符后set方法和get方法显然为<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setFirtsFiled</span><span class="params">(? extends Peple)</span></span></div><div class="line">? extends Peple <span class="title">getSecondFiled</span><span class="params">()</span></div></pre></td></tr></table></figure></p><p>编译器只知道要将 <code>People</code> 的子类型，但未具体指定，所有set方法会报错，而get方法就没这个问题，有点类似于多态的子类对象指定父类引用，返回一个 <code>People</code> 子类型没有问题。</p><p><strong>通配符的超类限定</strong><br>有 <code>extends</code> 来匹配子类，当然也有 <code>super</code> 来指定超类型限定，使用的意思刚好相反<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(ClassTest&lt;Man&gt; m)</span></span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(ClassTest&lt;? <span class="keyword">super</span> Man&gt; m )</span></span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SubClass sub = <span class="keyword">new</span> SubClass();</div><div class="line">        ClassTest&lt;Peple&gt; tt = <span class="keyword">new</span> ClassTest&lt;&gt;();</div><div class="line">        <span class="comment">//sub.test(tt);错误</span></div><div class="line">        sub.transfer(tt);</div><div class="line"></div><div class="line">        ClassTest&lt;? <span class="keyword">super</span> Man&gt; tt2 = <span class="keyword">new</span> ClassTest();</div><div class="line">        tt2.setFirtsFiled(<span class="keyword">new</span> Tom());<span class="comment">//Tom继承自Man</span></div><div class="line">        tt2.setFirtsFiled(<span class="keyword">new</span> Man());</div><div class="line">        <span class="comment">//tt2.setFirtsFiled(new Peple());错误</span></div><div class="line">        <span class="comment">//Peple pp = tt2.getSecondFiled();错误</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>transfer</code> 方法允许使用通配符方式传进一个 <code>ClassTest&lt;Peple&gt;</code> ,因为 <code>People</code>  是 <code>Man</code> 的超类。下面的两个错误是因为此时不确定get方法返回的对象类型无法保证，只能把它赋给一个 Object ，而set方法可以使用任意 Man 对象或它的子类型调用它。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。使用泛型，意味着编写的代码可以被很多不同类型    的对象所重用。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="https://zgshen.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java基础" scheme="https://zgshen.me/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>SSM框架，基于JavaConfig配置方式，不用xml配置文件</title>
    <link href="https://zgshen.me/2017/06/14/SSM%E6%A1%86%E6%9E%B6%EF%BC%8C%E5%9F%BA%E4%BA%8EJavaConfig%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F%EF%BC%8C%E4%B8%8D%E7%94%A8xml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>https://zgshen.me/2017/06/14/SSM框架，基于JavaConfig配置方式，不用xml配置文件/</id>
    <published>2017-06-13T16:00:00.000Z</published>
    <updated>2019-03-03T14:48:00.085Z</updated>
    
    <content type="html"><![CDATA[<p>在使用Spring开发时，我们经常会看到各种各样xml配置，过于繁多的xml配置显得复杂烦人。在Spring3之后，Spring支持使用JavaConfig来代替xml配置，这种方式也得到越来越多人的推荐，甚至在Spring Boot的项目中，基本上已经见不到xml的影子了。这里将使用JavaConfig方式对SSM框架进行整合。<br><a id="more"></a><br>一、maven 的pom.xml配置<br>各种jar包的配置如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.open.ssm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line">  </div><div class="line">  </div><div class="line">  <span class="comment">&lt;!-- 版本 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.3.0.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">jackson.version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">jackson.version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mysql-connector-java.version</span>&gt;</span>5.1.37<span class="tag">&lt;/<span class="name">mysql-connector-java.version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">fastjson.version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">fastjson.version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.7.12<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">commons-io.version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">commons-io.version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">commons-fileupload.version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">commons-fileupload.version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">commons-collections.version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">commons-collections.version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">commons-lang3.version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">commons-lang3.version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">commons-codec.version</span>&gt;</span>1.10<span class="tag">&lt;/<span class="name">commons-codec.version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">javax.servlet-api.version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">javax.servlet-api.version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.0.16<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mybatis-spring.version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">mybatis-spring.version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 依赖管理 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">   </div><div class="line">   <span class="comment">&lt;!-- 单元测试 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- json --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;fastjson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- spring --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- jdbc驱动包  --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql-connector-java.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--common 组件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-io.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-fileupload.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-collections.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-lang3.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-codec.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 日志处理 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- servlet --&gt;</span></div><div class="line"><span class="comment">&lt;!-- javax.servlet相关 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;javax.servlet-api.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">finalName</span>&gt;</span>ssm-demo<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">failOnMissingWebXml</span>&gt;</span>false<span class="tag">&lt;/<span class="name">failOnMissingWebXml</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">port</span>&gt;</span>8088<span class="tag">&lt;/<span class="name">port</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure></p><p>二、SpringMvc的配置<br>首先创建一个初始化类，继承 <code>AbstractAnnotationConfigDispatcherServletInitializer</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.open.ssm.config;</div><div class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *&lt;p&gt;Title: SpittrWebAppInitializer.java&lt;/p&gt;</div><div class="line"> *&lt;p&gt;Description: 前端控制器配置&lt;/p&gt;</div><div class="line"> *&lt;p&gt;CreateDate: 2017年6月12日&lt;/p&gt;</div><div class="line"> *<span class="doctag">@author</span> shen</div><div class="line"> *<span class="doctag">@version</span> v1.0</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAppInitializer</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOG = Logger.getLogger(WebAppInitializer.class);</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</div><div class="line">LOG.info(<span class="string">"------root配置类初始化------"</span>);</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> Class&lt;?&gt;[] &#123; RootConfig.class &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</div><div class="line">LOG.info(<span class="string">"------web配置类初始化------"</span>);</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> Class&lt;?&gt;[] &#123; WebConfig.class &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">protected</span> String[] getServletMappings() &#123;</div><div class="line">LOG.info(<span class="string">"------映射根路径初始化------"</span>);</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> String[]&#123; <span class="string">"/"</span> &#125;;<span class="comment">//请求路径映射，根路径</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里需要实现三个方法，可以其中两个方法看到需要两个配置类 <code>RootConfig</code> 和 <code>WebConfig</code> , <code>getServletMappings</code> 方法处理路径映射到 “/”，表示默认的Servlet，会处理进入应用的所有请求。</p><p>其中 <code>WebConfig</code> 用于定义 <code>DispatcherServlet</code> 加载应用上下文的配置，主要包含一些web组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.open.ssm.config;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.web.multipart.commons.CommonsMultipartResolver;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.ViewResolver;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.view.InternalResourceViewResolver;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *&lt;p&gt;Title: WebConfig.java&lt;/p&gt;</div><div class="line"> *&lt;p&gt;Description: 配置类，用于定义DispatcherServlet上下文的bean&lt;/p&gt;</div><div class="line"> *&lt;p&gt;CreateDate: 2017年6月12日&lt;/p&gt;</div><div class="line"> *<span class="doctag">@author</span> shen</div><div class="line"> *<span class="doctag">@version</span> v1.0</div><div class="line"> */</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableWebMvc</span></div><div class="line"><span class="meta">@ComponentScan</span>( <span class="string">"com.open.ssm.controller"</span> )</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> ViewResolver <span class="title">viewResolver</span><span class="params">()</span></span>&#123;</div><div class="line">InternalResourceViewResolver resolver = <span class="keyword">new</span> InternalResourceViewResolver();</div><div class="line">resolver.setPrefix(<span class="string">"/WEB-INF/view/"</span>);</div><div class="line">resolver.setSuffix(<span class="string">".jsp"</span>);</div><div class="line"><span class="keyword">return</span> resolver;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//文件上传，bean必须写name属性且必须为multipartResolver，不然取不到文件对象，别问我为什么，我也唔知</span></div><div class="line"><span class="meta">@Bean</span>(name=<span class="string">"multipartResolver"</span>)</div><div class="line"><span class="function"><span class="keyword">protected</span> CommonsMultipartResolver <span class="title">MultipartResolver</span><span class="params">()</span> </span>&#123;</div><div class="line">CommonsMultipartResolver multipartResolver = <span class="keyword">new</span> CommonsMultipartResolver();</div><div class="line"><span class="comment">//multipartResolver.setUploadTempDir(new FileSystemResource("/tmp"));//可不设置</span></div><div class="line">multipartResolver.setMaxUploadSize(<span class="number">2097152</span>);<span class="comment">//2M</span></div><div class="line">multipartResolver.setMaxInMemorySize(<span class="number">0</span>);</div><div class="line">multipartResolver.setDefaultEncoding(<span class="string">"UTF-8"</span>);</div><div class="line"><span class="keyword">return</span> multipartResolver;</div><div class="line">&#125;</div><div class="line"></div><div class="line">   <span class="comment">//静态资源的处理</span></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> </span>&#123;</div><div class="line">        configurer.enable();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>而 <code>RootConfig</code> 类主要配置持久层的一些东西，包括数据库、Mybatis框架，事务之类的东西。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.open.ssm.config;</div><div class="line"><span class="keyword">import</span> org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *&lt;p&gt;Title: RootConfig.java&lt;/p&gt;</div><div class="line"> *&lt;p&gt;Description: 配置类，用于管理ContextLoadListener创建的上下文的bean&lt;/p&gt;</div><div class="line"> *&lt;p&gt;CreateDate: 2017年6月12日&lt;/p&gt;</div><div class="line"> *<span class="doctag">@author</span> shen</div><div class="line"> *<span class="doctag">@version</span> v1.0</div><div class="line"> */</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(basePackages=&#123; <span class="string">"com.open.ssm.config"</span>, <span class="string">"com.open.ssm.dao"</span>, <span class="string">"com.open.ssm.service"</span> &#125;)</div><div class="line"><span class="meta">@Import</span>(DruidDataSourceConfig.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RootConfig</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> BeanNameAutoProxyCreator <span class="title">proxycreate</span><span class="params">()</span></span>&#123;</div><div class="line">    BeanNameAutoProxyCreator proxycreate = <span class="keyword">new</span> BeanNameAutoProxyCreator();</div><div class="line">    proxycreate.setProxyTargetClass(<span class="keyword">true</span>);</div><div class="line">    proxycreate.setBeanNames(<span class="string">"*ServiceImpl"</span>);</div><div class="line">    proxycreate.setInterceptorNames(<span class="string">"transactionInterceptor"</span>);</div><div class="line">    <span class="keyword">return</span> proxycreate;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>三、数据库与Mybatis相关配置<br>这里的数据源使用的是阿里的Druid，接上面 <code>RootConfig</code> 类，可以看到 <code>RootConfig</code> 类又 import 导入了一个配置类 <code>DruidDataSourceConfig</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.open.ssm.config;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.sql.DataSource;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</div><div class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</div><div class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</div><div class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</div><div class="line"><span class="keyword">import</span> org.springframework.core.io.support.ResourcePatternResolver;</div><div class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</div><div class="line"><span class="keyword">import</span> org.springframework.transaction.interceptor.TransactionInterceptor;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *&lt;p&gt;Title: DruidDataSourceConfig.java&lt;/p&gt;</div><div class="line"> *&lt;p&gt;Description: 数据源属性配置&lt;/p&gt;</div><div class="line"> *&lt;p&gt;CreateDate: 2017年6月12日&lt;/p&gt;</div><div class="line"> *<span class="doctag">@author</span> shen</div><div class="line"> *<span class="doctag">@version</span> v1.0</div><div class="line"> */</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:/jdbc.properties"</span>)</div><div class="line"><span class="meta">@MapperScan</span>(basePackages=<span class="string">"com.open.ssm.dao"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidDataSourceConfig</span></span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOG = Logger.getLogger(DruidDataSourceConfig.class);</div><div class="line"></div><div class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> String dbUrl;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> String username;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> String password;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driverClassName&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> String driverClassName;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.initialSize&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> initialSize;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.minIdle&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> minIdle;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.maxActive&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxActive;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.maxWait&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxWait;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.timeBetweenEvictionRunsMillis&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> timeBetweenEvictionRunsMillis;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.minEvictableIdleTimeMillis&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> minEvictableIdleTimeMillis;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.validationQuery&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> String validationQuery;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.testWhileIdle&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> testWhileIdle;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.testOnBorrow&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> testOnBorrow;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.testOnReturn&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> testOnReturn;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.poolPreparedStatements&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> poolPreparedStatements;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.maxPoolPreparedStatementPerConnectionSize&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxPoolPreparedStatementPerConnectionSize;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.filters&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> String filters;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"&#123;spring.datasource.connectionProperties&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> String connectionProperties;  </div><div class="line">      </div><div class="line">    <span class="meta">@Bean</span>     <span class="comment">//声明其为Bean实例  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span></span>&#123;</div><div class="line">    LOG.info(<span class="string">"Initialize the data source..."</span>);</div><div class="line">        DruidDataSource datasource = <span class="keyword">new</span> DruidDataSource();  </div><div class="line">          </div><div class="line">        datasource.setUrl(<span class="keyword">this</span>.dbUrl);  </div><div class="line">        datasource.setUsername(username);  </div><div class="line">        datasource.setPassword(password);  </div><div class="line">        datasource.setDriverClassName(driverClassName);  </div><div class="line">          </div><div class="line">        <span class="comment">//configuration  </span></div><div class="line">        datasource.setInitialSize(initialSize);  </div><div class="line">        datasource.setMinIdle(minIdle);  </div><div class="line">        datasource.setMaxActive(maxActive);  </div><div class="line">        datasource.setMaxWait(maxWait);  </div><div class="line">        datasource.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis);  </div><div class="line">        datasource.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis);  </div><div class="line">        datasource.setValidationQuery(validationQuery);  </div><div class="line">        datasource.setTestWhileIdle(testWhileIdle);  </div><div class="line">        datasource.setTestOnBorrow(testOnBorrow);  </div><div class="line">        datasource.setTestOnReturn(testOnReturn);  </div><div class="line">        datasource.setPoolPreparedStatements(poolPreparedStatements);  </div><div class="line">        datasource.setMaxPoolPreparedStatementPerConnectionSize(maxPoolPreparedStatementPerConnectionSize);  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            datasource.setFilters(filters);  </div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </div><div class="line">        LOG.error(<span class="string">"druid configuration initialization filter"</span>, e);  </div><div class="line">        &#125;  </div><div class="line">        datasource.setConnectionProperties(connectionProperties);  </div><div class="line">        <span class="keyword">return</span> datasource;  </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/*</span></div><div class="line">    //JdbcTemplate的配置</div><div class="line">    @Bean</div><div class="line">    public JdbcTemplate jdbcTemplate()&#123;</div><div class="line">    JdbcTemplate jdbcTemplate = new JdbcTemplate();</div><div class="line">    jdbcTemplate.setDataSource(dataSource());</div><div class="line">    return jdbcTemplate;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Bean</div><div class="line">    public NamedParameterJdbcTemplate namedParameterJdbcTemplate()&#123;</div><div class="line">    NamedParameterJdbcTemplate namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(dataSource());</div><div class="line">    return namedParameterJdbcTemplate;</div><div class="line">    &#125;*/</div><div class="line">    </div><div class="line">    <span class="comment">//mybatis的配置</span></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactoryBean <span class="title">sqlSessionFactoryBean</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">    ResourcePatternResolver resourcePatternResolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();  </div><div class="line">        SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();  </div><div class="line">        sqlSessionFactoryBean.setDataSource(dataSource());  </div><div class="line">        sqlSessionFactoryBean.setMapperLocations(resourcePatternResolver.getResources(<span class="string">"classpath*:mappers/*.xml"</span>));</div><div class="line">        sqlSessionFactoryBean.setTypeAliasesPackage(<span class="string">"com.open.ssm.model"</span>);<span class="comment">//别名，让*Mpper.xml实体类映射可以不加上具体包名</span></div><div class="line">        <span class="keyword">return</span> sqlSessionFactoryBean;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"transactionManager"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">dataSourceTransactionManager</span><span class="params">()</span></span>&#123;</div><div class="line">    DataSourceTransactionManager dataSourceTransactionManager = <span class="keyword">new</span> DataSourceTransactionManager();</div><div class="line">    dataSourceTransactionManager.setDataSource(dataSource());</div><div class="line">    <span class="keyword">return</span> dataSourceTransactionManager;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Bean</span>(name=<span class="string">"transactionInterceptor"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> TransactionInterceptor <span class="title">interceptor</span><span class="params">()</span></span>&#123;</div><div class="line">    TransactionInterceptor interceptor = <span class="keyword">new</span> TransactionInterceptor();</div><div class="line">    interceptor.setTransactionManager(dataSourceTransactionManager());</div><div class="line">    </div><div class="line">    Properties transactionAttributes = <span class="keyword">new</span> Properties();</div><div class="line">    transactionAttributes.setProperty(<span class="string">"save*"</span>, <span class="string">"PROPAGATION_REQUIRED"</span>);</div><div class="line">    transactionAttributes.setProperty(<span class="string">"del*"</span>, <span class="string">"PROPAGATION_REQUIRED"</span>);</div><div class="line">    transactionAttributes.setProperty(<span class="string">"update*"</span>, <span class="string">"PROPAGATION_REQUIRED"</span>);</div><div class="line">    transactionAttributes.setProperty(<span class="string">"get*"</span>, <span class="string">"PROPAGATION_REQUIRED,readOnly"</span>);</div><div class="line">    transactionAttributes.setProperty(<span class="string">"find*"</span>, <span class="string">"PROPAGATION_REQUIRED,readOnly"</span>);</div><div class="line">    transactionAttributes.setProperty(<span class="string">"*"</span>, <span class="string">"PROPAGATION_REQUIRED"</span>);</div><div class="line">    </div><div class="line">    interceptor.setTransactionAttributes(transactionAttributes);</div><div class="line">    <span class="keyword">return</span> interceptor;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/*</span></div><div class="line">    //放这里会导致@value注解获取不到配置的值，移到RootConfig</div><div class="line">    @Bean</div><div class="line">    public BeanNameAutoProxyCreator proxycreate()&#123;</div><div class="line">    BeanNameAutoProxyCreator proxycreate = new BeanNameAutoProxyCreator();</div><div class="line">    proxycreate.setProxyTargetClass(true);</div><div class="line">    proxycreate.setBeanNames("*ServiceImpl");</div><div class="line">    proxycreate.setInterceptorNames("transactionInterceptor");</div><div class="line">    return proxycreate;</div><div class="line">    &#125;*/</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>数据库连接信息文件 jdbc.properties 相关内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">spring.datasource.type=com.alibaba.druid.pool.DruidDataSource</div><div class="line">spring.datasource.driverClassName=com.mysql.jdbc.Driver</div><div class="line">spring.datasource.url=jdbc:mysql://localhost:3306/blog</div><div class="line">spring.datasource.username=root</div><div class="line">spring.datasource.password=root</div><div class="line"></div><div class="line">#连接池配置</div><div class="line">spring.datasource.initialSize=5</div><div class="line">spring.datasource.minIdle=5</div><div class="line">spring.datasource.maxActive=20</div><div class="line">#连接等待超时时间</div><div class="line">spring.datasource.maxWait=60000</div><div class="line">#配置隔多久进行一次检测(检测可以关闭的空闲连接)</div><div class="line">spring.datasource.timeBetweenEvictionRunsMillis=60000</div><div class="line">#配置连接在池中的最小生存时间</div><div class="line">spring.datasource.minEvictableIdleTimeMillis=300000</div><div class="line">spring.datasource.validationQuery=SELECT 1 FROM DUAL</div><div class="line">spring.datasource.testWhileIdle=true</div><div class="line">spring.datasource.testOnBorrow=false</div><div class="line">spring.datasource.testOnReturn=false</div><div class="line"># 打开PSCache，并且指定每个连接上PSCache的大小</div><div class="line">spring.datasource.poolPreparedStatements=true</div><div class="line">spring.datasource.maxPoolPreparedStatementPerConnectionSize=20</div><div class="line"># 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</div><div class="line">spring.datasource.filters=stat,wall,log4j</div><div class="line"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录</div><div class="line">spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</div></pre></td></tr></table></figure></p><p>这里数据库的事务配置方式有三种：</p><ul><li>第一种最简单的方式，在 <code>RootConfig</code> 加上 @EnableTransactionManagement 注解，再加上配置 DataSourceTransactionManager 的bean，就可以在service实现层使用 @Transactional 注解为方法手动加上事务，并且指定的传播属性等等，但老是要手动加 @Transactional 注解实在麻烦</li><li>第二种就是文中使用的方式，使用 <code>BeanNameAutoProxyCreator</code> 拦截代理方式，先创建一个 <code>TransactionInterceptor</code> bean，配置好事务传播等属性，在由 <code>BeanNameAutoProxyCreator</code> 进行事务代理。这里有个问题就是 <code>BeanNameAutoProxyCreator</code> 放在 <code>RootConfig</code> 中居然会导致 @value注解获取不到配置文件的值，而是键名字，将它直接放到 <code>RootConfig</code> 下就没事了</li><li>第三种是采用aop切面事务， @EnableAspectJAutoProxy 开启切面自动代理，这里写一个切面相关类 <code>AspectConfig</code> ，然后在 使用 @Import(AspectConfig.class) 导进配置就行，由于 <code>&lt;tx:</code> 开头的这种标签实在不知如何用java方式表示，在 stackoverflow 看到一个答案讲还是只能写一个xml文件，使用 @ImportResource(“classpath:/aop-config.xml”) 这种方式进行配置，具体实现如下(三种方式根据需要去掉无关代码，免得出冲突)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.open.ssm.config;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.ImportResource;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *&lt;p&gt;Title: AspectConfig.java&lt;/p&gt;</div><div class="line"> *&lt;p&gt;Description: 切面事务&lt;/p&gt;</div><div class="line"> *&lt;p&gt;CreateDate: 2017年6月12日&lt;/p&gt;</div><div class="line"> *<span class="doctag">@author</span> shen</div><div class="line"> *<span class="doctag">@version</span> v1.0</div><div class="line"> */</div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@ImportResource</span>(<span class="string">"classpath:/aop-config.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectConfig</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(* com.open.ssm.service.*.*(..))"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serviceAnnotatedClass</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>四、Druid监控<br>Druid监控这里使用最简单的方式，就一个servlet和一个filter<br>servlet 继承自 StatViewServlet<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.open.ssm.web;</div><div class="line"><span class="keyword">import</span> javax.servlet.annotation.WebInitParam;</div><div class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</div><div class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.StatViewServlet;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *&lt;p&gt;Title: DruidServlMonitor.java&lt;/p&gt;</div><div class="line"> *&lt;p&gt;Description: Druid Servlet&lt;/p&gt;</div><div class="line"> *&lt;p&gt;CreateDate: 2017年6月14日&lt;/p&gt;</div><div class="line"> *<span class="doctag">@author</span> shen</div><div class="line"> *<span class="doctag">@version</span> v1.0</div><div class="line"> */</div><div class="line"><span class="meta">@WebServlet</span>(name=<span class="string">"druidMonitor"</span>, urlPatterns=<span class="string">"/druid/*"</span>, initParams=&#123;</div><div class="line"><span class="meta">@WebInitParam</span>(name=<span class="string">"allow"</span>, value=<span class="string">"127.0.0.1"</span>),</div><div class="line"><span class="meta">@WebInitParam</span>(name=<span class="string">"loginUsername"</span>, value=<span class="string">"admin"</span>),</div><div class="line"><span class="meta">@WebInitParam</span>(name=<span class="string">"loginPassword"</span>, value=<span class="string">"123123"</span>),</div><div class="line"><span class="meta">@WebInitParam</span>(name=<span class="string">"resetEnable"</span>, value=<span class="string">"false"</span>)</div><div class="line">&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidServletMonitor</span> <span class="keyword">extends</span> <span class="title">StatViewServlet</span></span>&#123;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>filter继承自 WebStatFilter<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.open.ssm.web;</div><div class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</div><div class="line"><span class="keyword">import</span> javax.servlet.annotation.WebInitParam;</div><div class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.WebStatFilter;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Servlet Filter implementation class DruidStatFilter</div><div class="line"> */</div><div class="line"><span class="meta">@WebFilter</span>(filterName=<span class="string">"druidFilter"</span>, urlPatterns=<span class="string">"/*"</span>, initParams=&#123;</div><div class="line"><span class="meta">@WebInitParam</span>(name=<span class="string">"exclusions"</span>, value=<span class="string">"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"</span>)</div><div class="line">&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidStatFilter</span> <span class="keyword">extends</span> <span class="title">WebStatFilter</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>浏览器直接输入ip+端口/druid，这里在本地是 <a href="http://localhost:8088/druid" target="_blank" rel="external">http://localhost:8088/druid</a> 进入登录页面，输入配置的用户名密码就可以进入监控页面了。</p><p>本文我写了一个demo，放在 <a href="https://github.com/shen28/ssm-demo" target="_blank" rel="external">https://github.com/shen28/ssm-demo</a> ，后续有时间会加上其他的一些东西。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用Spring开发时，我们经常会看到各种各样xml配置，过于繁多的xml配置显得复杂烦人。在Spring3之后，Spring支持使用JavaConfig来代替xml配置，这种方式也得到越来越多人的推荐，甚至在Spring Boot的项目中，基本上已经见不到xml的影子了。这里将使用JavaConfig方式对SSM框架进行整合。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="https://zgshen.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web框架" scheme="https://zgshen.me/tags/web%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 普通类调用Bean对象的一种方式</title>
    <link href="https://zgshen.me/2017/06/08/Spring%20Boot%20%E6%99%AE%E9%80%9A%E7%B1%BB%E8%B0%83%E7%94%A8Bean%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%80%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://zgshen.me/2017/06/08/Spring Boot 普通类调用Bean对象的一种方式/</id>
    <published>2017-06-07T16:00:00.000Z</published>
    <updated>2019-03-03T14:47:34.260Z</updated>
    
    <content type="html"><![CDATA[<p>有时我们有一些特殊的需要，可能要在一个不被Spring管理的普通类中去调用Spring管理的bean对象的一些方法，比如一般SpringMVC工程在controller中通过<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> TestService testService;</div></pre></td></tr></table></figure></p><p>注入TestService 接口就可以调用此接口实现类的实现的方法。<a id="more"></a><br>但在一般类中显然不可以这么做，注入的 TestService  将会报空指针异常，你无法拿到这个bean，在一般的ssm工程中我们可以通过xml配置把普通类设置成一个bean对象，那么 TestService 就有效了， 或者使用 <code>ApplicationContext</code> 直接读取xml配置中的bean也可以拿到 TestService。`</p><p>Spring Boot 已经摒弃了各种繁琐的xml配置，当然就不再使用xml配置的方式，之前在网上看到一种很简便的方式，但现在又找不到链接了，这里做下记录。</p><p>在普通类中定义 <code>ApplicationContext</code> 静态变量和set方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;<span class="comment">//启动类set入，调用下面set方法</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext context)</span> </span>&#123;</div><div class="line">applicationContext = context;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在启动类中，启动时事实已经生成 ConfigurableApplicationContext 对象， ConfigurableApplicationContext 是 ApplicationContext 接口的实现，这里直接传到普通类的 setApplicationContext 方法就行了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@ServletComponentScan</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WxApplication</span> <span class="keyword">implements</span> <span class="title">EmbeddedServletContainerCustomizer</span></span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">ConfigurableApplicationContext applicationContext = SpringApplication.run(WxApplication.class, args);</div><div class="line">TestClass.setApplicationContext(applicationContext);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>由于是静态变量，类加载时 applicationContext 已经存在，就可获取到 TestService 了，唯一不好就是静态变量在服务器启动后将一直存在<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClass</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;<span class="comment">//启动类set入，调用下面set方法</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext context)</span> </span>&#123;</div><div class="line"><span class="comment">// TODO Auto-generated method stub</span></div><div class="line">applicationContext = context;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getBeanTest</span><span class="params">()</span></span>&#123;</div><div class="line">TestService testService  = (TestService)applicationContext.getBean(TestService.class);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>补充</strong>：<br>在普通 Spring 工程在启动的时候都会通过 <code>org.springframework.web.context.ContextLoaderListener</code> 监听器从加载系统资源并管理bean， Spring 提供的 <code>WebApplicationContextUtils</code> 工具类能在请求时获取到运行时工程的bean，如果看源码就可以知道监听器执行时与 <code>WebApplicationContextUtils</code> 类的关联</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//封装一下，类的class和请求request为必要参数</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;? extends Object&gt; cla,HttpServletRequest request)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(request == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (T)WebApplicationContextUtils.getRequiredWebApplicationContext(request.getServletContext()).getBean(cla);<span class="comment">//getBean参数可为bean类的.class或直接是bean的Id</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//这样获取bean</span></div><div class="line">TestService testService= (TestService)getBean(TestService.class, request);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时我们有一些特殊的需要，可能要在一个不被Spring管理的普通类中去调用Spring管理的bean对象的一些方法，比如一般SpringMVC工程在controller中通过&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; TestService testService;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注入TestService 接口就可以调用此接口实现类的实现的方法。
    
    </summary>
    
      <category term="技术" scheme="https://zgshen.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Spring" scheme="https://zgshen.me/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 过滤器、监听器和拦截器使用</title>
    <link href="https://zgshen.me/2017/06/07/Spring%20Boot%20%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8%E4%BD%BF%E7%94%A8/"/>
    <id>https://zgshen.me/2017/06/07/Spring Boot 过滤器、监听器和拦截器使用/</id>
    <published>2017-06-06T16:00:00.000Z</published>
    <updated>2019-03-03T14:47:44.957Z</updated>
    
    <content type="html"><![CDATA[<p>1、过滤器和监听器<br>Spring Boot中对于过滤器和监听器的使用跟一般web工程中使用方式没什么不同，使用注解方式就可以快速创建，只是要使用注解方式需要在Application类加上 <code>@ServletComponentScan</code> 注解表明开启servlet的注解<br>创建一个监听器<a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebListener</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span></span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Logger LOG = LoggerFactory.getLogger(FirstListener.class);</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</div><div class="line">LOG.info(<span class="string">"FirstListener 初始化..."</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</div><div class="line">LOG.info(<span class="string">"FirstListener 销毁..."</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>创建一个过滤器，过滤test和hello下文的所有路径<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebFilter</span>(filterName=<span class="string">"firstFilter"</span>, urlPatterns = &#123;</div><div class="line"><span class="string">"/test/*"</span>,</div><div class="line"><span class="string">"/hello/*"</span></div><div class="line">&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirsrtFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Logger LOG = LoggerFactory.getLogger(FirsrtFilter.class);</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></div><div class="line"><span class="keyword">throws</span> IOException, ServletException &#123;</div><div class="line">HttpServletRequest req = (HttpServletRequest) request;</div><div class="line">String requestURI = req.getRequestURI();</div><div class="line">LOG.info(<span class="string">"过滤到的请求---&gt;"</span>+requestURI);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>运行 application 类可看到日志输出<br><code>2017-06-08 17:14:55.252  INFO 7552 --- [ost-startStop-1] com.fyft.test.web.FirstListener          : FirstListener 初始化...</code></p><p>写一个请求路径为 <code>test</code> 的 controller 并访问，可看到<br><code>2017-06-08 17:15:50.799  INFO 7552 --- [nio-8003-exec-1] com.fyft.test.web.FirsrtFilter           : 过滤到的请求---&gt;/test</code></p><p>2、拦截器</p><p>实现 <code>HandlerInterceptor</code> 接口创建一个拦截器类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)</span></span></div><div class="line"><span class="keyword">throws</span> Exception &#123;</div><div class="line"><span class="comment">// TODO Auto-generated method stub</span></div><div class="line"><span class="comment">//在整个请求结束之后被调用，也就是在DispatcherServlet 渲染了对应的视图之后执行，主要是用于进行资源清理工作</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)</span></span></div><div class="line"><span class="keyword">throws</span> Exception &#123;</div><div class="line"><span class="comment">// TODO Auto-generated method stub</span></div><div class="line"><span class="comment">//请求处理之后进行调用，但是在视图被渲染之前，即Controller方法调用之后</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object object)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"><span class="comment">// TODO Auto-generated method stub</span></div><div class="line"><span class="comment">//controller方法调用之前</span></div><div class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后在初始化配置类中注册拦截器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebAppConfigurer</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 添加拦截器</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</div><div class="line">registry.addInterceptor(<span class="keyword">new</span> MyInterceptor()).addPathPatterns(<span class="string">"/*"</span>);</div><div class="line"><span class="comment">//registry.addInterceptor(new MyInterceptor_copy()).addPathPatterns("/*");//有多个拦截器继续add进去</span></div><div class="line"><span class="keyword">super</span>.addInterceptors(registry);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里的拦截器只有经过DispatcherServlet 的请求，才会走拦截器链，默认不拦截静态资源，Spring Boot中默认的静态资源路径有 <code>classpath:/META-INF/resources/，classpath:/resources/，classpath:/static/，classpath:/public/</code> ，在拦截器中我们可以处理一些我们需要的业务，比如防xss攻击，在调用controller前对提交内容进行过滤等等。</p><p>参考博客 <code>http://blog.csdn.net/catoop/article/details/50501696</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、过滤器和监听器&lt;br&gt;Spring Boot中对于过滤器和监听器的使用跟一般web工程中使用方式没什么不同，使用注解方式就可以快速创建，只是要使用注解方式需要在Application类加上 &lt;code&gt;@ServletComponentScan&lt;/code&gt; 注解表明开启servlet的注解&lt;br&gt;创建一个监听器
    
    </summary>
    
      <category term="技术" scheme="https://zgshen.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web框架" scheme="https://zgshen.me/tags/web%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>深圳</title>
    <link href="https://zgshen.me/2017/05/28/%E6%B7%B1%E5%9C%B3/"/>
    <id>https://zgshen.me/2017/05/28/深圳/</id>
    <published>2017-05-27T16:00:00.000Z</published>
    <updated>2018-09-14T01:32:04.552Z</updated>
    
    <content type="html"><![CDATA[<p>深圳北站。<br><img src="https://i.imgur.com/TN4PUOw.jpg" alt="深圳北站" title="" width="500px"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;深圳北站。&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/TN4PUOw.jpg&quot; alt=&quot;深圳北站&quot; title=&quot;&quot; width=&quot;500px&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="其他" scheme="https://zgshen.me/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boor配置Druid数据源</title>
    <link href="https://zgshen.me/2017/05/18/Spring%20Boor%E9%85%8D%E7%BD%AEDruid%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
    <id>https://zgshen.me/2017/05/18/Spring Boor配置Druid数据源/</id>
    <published>2017-05-17T16:00:00.000Z</published>
    <updated>2019-03-03T14:47:30.190Z</updated>
    
    <content type="html"><![CDATA[<p>Druid是阿里巴巴开源平台上的一个项目,整个项目由数据库连接池、插件框架和SQL解析器组成。</p><h3 id="添加Druid数据源"><a href="#添加Druid数据源" class="headerlink" title="添加Druid数据源"></a>添加Druid数据源</h3><p>要使用Druid数据源，我们需要在 application.properties 下添加配置信息<a id="more"></a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">#数据库访问配置</div><div class="line">#mysql</div><div class="line">#spring.datasource.type=com.alibaba.druid.pool.DruidDataSource</div><div class="line">#spring.datasource.driver-class-name=com.mysql.jdbc.Driver</div><div class="line">#spring.datasource.url=jdbc:mysql://localhost:3306/blog</div><div class="line">#oracle</div><div class="line">spring.datasource.driverClassName=oracle.jdbc.driver.OracleDriver</div><div class="line">spring.datasource.url=jdbc:oracle:thin:@127.0.0.1:1521:orcl</div><div class="line">spring.datasource.username=system</div><div class="line">spring.datasource.password=123456</div><div class="line"></div><div class="line">#连接池配置</div><div class="line">spring.datasource.initialSize=5</div><div class="line">spring.datasource.minIdle=5</div><div class="line">spring.datasource.maxActive=20</div><div class="line">#连接等待超时时间</div><div class="line">spring.datasource.maxWait=60000</div><div class="line">#配置隔多久进行一次检测(检测可以关闭的空闲连接)</div><div class="line">spring.datasource.timeBetweenEvictionRunsMillis=60000</div><div class="line">#配置连接在池中的最小生存时间</div><div class="line">spring.datasource.minEvictableIdleTimeMillis=300000</div><div class="line">spring.datasource.validationQuery=SELECT 1 FROM DUAL</div><div class="line">spring.datasource.testWhileIdle=true</div><div class="line">spring.datasource.testOnBorrow=false</div><div class="line">spring.datasource.testOnReturn=false</div><div class="line"># 打开PSCache，并且指定每个连接上PSCache的大小</div><div class="line">spring.datasource.poolPreparedStatements=true</div><div class="line">spring.datasource.maxPoolPreparedStatementPerConnectionSize=20</div><div class="line"># 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</div><div class="line">spring.datasource.filters=stat,wall,log4j</div><div class="line"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录</div><div class="line">spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</div></pre></td></tr></table></figure></p><p>上面提供了mysql和oracle两种数据库驱动的配置，由于maven中心仓库不提供oracle驱动，需要到oracle官网自行下载你自己版本需要的oracle数据库驱动，再安装到本地仓库。我这里用的eclipse自带的maven，安装oracle数据库驱动到本地仓库是直接建个文件夹丢进去重命下名的，简单粗暴。</p><p>参考：jar包放com/oracle/ojdbc6/10.2.0.1.0 文件夹下，命名ojdbc6-10.2.0.1.0.jar<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oracle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ojdbc6<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;ojdbc6.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p><p>此外，在本版本（1.5.2）的Spring Boot 中，对于上面Druid连接池的配置都不支持，意味着这些配置属性不会生效，所以，需要些一个配置类来读取这些配置并设置到数据源中去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.fyft.wx.config;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"><span class="keyword">import</span> javax.sql.DataSource;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</div><div class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *&lt;p&gt;Title: DruidDataSourceConfig.java&lt;/p&gt;</div><div class="line"> *&lt;p&gt;Description: 数据源属性配置&lt;/p&gt;</div><div class="line"> *&lt;p&gt;CreateDate: 2017年5月18日&lt;/p&gt;</div><div class="line"> *<span class="doctag">@author</span> shen</div><div class="line"> *<span class="doctag">@version</span> v1.0</div><div class="line"> */</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@Primary</span> <span class="comment">//在同样的DataSource中，首先使用被标注的DataSource</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidDataSourceConfig</span> <span class="keyword">extends</span> <span class="title">DataSourceProperties</span></span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(DruidDataSourceConfig.class);</div><div class="line"></div><div class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> String dbUrl;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> String username;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> String password;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driverClassName&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> String driverClassName;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.initialSize&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> initialSize;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.minIdle&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> minIdle;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.maxActive&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxActive;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.maxWait&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxWait;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.timeBetweenEvictionRunsMillis&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> timeBetweenEvictionRunsMillis;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.minEvictableIdleTimeMillis&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> minEvictableIdleTimeMillis;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.validationQuery&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> String validationQuery;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.testWhileIdle&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> testWhileIdle;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.testOnBorrow&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> testOnBorrow;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.testOnReturn&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> testOnReturn;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.poolPreparedStatements&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> poolPreparedStatements;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.maxPoolPreparedStatementPerConnectionSize&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxPoolPreparedStatementPerConnectionSize;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.filters&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> String filters;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"&#123;spring.datasource.connectionProperties&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> String connectionProperties;  </div><div class="line">      </div><div class="line">    <span class="meta">@Bean</span>     <span class="comment">//声明其为Bean实例  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span></span>&#123;  </div><div class="line">        DruidDataSource datasource = <span class="keyword">new</span> DruidDataSource();  </div><div class="line">          </div><div class="line">        datasource.setUrl(<span class="keyword">this</span>.dbUrl);  </div><div class="line">        datasource.setUsername(username);  </div><div class="line">        datasource.setPassword(password);  </div><div class="line">        datasource.setDriverClassName(driverClassName);  </div><div class="line">          </div><div class="line">        <span class="comment">//configuration  </span></div><div class="line">        datasource.setInitialSize(initialSize);  </div><div class="line">        datasource.setMinIdle(minIdle);  </div><div class="line">        datasource.setMaxActive(maxActive);  </div><div class="line">        datasource.setMaxWait(maxWait);  </div><div class="line">        datasource.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis);  </div><div class="line">        datasource.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis);  </div><div class="line">        datasource.setValidationQuery(validationQuery);  </div><div class="line">        datasource.setTestWhileIdle(testWhileIdle);  </div><div class="line">        datasource.setTestOnBorrow(testOnBorrow);  </div><div class="line">        datasource.setTestOnReturn(testOnReturn);  </div><div class="line">        datasource.setPoolPreparedStatements(poolPreparedStatements);  </div><div class="line">        datasource.setMaxPoolPreparedStatementPerConnectionSize(maxPoolPreparedStatementPerConnectionSize);  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            datasource.setFilters(filters);  </div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </div><div class="line">            logger.error(<span class="string">"druid configuration initialization filter"</span>, e);  </div><div class="line">        &#125;  </div><div class="line">        datasource.setConnectionProperties(connectionProperties);  </div><div class="line">          </div><div class="line">        <span class="keyword">return</span> datasource;  </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>本段配置参考自 <a href="http://blog.csdn.net/blueheart20/article/details/52384032" target="_blank" rel="external">http://blog.csdn.net/blueheart20/article/details/52384032</a><br>其中 @Primary 注解需要放在类上，不然本类配置还是不会覆盖默认的数据源配置，原作者是放在 <code>public DataSource dataSource()</code> 方法上，会报存在两个配置的错误，估计是Spring Boot版本的差异问题。</p><h3 id="配置监控统计功能"><a href="#配置监控统计功能" class="headerlink" title="配置监控统计功能"></a>配置监控统计功能</h3><p>新建一个配置类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.fyft.wx.config;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.StatViewServlet;</div><div class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.WebStatFilter;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *&lt;p&gt;Title: DruidConfiguration.java&lt;/p&gt;</div><div class="line"> *&lt;p&gt;Description: Druid监控配置&lt;/p&gt;</div><div class="line"> *&lt;p&gt;CreateDate: 2017年5月3日&lt;/p&gt;</div><div class="line"> *<span class="doctag">@author</span> shen</div><div class="line"> *<span class="doctag">@version</span> v1.0</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidMonitorConfig</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">     * 注册ServletRegistrationBean</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">registrationBean</span><span class="params">()</span> </span>&#123;</div><div class="line">        ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(), <span class="string">"/druid/*"</span>);</div><div class="line">        <span class="comment">/** 初始化参数配置，initParams**/</span></div><div class="line">        <span class="comment">//白名单</span></div><div class="line">        bean.addInitParameter(<span class="string">"allow"</span>, <span class="string">"127.0.0.1"</span>);<span class="comment">//多个ip逗号隔开</span></div><div class="line">        <span class="comment">//IP黑名单 (存在共同时，deny优先于allow) : 如果满足deny的话提示:Sorry, you are not permitted to view this page.</span></div><div class="line">        <span class="comment">//bean.addInitParameter("deny", "192.168.1.73");</span></div><div class="line">        <span class="comment">//登录查看信息的账号密码.</span></div><div class="line">        bean.addInitParameter(<span class="string">"loginUsername"</span>, <span class="string">"admin"</span>);</div><div class="line">        bean.addInitParameter(<span class="string">"loginPassword"</span>, <span class="string">"123456"</span>);</div><div class="line">        <span class="comment">//是否能够重置数据.</span></div><div class="line">        bean.addInitParameter(<span class="string">"resetEnable"</span>, <span class="string">"false"</span>);</div><div class="line">        <span class="keyword">return</span> bean;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 注册FilterRegistrationBean</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">druidStatFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">        FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean(<span class="keyword">new</span> WebStatFilter());</div><div class="line">        <span class="comment">//添加过滤规则.</span></div><div class="line">        bean.addUrlPatterns(<span class="string">"/*"</span>);</div><div class="line">        <span class="comment">//添加不需要忽略的格式信息.</span></div><div class="line">        bean.addInitParameter(<span class="string">"exclusions"</span>,<span class="string">"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"</span>);</div><div class="line">        <span class="keyword">return</span> bean;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>启动项目后访问 ip:端口/druid 输入配置类设置的账号密码进入监控后台。我们先执行一个数据库操作，可以在sql监控选项卡看到执行的sql<br><img src="https://i.imgur.com/JEBueNM.png" alt="这里写图片描述"></p><p>查看数据源选项卡可以看到配置连接池参数也都生效了<br><img src="https://i.imgur.com/y0z7uOV.png" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Druid是阿里巴巴开源平台上的一个项目,整个项目由数据库连接池、插件框架和SQL解析器组成。&lt;/p&gt;
&lt;h3 id=&quot;添加Druid数据源&quot;&gt;&lt;a href=&quot;#添加Druid数据源&quot; class=&quot;headerlink&quot; title=&quot;添加Druid数据源&quot;&gt;&lt;/a&gt;添加Druid数据源&lt;/h3&gt;&lt;p&gt;要使用Druid数据源，我们需要在 application.properties 下添加配置信息
    
    </summary>
    
      <category term="技术" scheme="https://zgshen.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web框架" scheme="https://zgshen.me/tags/web%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 热部署与日志配置</title>
    <link href="https://zgshen.me/2017/05/11/Spring%20Boot%20%E7%83%AD%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE/"/>
    <id>https://zgshen.me/2017/05/11/Spring Boot 热部署与日志配置/</id>
    <published>2017-05-10T16:00:00.000Z</published>
    <updated>2019-03-03T14:47:40.821Z</updated>
    
    <content type="html"><![CDATA[<p>热部署和日志是开发中常用的功能，Srping Boot同样集成了相应的工具，可以方便地实现这些功能。</p><h3 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h3><p>Spring Boot提供了 <code>spring-boot-devtools</code> 模块用于热部署，直接引入就行。<a id="more"></a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p><p>当修改代码重新编译时，工程就会重新启动加载。</p><h3 id="日志功能"><a href="#日志功能" class="headerlink" title="日志功能"></a>日志功能</h3><p>当引入 <code>spring-boot-starter-web</code>  时候，Spring Boot已经自动引入 <code>spring-boot-starter-logging</code> ，这里我们使用Logback来实现日志管理。Logback是log4j框架的作者开发的新一代日志框架，它效率更高、能够适应诸多的运行环境，同时天然支持SLF4J。</p><p>在spring-boot-starter-xx.RELEASE.jar （xx为版本号）下    <code>org.springframework.boot.logging.logback</code> 包中可看到一个base.xml文件,这是Spring Boot 的logback的默认配置。内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">Base logback configuration provided for compatibility with Spring Boot 1.1</div><div class="line">--&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">included</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/defaults.xml"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_FILE"</span> <span class="attr">value</span>=<span class="string">"$&#123;LOG_FILE:-$&#123;LOG_PATH:-$&#123;LOG_TEMP:-$&#123;java.io.tmpdir:-/tmp&#125;&#125;&#125;/spring.log&#125;"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/console-appender.xml"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/file-appender.xml"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">included</span>&gt;</span></div></pre></td></tr></table></figure></p><p>可以看到日志的输出级别是INFO，输出到文件需要我们东东配置下路径。在application.properties进行配置如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#日志配置</div><div class="line">logging.file=test.log</div><div class="line">logging.level.com.fyft.wx.controller=warn</div></pre></td></tr></table></figure></p><p>运行会在工程根目录看到生成的日志文件，把<code>com.fyft.wx.controller</code> 包的日志级别设置为warn了<br>controller下写个测试类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.fyft.wx.controller;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOG = LoggerFactory.getLogger(IndexController.class);</div><div class="line"></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"test"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</div><div class="line">LOG.info(<span class="string">"a info logger..."</span>);</div><div class="line">LOG.error(<span class="string">"a error logger..."</span>);</div><div class="line"><span class="keyword">return</span> <span class="string">"welcome to the FYFT index page.I'm shen."</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>访问本controller，输出（日志级别ALL &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL &lt; OFF，所以只输出error的）<br><img src="https://i.imgur.com/fFwjHVg.png" alt="这里写图片描述"></p><p>如果我们需要更复杂的日志功能，可以自己写一个xml文件来配置，比如输出到控制台使用Spring Boot的默认配置，而输出到文件使用自定义配置。<br>在resources下新建一个logback.xml配置文件并把刚才logging.file的配置删掉，配置如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 继承默认配置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/base.xml"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework.web"</span> <span class="attr">level</span>=<span class="string">"WARN"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 日志存储路径 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"D:\\logs"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 文件输出配置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">File</span>&gt;</span>$&#123;LOG_HOME&#125;\\fyft-wx.log<span class="tag">&lt;/<span class="name">File</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- daily rollover 保存历史记录到这个文件夹一日起为后缀 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;\\temp\\fyft-wx.%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- keep 30 days' worth of history 保存天数--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 日志大小 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>2MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;35&#125; - %msg %n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- root节点，配置日志级别，添加输出节点 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span>&gt;</span><span class="tag">&lt;/<span class="name">appender-ref</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></p><p>如果输出到控制台的日志也需要自定义，就再加上一个 appender 配置，并添加到root节点。需要注意的是继承自 Spring Bootd 配置需要去掉，不然控制台的日志会输出两次（logger输出一次，root输出一次）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </div><div class="line"><span class="comment">&lt;!-- 去掉继承的配置 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- &lt;include resource="org/springframework/boot/logging/logback/base.xml"/&gt;</span></div><div class="line">&lt;logger name="org.springframework.web" level="WARN"/&gt; --&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 日志存储路径 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"D:\\logs"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 文件输出配置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">File</span>&gt;</span>$&#123;LOG_HOME&#125;\\fyft-wx.log<span class="tag">&lt;/<span class="name">File</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- daily rollover 保存历史记录到这个文件夹一日起为后缀 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;\\temp\\fyft-wx.%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- keep 30 days' worth of history 保存天数--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 日志大小 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>2MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;35&#125; - %msg %n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 控制台输出配置 --&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span> </div><div class="line">            <span class="comment">&lt;!--格式化输出：%d表示日期，$&#123;PID&#125; 进程Id， %thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span> </div><div class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; $&#123;PID&#125; [%thread] %-5level %logger&#123;35&#125; - %msg %n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- root节点，配置日志级别，添加输出节点 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span>&gt;</span><span class="tag">&lt;/<span class="name">appender-ref</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>&gt;</span><span class="tag">&lt;/<span class="name">appender-ref</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure><p>其他更多详细的logback配置可查看官方文档 <a href="https://logback.qos.ch/manual/configuration.html" target="_blank" rel="external">https://logback.qos.ch/manual/configuration.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;热部署和日志是开发中常用的功能，Srping Boot同样集成了相应的工具，可以方便地实现这些功能。&lt;/p&gt;
&lt;h3 id=&quot;热部署&quot;&gt;&lt;a href=&quot;#热部署&quot; class=&quot;headerlink&quot; title=&quot;热部署&quot;&gt;&lt;/a&gt;热部署&lt;/h3&gt;&lt;p&gt;Spring Boot提供了 &lt;code&gt;spring-boot-devtools&lt;/code&gt; 模块用于热部署，直接引入就行。
    
    </summary>
    
      <category term="技术" scheme="https://zgshen.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web框架" scheme="https://zgshen.me/tags/web%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>创建一个Spring Boot工程</title>
    <link href="https://zgshen.me/2017/05/10/%E5%88%9B%E5%BB%BASpring%20Boot%E5%B7%A5%E7%A8%8B/"/>
    <id>https://zgshen.me/2017/05/10/创建Spring Boot工程/</id>
    <published>2017-05-09T16:00:00.000Z</published>
    <updated>2019-03-03T14:48:49.664Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在搭建传统的SpringMVC项目或其他Spring项目的的时候，我们通常都需要写一堆与Spring整合的xml配置文件，过程繁琐复杂不说，而且容易出错。为了简化开发，Spring Boot应运而生。<br>Spring Boot可以创建独立运行的基于Spring的应用，并且大多数时候只需编写少量的配置。能独立运行的原因是Spring Boot项目本身嵌入了Tomcat等其他web容器插件，详细介绍看官网<a href="http://projects.spring.io/spring-boot/。" target="_blank" rel="external">http://projects.spring.io/spring-boot/。</a></p></blockquote><h3 id="创建一个Spring-Boot-项目"><a href="#创建一个Spring-Boot-项目" class="headerlink" title="创建一个Spring Boot 项目"></a>创建一个Spring Boot 项目</h3><p>1、pom.xml配置<br>(1)基本配置<br>这里使用Maven构建工程，根据官网的推荐，项目可继承于<code>spring-boot-starter-parent</code> 来管理工程。<a id="more"></a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure></p><p>(2)如果不使用官方依赖<br>实际开发中我们可能想自己创建父工程来管理依赖，例如我们创建聚合工程时有自己的parent工程，那么我们在自己的父工程定义版本号，根据需要引入对应的包。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 版本号 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>1.5.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div></pre></td></tr></table></figure></p><p>2、编写应用入口类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.fyft.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *&lt;p&gt;Title: TestApplication.java&lt;/p&gt;</div><div class="line"> *&lt;p&gt;Description: TODO&lt;/p&gt;</div><div class="line"> *&lt;p&gt;CreateDate: 2017年5月10日&lt;/p&gt;</div><div class="line"> *<span class="doctag">@author</span> shen</div><div class="line"> *<span class="doctag">@version</span> v1.0</div><div class="line"> */</div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApplication</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">SpringApplication.run(TestApplication.class, args);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>直接执行此主函数项目就启动了，默认的端口是8080，如果需要改变端口可以在此类实现<code>EmbeddedServletContainerCustomizer</code> 接口，这个接口包含内置Servlet容器的一些配置，例如设置访问端口为8003<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApplication</span> <span class="keyword">implements</span> <span class="title">EmbeddedServletContainerCustomizer</span></span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">SpringApplication.run(TestApplication.class, args);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableEmbeddedServletContainer config)</span> </span>&#123;</div><div class="line">config.setPort(<span class="number">8003</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="创建Controller类"><a href="#创建Controller类" class="headerlink" title="创建Controller类"></a>创建Controller类</h3><p>要让Controller被扫描到，必须放在主入口类 <code>TestApplication</code> 的同级目录或下级目录，这样才能被扫描到，注解才会生效。<br>其他的带注解类都是一样的逻辑， Spring Boot 默认扫描入口启动类所在包之下的目录。</p><h3 id="打包部署启动"><a href="#打包部署启动" class="headerlink" title="打包部署启动"></a>打包部署启动</h3><p>Spring Boot工程直接打成jar包就行了，如果工程是要跑在外部web容器的，也可以打成war包发布，这需要修改一些配置，这里先不做介绍。<br>在eclipse上直接用maven打包就行，输入 <code>clean package</code> 命令，勾上<code>Skip Tests</code> 忽略测试就行。</p><p>在dos下cd到jar包目录下执行 <code>java -jar xx.jar</code>  启动工程，出现一个错误<br><img src="https://i.imgur.com/8iwM9Tr.png" alt="这里写图片描述"></p><p>原因是 maven 自身打包生成的目录结构和文件和 Spring Boot 需要的有所不同，需要在pom.xml加上一段配置，使用 <code>spring-boot-maven-plugin</code> 来打包<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span> </div><div class="line"> <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure></p><p>若上面的dos正cd到target目录下，须退出此目录，在打包编译时会删除一次target目录，若不退出将会包无法删除此目录，因为你正打开它。<br>再次执行<code>java -jar</code> 命令启动成功</p><p><img src="https://i.imgur.com/GQsVBkE.png" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在搭建传统的SpringMVC项目或其他Spring项目的的时候，我们通常都需要写一堆与Spring整合的xml配置文件，过程繁琐复杂不说，而且容易出错。为了简化开发，Spring Boot应运而生。&lt;br&gt;Spring Boot可以创建独立运行的基于Spring的应用，并且大多数时候只需编写少量的配置。能独立运行的原因是Spring Boot项目本身嵌入了Tomcat等其他web容器插件，详细介绍看官网&lt;a href=&quot;http://projects.spring.io/spring-boot/。&quot;&gt;http://projects.spring.io/spring-boot/。&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;创建一个Spring-Boot-项目&quot;&gt;&lt;a href=&quot;#创建一个Spring-Boot-项目&quot; class=&quot;headerlink&quot; title=&quot;创建一个Spring Boot 项目&quot;&gt;&lt;/a&gt;创建一个Spring Boot 项目&lt;/h3&gt;&lt;p&gt;1、pom.xml配置&lt;br&gt;(1)基本配置&lt;br&gt;这里使用Maven构建工程，根据官网的推荐，项目可继承于&lt;code&gt;spring-boot-starter-parent&lt;/code&gt; 来管理工程。
    
    </summary>
    
      <category term="技术" scheme="https://zgshen.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web框架" scheme="https://zgshen.me/tags/web%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
</feed>
