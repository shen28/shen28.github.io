<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zgshen&#39;s notes</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zgshen.me/"/>
  <updated>2019-08-18T16:34:29.825Z</updated>
  <id>https://zgshen.me/</id>
  
  <author>
    <name>zgshen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>20190812-20190819周报</title>
    <link href="https://zgshen.me/2019/08/19/20190912-20190819%E5%91%A8%E6%8A%A5/"/>
    <id>https://zgshen.me/2019/08/19/20190912-20190819周报/</id>
    <published>2019-08-18T16:00:00.000Z</published>
    <updated>2019-08-18T16:34:29.825Z</updated>
    
    <content type="html"><![CDATA[<p>《漫威蜘蛛侠》白金纪念。变态侄子给叔婶上坟。能力越大，责任越大。<br><img src="/img/ba/Marvel&#39;s Spider-Man_20190818214045.jpg" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;《漫威蜘蛛侠》白金纪念。变态侄子给叔婶上坟。能力越大，责任越大。&lt;br&gt;&lt;img src=&quot;/img/ba/Marvel&amp;#39;s Spider-Man_20190818214045.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="生活" scheme="https://zgshen.me/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="其他" scheme="https://zgshen.me/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>20190805-20190811周报</title>
    <link href="https://zgshen.me/2019/08/12/20190805-20190811%E5%91%A8%E6%8A%A5/"/>
    <id>https://zgshen.me/2019/08/12/20190805-20190811周报/</id>
    <published>2019-08-11T16:00:00.000Z</published>
    <updated>2019-08-14T09:34:45.255Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司的版本管理工具从 svn 迁移到 git ，总算告别了五六个需求混在一起，只上线部分的麻烦问题。不够 git 毕竟不熟悉，经常切着分支就搞错了，什么变基操作，fetch、merge 和 pull 的用法区别等等其他东西的还是很生疏。</p><p>离职真需要下很大的决心，几个月之前就一直想要离职了，想着准备好出去面试一波。但是准备准备着就懈怠了，一天工作下来晚上根本就不想动了。叫我再去学习敲代码刷 <a href="https://leetcode.com/" target="_blank" rel="noopener">LeetCode</a> 太累了，刷番剧看沙雕视频喝快乐水实在太快乐了233，但是一想到工资就快乐不起来了。</p><p>最近流行玩蚂蚁森林养小鸡，同事纷纷加我好友，嗯，好吧，小鸡天天被揍，能量天天被头。他们玩得也太疯了吧，还买摇步器刷步数攒能量，还抓那啥妖怪来的。</p><p>电视剧《长安十二时辰》已经播到尾声了，这部剧大家都夸道具化妆太好了，力求还原唐时代元素。随着剧情的发展，人物的刻画也逐渐鲜明，可以看到大家对龙波（萧规）和张小敬的态度反转，从一开始认为龙波是个来破环长安的坏人，慢慢地理解他的行为，而张小敬的行为反而慢慢不被理解，许多人都认为长安已经腐朽，不值得去守护了。但是，如果冷静下来看看两人的行为，龙波用现代的词语来说就是一个彻头彻尾的恐怖分子，不应该为他叫好。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近公司的版本管理工具从 svn 迁移到 git ，总算告别了五六个需求混在一起，只上线部分的麻烦问题。不够 git 毕竟不熟悉，经常切着分支就搞错了，什么变基操作，fetch、merge 和 pull 的用法区别等等其他东西的还是很生疏。&lt;/p&gt;
&lt;p&gt;离职真需要下很大的
      
    
    </summary>
    
      <category term="生活" scheme="https://zgshen.me/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="其他" scheme="https://zgshen.me/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>Nginx升级</title>
    <link href="https://zgshen.me/2019/08/06/Nginx%E5%8D%87%E7%BA%A7/"/>
    <id>https://zgshen.me/2019/08/06/Nginx升级/</id>
    <published>2019-08-05T16:00:00.000Z</published>
    <updated>2019-08-26T15:53:13.807Z</updated>
    
    <content type="html"><![CDATA[<p>内网的nginx扫出几个漏洞，要求隐藏版本号，解决整型溢出问题，建议升级修补一下。<br><a id="more"></a><br>先 sudo su 用root权限，查看当前版本，再备份<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@CNINUATOTSWEB nginx-1.16.0]# /usr/local/nginx/sbin/nginx -V</span><br><span class="line">nginx version: nginx/1.10.1</span><br><span class="line">built by gcc 4.4.7 20120313 (Red Hat 4.4.7-16) (GCC)</span><br><span class="line">configure arguments:</span><br></pre></td></tr></table></figure></p><p><img src="/img/ba/190806-start.png" alt="img"></p><p>解压新版本</p><p>tar -zxvf nginx-1.16.0.tar.gz</p><p>配置参数（configure arguments后面的参数，没有不填）</p><p><code>./configure</code><br><img src="/img/ba/190806-config.png" alt="img"></p><p>make 编译（完成之后切记别 make install）<br><img src="/img/ba/190806-make.png" alt="img"></p><p>备份旧版本（最重要的 conf文件 记得备份到本地）</p><p>mv /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.old</p><p>复制 objs 下新版到 sbin 目录</p><p>cp objs/nginx /usr/local/nginx/sbin/<br><img src="/img/ba/190806-cp.png" alt="img"></p><p>最后执行 make upgrade 替换老的nginx进程<br><img src="/img/ba/190806-makeup.png" alt="img"></p><p>再执行 nginx -V 查看是否成功<br><img src="/img/ba/190806-version.png" alt="img"></p><p>隐藏版本号，编辑 nginx.conf, http 下加上<code>server_tokens off;</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    server_tokens off;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">#以下略</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;内网的nginx扫出几个漏洞，要求隐藏版本号，解决整型溢出问题，建议升级修补一下。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="https://zgshen.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="nginx" scheme="https://zgshen.me/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>20190729-20190804周报</title>
    <link href="https://zgshen.me/2019/08/04/20190729-20190804%E5%91%A8%E6%8A%A5/"/>
    <id>https://zgshen.me/2019/08/04/20190729-20190804周报/</id>
    <published>2019-08-03T16:00:00.000Z</published>
    <updated>2019-08-12T01:50:36.534Z</updated>
    
    <content type="html"><![CDATA[<p>打算自本周开始，每周都要记录过去的一周做了什么事情，内容包括职业技术上的事情和遇到的问题，但不限于生活上的各种琐事，或许平常生活内容才会更多，稳定的工作工作内容千篇一律。<br><a id="more"></a></p><h2 id="为什么要记录"><a href="#为什么要记录" class="headerlink" title="为什么要记录"></a>为什么要记录</h2><p>自从毕业以来已经快三年了，平时工作生活都是“两点一线“，早上做班车到公司上班，傍晚做班车回宿舍，而且是一个人(单身狗)生活。白天上班，晚上自闭玩主机游戏刷电视剧，突然想起一张图真是我的真实写照，”我一条狗，吃饭旅行，走走停停“。</p><p><img src="/img/ba/b7afef11728b4710308bcf8ecacec3fdfd0323dd.jpg" alt="img"></p><p>真很难想象这样一直浑浑噩噩走下去会发生什么，或许会变成一个孤僻的疯子吧。最近在 <a href="https://www.v2ex.com" target="_blank" rel="noopener">v2</a> 上看到站长新开的周报节点以及所写的一些观点，可以把自己一段时间的事情记录下来，即便是流水账的陈述也无妨。从日常记录引申出的所思所想，回顾一些之前的生活，证明我还活着，活得清楚，然后如何活得清楚简单，而不是一塌糊涂。</p><h2 id="这周做了什么"><a href="#这周做了什么" class="headerlink" title="这周做了什么"></a>这周做了什么</h2><p>周一工作很快就做玩了，只是简单的查询页面和接口。下午和几个前同事的吃大餐聚会又鸽了，每个人都很忙啊，出来吃个饭都不好凑到刚好都有时间出来，就我一个闲人。</p><p>周二之后都没需求可做，想着一直以来都没系统学过 Linux ，遂找了下 <a href="https://doc.plob.org/vbird_linux/" target="_blank" rel="noopener">鸟哥的私房菜</a> （找到的一个简体的镜像站）教程看看学学，不过相对的比较老了。</p><p>看了卓叔的增重微信公众号种草了增肌粉，许多年了想长胖都长不胖，死马当活马医，下单试试有没效果，增重需要配合锻炼，不知我能坚持多久。</p><p>在 PS4《漫威蜘蛛侠》中的纽约市荡来荡去实在太爽了，本体剧情也足够优秀，不过开坑一个月我才玩到40%进度，还好是线性剧情向游戏，通主线算休闲，白金看起来就有点蛋疼了，有些刷刷刷的任务真不想做。</p><p>周末翻出闲置的小米4C，想着能做什么用，做时钟，一直亮屏浪费电，而且小王子出了名的续航差，渣渣808处理器；想搞个 Linux 玩又用不着，云上已经有了，出公网也是问题，不想玩了；现在用的路由功能太简单，想拿来做全局路由折腾酸酸去广告，那我为什么不出掉换个新路由得了。然后我就把它闲鱼出掉了（笑哭），这还是我第一次用闲鱼，没多久就有人直接拍下付款，好快，难道我挂的价钱太好了么（3+32配置150出掉）。买家一看就是个二手贩子啊，不过信誉评价还可以，这次交易不知道会不会翻车呢……</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;打算自本周开始，每周都要记录过去的一周做了什么事情，内容包括职业技术上的事情和遇到的问题，但不限于生活上的各种琐事，或许平常生活内容才会更多，稳定的工作工作内容千篇一律。&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="https://zgshen.me/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="其他" scheme="https://zgshen.me/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot打包和部署(补充)</title>
    <link href="https://zgshen.me/2019/01/02/SpringBoot%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2(%E8%A1%A5%E5%85%85)/"/>
    <id>https://zgshen.me/2019/01/02/SpringBoot打包部署(补充)/</id>
    <published>2019-01-01T16:00:00.000Z</published>
    <updated>2019-03-31T14:42:00.046Z</updated>
    
    <content type="html"><![CDATA[<p>SpringBoot 工程若用简单的 <code>clean package</code> 命令打包会包含所有依赖 jar 包，如果工程依赖比较多的时候，打的包通常动不动就几十 m 大。这使得在部署到远程的时候，如果你的网络是小水管的就要传半天了，而且上微服务的项目，多个工程，一个工程还多台机器，更新部署需要浪费许多时间。</p><p>SpringBoot 启动可以以加载外部依赖目录来启动工程，所以我不必每次打包都包含一堆 jar 包，只需要把 jar 统一放一个目录，启动时指定依赖目录启动就行。</p><p>在网上搜索各类资料和博客，大多以下方式打包。<br>以 maven 打包为例，使用 SpringBoot 打包插件先正常打包<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">layout</span>&gt;</span>ZIP<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 依赖变化去掉打包重新传完jar包后再打开打包 --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- &lt;include&gt;</span></span><br><span class="line"><span class="comment">                        &lt;groupId&gt;nothing&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">                        &lt;artifactId&gt;nothing&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">                    &lt;/include&gt; --&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>打包后的目录结构，将 lib 目录的依赖包拷贝出来上传到服务器，依赖一般很少改动，若依赖改变重新传一次<br><img src="/img/ba/iNMHmVK.png" alt title></p><p> 打开 include nothing 的配置注释重新打包<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>nothing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nothing<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>打包后的文件，很小了，不用每次部署都传大文件<br><img src="/img/ba/IY80hVI.png" alt title></p><p>另外也可以直接用 maven maven-dependency-plugin 插件直接把 jar 包拷贝到目标目录，不需要去包里拷贝，更直接<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">layout</span>&gt;</span>ZIP<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 不含依赖 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>nothing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nothing<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 拷贝依赖jar包到target/lib --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">includeTypes</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">includeTypes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">includeScope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">includeScope</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                    $&#123;project.build.directory&#125;/lib</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>启动指定 lib 目录，<code>java -Dloader.path=/app/demo/lib -jar demo-*.jar</code><br>以发行包和 lib 依赖目录都在 /app/demo 目录下为例，启动的参考脚本，jvm 及其他参数自行加上，注意你的进程名，别把其他进程也 kill 了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">workdir=/app/demo</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line">    <span class="built_in">cd</span> <span class="variable">$workdir</span></span><br><span class="line">nohup  java -Dloader.path=<span class="string">"lib/"</span> -Xms512m -Xmx1024m -jar demo-*.jar  &gt; demo.out 2&gt;&amp;1 &amp;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"demo service has started."</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">    pid=`ps -ef | grep  <span class="string">'demo-'</span> | grep -v grep | awk <span class="string">'&#123; print $2 &#125;'</span>`</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$pid</span></span><br><span class="line">    <span class="built_in">kill</span> -9 <span class="variable">$pid</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"demo service has stoped."</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line">start</span><br><span class="line">  ;;</span><br><span class="line">stop)</span><br><span class="line">stop</span><br><span class="line">;;</span><br><span class="line">restart)</span><br><span class="line">stop</span><br><span class="line">start</span><br><span class="line">;;</span><br><span class="line">  *)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Usage: ./demo.sh &#123;start|stop|restart&#125;"</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure></p><p>保存为 <code>demo.sh</code><br>授权755 <code>chmod 755 demo.sh</code><br>启动 <code>./demo.sh start</code><br>查看日志输出 <code>tail -20f /app/demo/demo.out</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SpringBoot 工程若用简单的 &lt;code&gt;clean package&lt;/code&gt; 命令打包会包含所有依赖 jar 包，如果工程依赖比较多的时候，打的包通常动不动就几十 m 大。这使得在部署到远程的时候，如果你的网络是小水管的就要传半天了，而且上微服务的项目，多个工
      
    
    </summary>
    
      <category term="技术" scheme="https://zgshen.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Spring" scheme="https://zgshen.me/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Mysql切换表和删除大表操作备忘</title>
    <link href="https://zgshen.me/2018/12/15/Mysql%E5%88%87%E6%8D%A2%E8%A1%A8%E5%92%8C%E5%88%A0%E9%99%A4%E5%A4%A7%E8%A1%A8%E6%93%8D%E4%BD%9C%E5%A4%87%E5%BF%98/"/>
    <id>https://zgshen.me/2018/12/15/Mysql切换表和删除大表操作备忘/</id>
    <published>2018-12-14T16:00:00.000Z</published>
    <updated>2019-03-31T14:44:07.955Z</updated>
    
    <content type="html"><![CDATA[<p>线上有一张日志表累计了太多数据，占用了服务器100多G的内存，需要把历史的数据清除掉，腾出空间。直接删除表的记录 Mysql 是不会自动归还硬盘空间的，需要对表进行 <code>OPTIMIZE TABLE</code> 优化操作归还空间，但此操作会长时间锁定表，不能在线上随便操作。<br><a id="more"></a><br>另一种方式就是新建一张新的表结构与日志表相同，把新的表表名互换，切到新表。之后就可以把占空间大的旧表删除，由于 <code>drop</code> 操作删除表会有锁影响数据库其他操作，而且如果是普通硬盘删除100多G数据也不会很快，会影响服务器IO操作。因此，删除大表一般使用网络上大多人推荐的建立硬链接来进行删除的方式。</p><h4 id="切换表操作"><a href="#切换表操作" class="headerlink" title="切换表操作"></a>切换表操作</h4><p>建表 <code>cc_card_log_1206</code> ，结构与表 <code>cc_card_log</code> 完全相同,把表 <code>cc_card_log_1206</code> 相互切换表名 <code>cc_card_log</code>，锁写操作，互换表名，解锁。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LOCK</span> <span class="keyword">TABLES</span> cc_card_log WRITE, cc_card_log_1206 WRITE;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> cc_card_log <span class="keyword">RENAME</span> <span class="keyword">TO</span> cc_card_log_120601;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> cc_card_log_1206 <span class="keyword">RENAME</span> <span class="keyword">TO</span> cc_card_log;</span><br><span class="line"><span class="keyword">UNLOCK</span> <span class="keyword">TABLES</span>;</span><br></pre></td></tr></table></figure><h4 id="删除大表"><a href="#删除大表" class="headerlink" title="删除大表"></a>删除大表</h4><p>要删除的表已经很大<br><img src="/img/ba/1ml0e2B.png" alt="表占用" title></p><p>可以利用硬链接和 <code>truncate</code> 降低 <code>drop table</code> 对线上环境的影响<br>创建方法都很简单：<br>软链接（符号链接） ln -s   source  target<br>硬链接 （实体链接）ln       source  target</p><p>使用此办法前提条件，需要开启独立表空间，如果是共享表空间无法使用改方法。查询 <code>show variables like &#39;innodb_file_per%&#39;\G</code>，结果值是 ON 表明开启了。<br><img src="/img/ba/umwKspV.png" alt="查询开启表空间" title></p><p>开启独立表空间表文件就都是单独的<br><img src="/img/ba/2C3DNGG.png" alt="数据库文件" title></p><p>建立硬链接 <code>ln cc_card_log_1206.ibd cc_card_log_1206.ibd.hdlk</code> ，<br>之后 cc_card_log_1206.ibd 的 INODES 属性变成了2，变成2之后 drop table 就不会直接把文件删除了，只是删除了链接，避免对数据库的影响，最后再把 cc_card_log_1206.ibd 删除掉就行了。<br><img src="/img/ba/jAYLKYZ.png" alt="建立硬链接" title></p><p>drop 删除表<br><img src="/img/ba/BT1TMmX.png" alt="drop操作" title></p><p>物理上删除表，这里用 truncate 命令直接清空文件也可以，执行 <code>truncate -s 0 cc_card_log_120601.ibd.hdlk</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;线上有一张日志表累计了太多数据，占用了服务器100多G的内存，需要把历史的数据清除掉，腾出空间。直接删除表的记录 Mysql 是不会自动归还硬盘空间的，需要对表进行 &lt;code&gt;OPTIMIZE TABLE&lt;/code&gt; 优化操作归还空间，但此操作会长时间锁定表，不能在线上随便操作。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="https://zgshen.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="https://zgshen.me/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>域名更换注册商</title>
    <link href="https://zgshen.me/2018/10/14/%E5%9F%9F%E5%90%8D%E6%9B%B4%E6%8D%A2%E6%9C%8D%E5%8A%A1%E5%95%86/"/>
    <id>https://zgshen.me/2018/10/14/域名更换服务商/</id>
    <published>2018-10-13T16:00:00.000Z</published>
    <updated>2019-03-31T14:46:31.157Z</updated>
    
    <content type="html"><![CDATA[<p>域名不论是新注册、续费和转移，不同的注册商的定价和提供的服务都不一样。有些注册商对新注册域名有比较大的优惠，但续费的就不是那么便宜，还好域名是可以转移到别的注册商，所以给我们的选择就比较多了。<a id="more"></a></p><h4 id="一般在哪个注册商注册域名考虑的方面有："><a href="#一般在哪个注册商注册域名考虑的方面有：" class="headerlink" title="一般在哪个注册商注册域名考虑的方面有："></a>一般在哪个注册商注册域名考虑的方面有：</h4><p>价格：要快速知道各注册商的域名定价，可以到一些域名比较网站看看，比如 <code>www.domcomp.com</code> ；<br>备案情况：许多人建博客喜欢用 <code>.me、.im</code> 域名，但这些域名现在国内是无法备案的，所以只能选择国外的注册商；<br>whois ：不少注册商都有提供免费的 whois 隐私保护功能；<br>dns ：域名解析功能，不同注册商也有所区别。例如这次我从 Namecheap 转到 Porkbun ，Porkbun 并没有找到二级域名重定向到顶级域名功能，比如把 www 定向到顶级域名，只支持重定向到另一个域名。</p><h4 id="一般域名的转移步骤都是一样的："><a href="#一般域名的转移步骤都是一样的：" class="headerlink" title="一般域名的转移步骤都是一样的："></a>一般域名的转移步骤都是一样的：</h4><p>首先原注册商解锁域名，停掉 whois ；<br>然后就是 transfer 操作了，注册商会给你生成一个转让授权码；<br>接着到新的注册商进行转入，需要用到原注册商授权码；<br>最后一般等个5天，如果原注册商一直没确认，你的域名就会就会自动转到新的注册商，当然有的注册商有给你转出同意的选择就比较快。所以照这个时间，转移域名一般在到期前的一周操作就行。</p><p>这次 transfer 只买了一年，选择了 Porkbun 。</p><p><img src="/img/ba/m9vDwUo.png" alt="porkbun" title></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;域名不论是新注册、续费和转移，不同的注册商的定价和提供的服务都不一样。有些注册商对新注册域名有比较大的优惠，但续费的就不是那么便宜，还好域名是可以转移到别的注册商，所以给我们的选择就比较多了。
    
    </summary>
    
      <category term="技术" scheme="https://zgshen.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="其他" scheme="https://zgshen.me/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>星球大战</title>
    <link href="https://zgshen.me/2018/02/23/%E6%98%9F%E7%90%83%E5%A4%A7%E6%88%98/"/>
    <id>https://zgshen.me/2018/02/23/星球大战/</id>
    <published>2018-02-22T16:00:00.000Z</published>
    <updated>2019-03-31T14:46:41.525Z</updated>
    
    <content type="html"><![CDATA[<p>趁着春节，把星球大战系列电影刷了一遍，除了最后一部《星球大战：最后的绝地武士》还没正版资源，所以还没看。<br><img src="/img/ba/uOmRjVv.jpg" alt="starwars" title="starwars"><br>星战电影拍摄时间线比较有意思的是先拍了正传的三部，后来才补全拍的几部前传。虽然从1977年正传第一部到2017年第八部，跨度40年，电影技术与时俱进，但早年的几部也经过了重制，特效和观影效果不至于看起来太尴尬。<br>系列电影让人感触的是，随着一部部作品的发展，角色的命运也被慢慢揭示。甚至，扮演这些角色的演员，由于他们所扮演的角色成为自己的另一个符号，被世人所熟知，比如我们的莱亚公主。而且，他们的命运也跟戏里的角色有了关联，这样想起来，编剧也是个不得了的工作呢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;趁着春节，把星球大战系列电影刷了一遍，除了最后一部《星球大战：最后的绝地武士》还没正版资源，所以还没看。&lt;br&gt;&lt;img src=&quot;/img/ba/uOmRjVv.jpg&quot; alt=&quot;starwars&quot; title=&quot;starwars&quot;&gt;&lt;br&gt;星战电影拍摄时间线比较有意思
      
    
    </summary>
    
      <category term="生活" scheme="https://zgshen.me/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="其他" scheme="https://zgshen.me/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>天河公园</title>
    <link href="https://zgshen.me/2017/10/08/tianhe/"/>
    <id>https://zgshen.me/2017/10/08/tianhe/</id>
    <published>2017-10-07T16:00:00.000Z</published>
    <updated>2019-03-31T14:45:52.302Z</updated>
    
    <content type="html"><![CDATA[<p>跑跑步…<br><img src="/img/ba/wlNk0y3.png" alt="天河公园" title="天河公园"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;跑跑步…&lt;br&gt;&lt;img src=&quot;/img/ba/wlNk0y3.png&quot; alt=&quot;天河公园&quot; title=&quot;天河公园&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="生活" scheme="https://zgshen.me/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="其他" scheme="https://zgshen.me/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>闭包</title>
    <link href="https://zgshen.me/2017/09/12/%E9%97%AD%E5%8C%85/"/>
    <id>https://zgshen.me/2017/09/12/闭包/</id>
    <published>2017-09-11T16:00:00.000Z</published>
    <updated>2019-03-03T14:49:43.089Z</updated>
    
    <content type="html"><![CDATA[<p>在Web开发中，在使用JavScript时，就算没用过，也听说过闭包这个名词。闭将外部作用域中的局部变量封闭起来的函数成为闭包，本质就是一个函数。<a id="more"></a><br>闭包的作用</p><ul><li>保护函数内变量的安全，不能被外部随意修改，只能通过制定函数接口操作</li><li>在内存中维持变量，不会被销毁，所以弊端是滥用可能造成内存泄漏</li></ul><p>例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">9</span>;</span><br><span class="line">    add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">clo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> clo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//add();//这里还不能执行</span></span><br><span class="line"><span class="keyword">var</span> f = fun();<span class="comment">//获得闭包函数</span></span><br><span class="line">add();<span class="comment">//操作num的值</span></span><br><span class="line"><span class="keyword">var</span> value = f();<span class="comment">//执行函数获取局部变量num的值 11</span></span><br></pre></td></tr></table></figure></p><p>以上例子最终的 value 值就是局部变量 num 的值， clo 函数就是闭包。<br>我们无法直接访问 num 变量，但根据Javascript的链式作用域，对于 clo ， fun 内部的所有内部变量都是可见的，所以只要把 clo 作为返回值就可以在外部访问 num 内部变量了。<br>add 函数在这里是一个全局变量，在Javascript中，在函数中变量定义不加上 var 或者其他类型，会被视为全局变量，但要在函数执行后得到声明才能使用，如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">1</span>;<span class="comment">//局部</span></span><br><span class="line">    j = <span class="number">2</span>;<span class="comment">//全局，执行test函数时声明，之后全局可用</span></span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="built_in">console</span>.log(j)</span><br></pre></td></tr></table></figure></p><p>所以在 fun 函数执行后声明完成，就可以在外部执行，由于闭包 clo 维持了 num 变量，所以在外部 add 函数修改的 num 跟在 fun 函数中 num 的是同一个。</p><p>事实上， num 变量在函数中有点类似 Java 中的私有变量，外部不能直接访问，而需要函数内部其他方法访问。以函数对象写另一个例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">23</span>;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">"shen"</span>;</span><br><span class="line">    <span class="keyword">this</span>.getAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.setAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    age++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ff = <span class="keyword">new</span> foo();</span><br><span class="line"><span class="comment">//ff.age;//访问不到局部变量</span></span><br><span class="line">ff.setAge();</span><br><span class="line"><span class="built_in">console</span>.log(ff.getAge())<span class="comment">//24</span></span><br><span class="line"><span class="built_in">console</span>.log(ff.getName())<span class="comment">//shen</span></span><br></pre></td></tr></table></figure></p><p>在 Java 中，也有类似的闭包实现存在，匿名内部类就是一个例子，它可以访问外部类的成员变量（相当于第一个例子的clo函数可以访问fun函数的num变量）。但是，由于Java无法保证内部类使用的外部类的局部变量在内外部类同步都指向同一基本类型数据或对象，因为Java只是把外部类的变量做一个拷贝丢给了内部类另一个变量而已。所以，只能干脆限制在内部类访问的外部类变量必须定义为 final 类型，即初始化后就不能修改<br>接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cat</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eatSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//final int num = 10;</span></span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;<span class="comment">//final默认可以不写，但当你尝试对num进行操作，比如num++之类，编译器会报错（环境Java8）</span></span><br><span class="line">        Cat a = <span class="keyword">new</span> Cat() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"eat "</span> + num + <span class="string">" fish"</span>);<span class="comment">//访问外部num变量</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        a.eat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Java8支持更简便的Lambda表达式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LambdaEatTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">        Cat cat = ()-&gt;System.out.println(<span class="string">"eat "</span> + num + <span class="string">" fish"</span>);</span><br><span class="line">        cat.eat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Test().eatSomething();</span><br><span class="line">        <span class="keyword">new</span> Test().LambdaEatTest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因此，也有些人认为Java的闭包不能算是真正意义上的闭包，有不可修改外部变量的限制。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Web开发中，在使用JavScript时，就算没用过，也听说过闭包这个名词。闭将外部作用域中的局部变量封闭起来的函数成为闭包，本质就是一个函数。
    
    </summary>
    
      <category term="技术" scheme="https://zgshen.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java基础" scheme="https://zgshen.me/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>RESTful API开发的简单应用</title>
    <link href="https://zgshen.me/2017/09/02/RESTful%20API%20%E5%BC%80%E5%8F%91/"/>
    <id>https://zgshen.me/2017/09/02/RESTful API 开发/</id>
    <published>2017-09-01T16:00:00.000Z</published>
    <updated>2019-03-03T14:47:21.872Z</updated>
    
    <content type="html"><![CDATA[<p>在很早之前接触 Spring MVC 的时候，都知道 Spring MVC 支持 RESTful 风格API的开发，但对于 RESTful 只是有个模糊的认识，以至于甚至在开发写出来的接口其实不符合 RESTful 的要求。</p><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>REST 的全称是 Resource Representational State Transfer ，资源以某种表现形式进行状态转移<br>Resource：资源，即数据；<br>Representational：某种表现形式，比如用JSON，XML，JPEG等；<br>State Transfer：状态变化。通过HTTP动词实现。<br><a id="more"></a><br>HTTP动词有如下几个：</p><ul><li>GET    用来获取资源，</li><li>POST  用来新建资源（也可以用于更新资源），</li><li>PUT    用来更新资源，</li><li>DELETE  用来删除资源</li></ul><p>在RESTful API中，URL中只使用名词来指定资源，原则上不使用动词，并且一般使用复数，比如 GET 操作 <a href="https://v1/users/1" target="_blank" rel="noopener">https://v1/users/1</a> 来获取用户id为1的信息资源，禁止使用 <a href="http://v1/getUserById" target="_blank" rel="noopener">http://v1/getUserById</a> 、 <a href="http://v1/deleteUser" target="_blank" rel="noopener">http://v1/deleteUser</a> 之类的url。</p><h5 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h5><p>一种技术的存在肯定是为了解决一些问题而诞生的，REST是一种软件架构模式，通过使用RESTful 风格的 API 用来解决多端（PC、Android、IOS）共用一套统一的 API ，避免重复开发。</p><h5 id="在-SpringMVC-中的应用"><a href="#在-SpringMVC-中的应用" class="headerlink" title="在 SpringMVC 中的应用"></a>在 SpringMVC 中的应用</h5><p>用 SpringMVC 可以开发 restful 风格的restful api，以 Spring Boot 为基本框架，这里写一个基本的 controller 类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"&#123;id&#125;"</span>, method=RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> String userId) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.success(userService.getUserById(userId), <span class="string">"操作成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"&#123;id&#125;"</span>, method=RequestMethod.PUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> String userId) </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = userService.updateUser(userId);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span>==num)&#123;</span><br><span class="line">            <span class="keyword">return</span> ResultUtil.success(<span class="string">"操作成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> ResultUtil.error(<span class="string">"操作失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method=RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">insertUser</span><span class="params">(String userCode, String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = userService.insertUser(userCode, userName);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span>==num)&#123;</span><br><span class="line">            <span class="keyword">return</span> ResultUtil.success(<span class="string">"操作成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> ResultUtil.error(<span class="string">"操作失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"&#123;id&#125;"</span>, method=RequestMethod.DELETE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> String userId) </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = userService.deleteUser(userId);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span>==num)&#123;</span><br><span class="line">            <span class="keyword">return</span> ResultUtil.success(<span class="string">"操作成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> ResultUtil.error(<span class="string">"操作失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ResultUtil 封装返回数据格式，这里只是一个简单的封装<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String SUCCESS = <span class="string">"success"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String MSG = <span class="string">"msg"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String DATA = <span class="string">"data"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">success</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; result = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">        result.put(SUCCESS, <span class="keyword">true</span>);</span><br><span class="line">        result.put(MSG, msg);</span><br><span class="line">        result.put(DATA, <span class="keyword">new</span> Object());</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">success</span><span class="params">(Object data, String msg)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; result = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">        result.put(SUCCESS, <span class="keyword">true</span>);</span><br><span class="line">        result.put(MSG, msg);</span><br><span class="line">        result.put(DATA, data);</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">error</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; result = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">        result.put(SUCCESS, <span class="keyword">false</span>);</span><br><span class="line">        result.put(MSG, msg);</span><br><span class="line">        result.put(DATA, <span class="keyword">new</span> Object());</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">error</span><span class="params">(Object data, String msg)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; result = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">        result.put(SUCCESS, <span class="keyword">false</span>);</span><br><span class="line">        result.put(MSG, msg);</span><br><span class="line">        result.put(DATA, data);</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对应的请求url为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查询、更新、删除： /users/1</span><br><span class="line">插入： /users</span><br></pre></td></tr></table></figure></p><p>有时需要管理版本号会把版本号写在url，比如 <code>v1/users/1</code>、 <code>v2/users/1</code> 。至于请求是什么类型的，可以在请求在head中设置，如果是ajax请求则设置比较简单<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'/users/1'</span>,</span><br><span class="line">    type: <span class="string">'get'</span>,<span class="comment">//put、delete</span></span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'/users'</span>,</span><br><span class="line">    type: <span class="string">'post'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        userCode: <span class="string">'test'</span>,</span><br><span class="line">        userName: <span class="string">'测试名字'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>RESTful API 的开发涉及许多细节和技术实现，实际开发中的应用会可能会用到一些封装库和框架，这里不做深入了解，只是简单的记录自己的一些基本认识，相关的知识参考了以下的链接。</p><p>#####相关参考链接</p><ul><li><a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm" target="_blank" rel="noopener">REST的出处论文 - 作者Roy Fielding</a></li><li><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">RESTful API 设计指南 - 阮一峰的网络日志</a></li><li><a href="https://zhihu.com/question/28557115/answer/48094438" target="_blank" rel="noopener">怎样用通俗的语言解释REST，以及RESTful？ - 回答作者: 覃超</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在很早之前接触 Spring MVC 的时候，都知道 Spring MVC 支持 RESTful 风格API的开发，但对于 RESTful 只是有个模糊的认识，以至于甚至在开发写出来的接口其实不符合 RESTful 的要求。&lt;/p&gt;
&lt;h5 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h5&gt;&lt;p&gt;REST 的全称是 Resource Representational State Transfer ，资源以某种表现形式进行状态转移&lt;br&gt;Resource：资源，即数据；&lt;br&gt;Representational：某种表现形式，比如用JSON，XML，JPEG等；&lt;br&gt;State Transfer：状态变化。通过HTTP动词实现。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="https://zgshen.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Web技术" scheme="https://zgshen.me/tags/Web%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>用本地服务器解决node-sass安装失败问题</title>
    <link href="https://zgshen.me/2017/08/20/%E7%94%A8%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%A3%E5%86%B3node-sass%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/"/>
    <id>https://zgshen.me/2017/08/20/用本地服务器解决node-sass安装失败问题/</id>
    <published>2017-08-19T16:00:00.000Z</published>
    <updated>2019-06-11T08:36:38.930Z</updated>
    
    <content type="html"><![CDATA[<p>今天要用到node-sass这东西，使用命令 <code>npm install node-sass --save</code> 安装。然而搞半天始终下载不来，换成淘宝的镜像都不行，因为下载时还会去github下载一个 <code>win32-x64-48_binding.node</code> 的包，然后下不来就一直卡着最后失败。<a id="more"></a><br>一种解决方法就是根据下载失败提示的链接直接把那个二进制包下载下来，然后放在本地服务器目录下，比如可以根据失败提示的版本号在Nginx的html目录下以版本号建个文件夹放进去，像这样 <code>nginx-1.10.1\html\v4.5.3\win32-x64-48_binding.node</code> ,然后执行 <code>npm install node-sass --save-dev --sass-binary-site=http://localhost:8090/ --registry=https://registry.npm.taobao.org</code> 端口号为Nginx设置的端口号， <code>v4.5.3\win32-x64-48_binding.node</code> 这一串不用加，这样 <code>win32-x64-48_binding.node</code> 这个包就直接从本地服务器下载了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天要用到node-sass这东西，使用命令 &lt;code&gt;npm install node-sass --save&lt;/code&gt; 安装。然而搞半天始终下载不来，换成淘宝的镜像都不行，因为下载时还会去github下载一个 &lt;code&gt;win32-x64-48_binding.node&lt;/code&gt; 的包，然后下不来就一直卡着最后失败。
    
    </summary>
    
      <category term="技术" scheme="https://zgshen.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="其他" scheme="https://zgshen.me/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>线程池</title>
    <link href="https://zgshen.me/2017/07/20/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>https://zgshen.me/2017/07/20/线程池/</id>
    <published>2017-07-19T16:00:00.000Z</published>
    <updated>2019-03-03T14:49:30.181Z</updated>
    
    <content type="html"><![CDATA[<p>创建一个新的线程是有代价的，创建大量的线程会消耗许多系统资源，影响系统的性能。这时，我们就需要使用线程池来管理线程，线程池能缓存线程，可用闲置的线程来执行新任务，能有效控制线程并发数，并对线程进行一些简单的管理。<a id="more"></a></p><p>先创建一个线程任务类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(TaskThread.class);</span><br><span class="line">    <span class="keyword">private</span> String task;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TaskThread</span><span class="params">(String task)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.task = task;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        task();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">task</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOG.info(<span class="string">"任务:"</span> + task + <span class="string">"  线程:"</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>按照一般方式我们通过 <code>new Thread(new TaskThread(&quot;task&quot;));</code> 的方式来创建一个线程，再调用start方法来启动线程。而线程池为我们提供了另一种创建管理方式，线程池的实现方式也有多种。</p><h3 id="使用LinkedList做任务队列来实现一个简单线程池"><a href="#使用LinkedList做任务队列来实现一个简单线程池" class="headerlink" title="使用LinkedList做任务队列来实现一个简单线程池"></a>使用LinkedList做任务队列来实现一个简单线程池</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkQueue</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(WorkQueue.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,WorkQueue&gt; queues = <span class="keyword">new</span> HashMap&lt;String,WorkQueue&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> nThreads;<span class="comment">//线程池大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PoolWorker[] threads;<span class="comment">//用数组实现线程池</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LinkedList&lt;Runnable&gt; queue;<span class="comment">//双向链表实现任务队列</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**私有构造**/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">WorkQueue</span><span class="params">(String name,<span class="keyword">int</span> nThreads)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nThreads = nThreads;</span><br><span class="line">        queue = <span class="keyword">new</span> LinkedList&lt;Runnable&gt;();</span><br><span class="line">        threads = <span class="keyword">new</span> PoolWorker[nThreads];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">this</span>.nThreads; i++) &#123;</span><br><span class="line">            threads[i] = <span class="keyword">new</span> PoolWorker(name+<span class="string">"_"</span>+(i+<span class="number">1</span>));</span><br><span class="line">            threads[i].start();</span><br><span class="line">        &#125;</span><br><span class="line">        LOG.info(<span class="string">"初始化线程池，线程数："</span>+nThreads);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**静态工厂方法创建线程池**/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> WorkQueue <span class="title">createWorkQueue</span><span class="params">(String name,<span class="keyword">int</span> count)</span></span>&#123;</span><br><span class="line">    WorkQueue wq = queues.get(name);</span><br><span class="line">    <span class="keyword">if</span>(wq == <span class="keyword">null</span>)&#123;</span><br><span class="line">    wq = <span class="keyword">new</span> WorkQueue(name,count);</span><br><span class="line">    queues.put(name, wq);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> wq;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**执行任务**/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(queue) &#123;</span><br><span class="line">            queue.addLast(r);</span><br><span class="line">            queue.notify();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**工作线程类**/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">PoolWorker</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    PoolWorker(String name)&#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Runnable r;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span>(queue) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (queue.isEmpty()) &#123;</span><br><span class="line">                        <span class="keyword">try</span>&#123;</span><br><span class="line">                            queue.wait();<span class="comment">//如果任务队列没有任务，等待</span></span><br><span class="line">                        &#125;<span class="keyword">catch</span> (InterruptedException ignored)&#123;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    r = (Runnable) queue.removeFirst();<span class="comment">//有任务时，取出任务</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    LOG.info(<span class="string">"线程:"</span>+Thread.currentThread().getName()+<span class="string">" 开始执行"</span>);</span><br><span class="line">                    r.run();<span class="comment">//执行任务</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    LOG.info(<span class="string">"线程:"</span>+Thread.currentThread().getName()+<span class="string">" 执行出现异常！"</span>);</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                LOG.info(<span class="string">"线程:"</span>+Thread.currentThread().getName()+<span class="string">" 执行完成"</span>);</span><br><span class="line">                r = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试例子，大小为10的线程池执行20个任务<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">WorkQueue wq = WorkQueue.createWorkQueue(<span class="string">"thread"</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">TaskThread task[] = <span class="keyword">new</span> TaskThread[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; task.length; i++)&#123;</span><br><span class="line">    task[i] = <span class="keyword">new</span> TaskThread(<span class="string">"task_"</span>+i);</span><br><span class="line">    wq.execute(task[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="使用Executors和ThreadPoolExecutor创建线程池"><a href="#使用Executors和ThreadPoolExecutor创建线程池" class="headerlink" title="使用Executors和ThreadPoolExecutor创建线程池"></a>使用Executors和ThreadPoolExecutor创建线程池</h3><p>Java 的 java.util.concurrent 包提供了 Executors 类来创建线程池，Executors 类有四种线程池构造，分别为：</p><ul><li>newCachedThreadPool创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</li><li>newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。</li><li>newScheduledThreadPool 创建一个定长线程池，支持定时及周期性任务执行。</li><li>newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。</li></ul><p>之前在阿里的开发手册中有看到，各种 Executors 返回的线程池对象弊端如下：<br>1）    FixedThreadPool 和 SingleThreadPool:<br>允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。<br>2）    CachedThreadPool 和 ScheduledThreadPool:<br>允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</p><p>一般常用 newFixedThreadPool 构造返回 ExecutorService 对象来创建线程池。 ExecutorService 接口继承了 Executor 接口（Executor是接口，Executors是类），提供了线程池的操作的成员函数。</p><p>使用 Executors 创建线程池类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(ThreadPool.class);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,ThreadPool&gt; pools = <span class="keyword">new</span> HashMap&lt;String,ThreadPool&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> threadCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> String name = <span class="keyword">null</span>;;</span><br><span class="line">ExecutorService service = <span class="keyword">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">ThreadPool</span><span class="params">(String name,<span class="keyword">int</span> count)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.threadCount = count;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">service = Executors.newFixedThreadPool(<span class="keyword">this</span>.threadCount);</span><br><span class="line">LOG.info(<span class="string">"初始化线程池，线程数["</span>+<span class="keyword">this</span>.name+<span class="string">"]："</span>+<span class="keyword">this</span>.threadCount);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ThreadPool <span class="title">createThreadPool</span><span class="params">(String name,<span class="keyword">int</span> count)</span></span>&#123;</span><br><span class="line">ThreadPool pool = pools.get(name);</span><br><span class="line">    <span class="keyword">if</span>(pool == <span class="keyword">null</span>)&#123;</span><br><span class="line">    pool = <span class="keyword">new</span> ThreadPool(name,count);</span><br><span class="line">    pools.put(name, pool);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pool;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">service.execute(r);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">service.shutdown();</span><br><span class="line">pools.remove(<span class="keyword">this</span>.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中，看下 newFixedThreadPool 方法的源码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这是 ThreadPoolExecutor 类的一个实现，再看下构造方法的参数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">         Executors.defaultThreadFactory(), defaultHandler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>corePoolSize 核心线程数。核心线程会一直存活，即使没有任务需要处理。即使现有的线程空闲，线程池也会优先创建新线程来处理任务，而不是直接交给现有的线程处理。<br>核心线程在allowCoreThreadTimeout被设置为true时会超时退出，默认情况下不会退出。</li><li>maximumPoolSize 最大的线程数。当线程数大于或等于核心线程，且任务队列已满时，线程池会创建新的线程，直到线程数量达到maximumPoolSize。如果线程数已等于maximumPoolSize，且任务队列已满，则已超出线程池的处理能力，线程池会拒绝处理任务而抛出异常。</li><li>keepAliveTime 存活时间。当线程空闲时间达到keepAliveTime，该线程会退出，直到线程数量等于corePoolSize。如果allowCoreThreadTimeout设置为true，则所有线程均会退出直到线程数量为0。</li></ul><p>allowCoreThreadTimeout 属性标识默认情况下核心线程不会退出，可通过将该参数设置为true，让核心线程也退出。</p><p>测试例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ThreadPool threadPool = ThreadPool.createThreadPool(<span class="string">"testThread"</span>, <span class="number">10</span>);</span><br><span class="line">TaskThread task[] = <span class="keyword">new</span> TaskThread[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; task.length; i++)&#123;</span><br><span class="line">    task[i] = <span class="keyword">new</span> TaskThread(<span class="string">"task_"</span>+i);</span><br><span class="line">    threadPool.execute(task[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="ThreadPoolExecutor-其他相关"><a href="#ThreadPoolExecutor-其他相关" class="headerlink" title="ThreadPoolExecutor 其他相关"></a>ThreadPoolExecutor 其他相关</h3><p>ThreadPoolExecutor 本身可以指定创建活跃线程数、限制线程池的大小，还可以创建自己的 RejectedExecutionHandler 来处理不适合放在工作队列里的任务。</p><p>终止策略 RejectedExecutionHandler 实现类,当提交的任务无法进入等待队列且线程池中创建的线程数量已经达到了最大线程数量的限制，则会拒绝新提交的任务<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.RejectedExecutionHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RejectedExecutionHandlerImpl</span> <span class="keyword">implements</span> <span class="title">RejectedExecutionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(RejectedExecutionHandlerImpl.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor executor)</span> </span>&#123;</span><br><span class="line">        LOG.info(r.toString() + <span class="string">"不能执行。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>完整测试例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadFactory;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(TaskTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*WorkQueue wq = WorkQueue.createWorkQueue("thread", 10);</span></span><br><span class="line"><span class="comment">        TaskThread task[] = new TaskThread[20];</span></span><br><span class="line"><span class="comment">        for(int i=0; i&lt;task.length; i++)&#123;</span></span><br><span class="line"><span class="comment">            task[i] = new TaskThread("task_"+i);</span></span><br><span class="line"><span class="comment">            wq.execute(task[i]);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*ThreadPool threadPool = ThreadPool.createThreadPool("testThread", 10);</span></span><br><span class="line"><span class="comment">        TaskThread task[] = new TaskThread[20];</span></span><br><span class="line"><span class="comment">        for(int i=0; i&lt;task.length; i++)&#123;</span></span><br><span class="line"><span class="comment">            task[i] = new TaskThread("task_"+i);</span></span><br><span class="line"><span class="comment">            threadPool.execute(task[i]);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        RejectedExecutionHandlerImpl rejectionHandler = <span class="keyword">new</span> RejectedExecutionHandlerImpl();</span><br><span class="line">        ThreadFactory threadFactory = Executors.defaultThreadFactory();</span><br><span class="line">        ThreadPoolExecutor threadPool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">2</span>, <span class="number">4</span>, <span class="number">10</span>,</span><br><span class="line">                TimeUnit.SECONDS, <span class="keyword">new</span> ArrayBlockingQueue&lt;Runnable&gt;(<span class="number">2</span>), threadFactory, rejectionHandler);</span><br><span class="line">        <span class="comment">//TaskThread task[] = new TaskThread[4];//少数量任务</span></span><br><span class="line">        TaskThread task[] = <span class="keyword">new</span> TaskThread[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;task.length; i++)&#123;</span><br><span class="line">            task[i] = <span class="keyword">new</span> TaskThread(<span class="string">"task_"</span>+i);</span><br><span class="line">            threadPool.execute(task[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>线程池线程核心数设置为2，最大线程数设置为4，当执行少数量任务时线程池未饱和不会触发终止策略，而执行大量任务就可能会触发，比如以上测试例子的4个任务和20任务的区别。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;创建一个新的线程是有代价的，创建大量的线程会消耗许多系统资源，影响系统的性能。这时，我们就需要使用线程池来管理线程，线程池能缓存线程，可用闲置的线程来执行新任务，能有效控制线程并发数，并对线程进行一些简单的管理。
    
    </summary>
    
      <category term="技术" scheme="https://zgshen.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java基础" scheme="https://zgshen.me/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 打包部署</title>
    <link href="https://zgshen.me/2017/07/15/Spring%20Boot%E9%83%A8%E7%BD%B2/"/>
    <id>https://zgshen.me/2017/07/15/Spring Boot部署/</id>
    <published>2017-07-14T16:00:00.000Z</published>
    <updated>2019-03-03T14:47:51.708Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot默认集成Web容器，部署也相对简单，如果需要以war包形式部署在外部Web容器上也可以，只需要做一些简单的修改配置。<br><a id="more"></a></p><h2 id="使用集成的Web容器部署方式"><a href="#使用集成的Web容器部署方式" class="headerlink" title="使用集成的Web容器部署方式"></a>使用集成的Web容器部署方式</h2><p><strong>打包</strong><br>maven 工程在 eclipse 中执行 Run as Maven build，输入 clean package 进行打包，这里要注意的是 Spring Boot 打成jar包要可以运行，必须使用Spring Boot提供的一个插件，不然打成的普通的jar是无法运行Spring Boot工程的，一般会提示 jar中没有主清单属性。<br>在pom.xml加入插件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>生成的 jar 包使用 <code>java -jar xx.jar</code> 命令就可以启动。</p><h2 id="部署到外部Web容器方式"><a href="#部署到外部Web容器方式" class="headerlink" title="部署到外部Web容器方式"></a>部署到外部Web容器方式</h2><p>在 pom.xml 文件将 <code>&lt;packaging&gt;jar&lt;/packaging&gt;</code> 改为 <code>&lt;packaging&gt;war&lt;/packaging&gt;</code><br>加上build插件，表明此Web工程不需要web.xml文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">failOnMissingWebXml</span>&gt;</span>false<span class="tag">&lt;/<span class="name">failOnMissingWebXml</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>排除 Spring Boot Tomcat 组件，scope 属性设为 provided<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在 Application 即main方法类同包下创建实现外部 Web 容器启动的启动类<br>例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.support.SpringBootServletInitializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WxServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.sources(WxApplication.class);<span class="comment">//WxApplication 为原main函数启动类</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>打包完毕将war包部署到外部Web容器。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot默认集成Web容器，部署也相对简单，如果需要以war包形式部署在外部Web容器上也可以，只需要做一些简单的修改配置。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="https://zgshen.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web框架" scheme="https://zgshen.me/tags/web%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>ThreadLcoal</title>
    <link href="https://zgshen.me/2017/07/01/ThreadLcoal/"/>
    <id>https://zgshen.me/2017/07/01/ThreadLcoal/</id>
    <published>2017-06-30T16:00:00.000Z</published>
    <updated>2019-03-03T14:48:04.093Z</updated>
    
    <content type="html"><![CDATA[<p>ThreadLcoal不是线程，而是一个创建线程的局部变量的类，主要用于存储多线程下类的某些变量，ThreadLocal为每个使用该变量的线程提供独立的变量副本，当前线程的ThreadLocal的变量只能被该线程访问，而其他线程访问不到。<br><a id="more"></a><br><strong>使用</strong><br>类定义，支持泛型<br><code>public class ThreadLocal&lt;T&gt;</code><br>初始化值<br><code>private T setInitialValue()</code><br>set方法<br><code>public void set(T value)</code><br>get方法<br><code>public T get()</code></p><p><strong>例子</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test04</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;Integer&gt; local = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">localTread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">            local.set(i++);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">getNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> local.get();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(local.get() == <span class="keyword">null</span>)&#123;</span><br><span class="line">                setNum();</span><br><span class="line">                System.out.println(<span class="string">"set threadlocal num..."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">"the object is: "</span>);</span><br><span class="line">            System.out.println(local);</span><br><span class="line">            System.out.println(local.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            localTread t = <span class="keyword">new</span> Test04().new localTread();</span><br><span class="line">            </span><br><span class="line">            Thread t1 = <span class="keyword">new</span> Thread(t);</span><br><span class="line">            Thread t2 = <span class="keyword">new</span> Thread(t);</span><br><span class="line">            Thread t3 = <span class="keyword">new</span> Thread(t);</span><br><span class="line">            </span><br><span class="line">            t1.start();</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            t2.start();</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            t3.start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">set threadlocal num...</span><br><span class="line">the object is: java.lang.ThreadLocal@6b2ce86d</span><br><span class="line">0</span><br><span class="line">set threadlocal num...</span><br><span class="line">the object is: java.lang.ThreadLocal@6b2ce86d</span><br><span class="line">1</span><br><span class="line">set threadlocal num...</span><br><span class="line">the object is: java.lang.ThreadLocal@6b2ce86d</span><br><span class="line">2</span><br></pre></td></tr></table></figure></p><p>可以看到三个线程访问的都是同一个ThreadLocal，但只能访问当前线程存储的各自的变量。<br>看源码set方法的实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">Thread t = Thread.currentThread();</span><br><span class="line">ThreadLocalMap map = getMap(t);</span><br><span class="line"><span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">map.set(<span class="keyword">this</span>, value);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">createMap(t, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过获取当前线程，再ThreadL中，ThreadLocalMap用弱引用实现<br>get方法实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Thread t = Thread.currentThread();</span><br><span class="line">ThreadLocalMap map = getMap(t);</span><br><span class="line"><span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">T result = (T)e.value;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> setInitialValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同样是为了解决多线程中变量冲突的问题，线程同步机制实现在某个时间点只有一个线程能访问变量，而ThreadLcoal是通过存储每个线程自己变量，以隔离多线程访问数据的冲突，一个损耗时间，一个损耗空间。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ThreadLcoal不是线程，而是一个创建线程的局部变量的类，主要用于存储多线程下类的某些变量，ThreadLocal为每个使用该变量的线程提供独立的变量副本，当前线程的ThreadLocal的变量只能被该线程访问，而其他线程访问不到。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="https://zgshen.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java基础" scheme="https://zgshen.me/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>泛型</title>
    <link href="https://zgshen.me/2017/06/30/%E6%B3%9B%E5%9E%8B/"/>
    <id>https://zgshen.me/2017/06/30/泛型/</id>
    <published>2017-06-29T16:00:00.000Z</published>
    <updated>2019-03-03T14:49:15.850Z</updated>
    
    <content type="html"><![CDATA[<p>泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。使用泛型，意味着编写的代码可以被很多不同类型    的对象所重用。<br><a id="more"></a><br><strong>泛型类</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassTest</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T firtsFiled;</span><br><span class="line">    <span class="keyword">public</span> T secondFiled;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirtsFiled</span><span class="params">(T data)</span></span>&#123;</span><br><span class="line">        firtsFiled = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSecondFiled</span><span class="params">(T data)</span></span>&#123;</span><br><span class="line">        secondFiled = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getFirtsFiled</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> firtsFiled;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getSecondFiled</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> secondFiled;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getStaticData</span><span class="params">(T data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上是一个简单的泛型类，T成为类型变量，一般使用大写字母命名。在Java中常用变量E表示集合的元素类型，K和V表示关键字与值的类型，T表示任意类型（约定俗成的用法，事实随便一个字母都行）。<br>当实例化泛型类型需要用具体类型替代类型变量<br>例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ClassTest&lt;String&gt; one  = <span class="keyword">new</span> ClassTest&lt;&gt;();</span><br><span class="line">ClassTest&lt;Integer&gt; two  = <span class="keyword">new</span> ClassTest&lt;&gt;();</span><br><span class="line">one.setFirtsFiled(<span class="string">"data1"</span>);      </span><br><span class="line">two.setFirtsFiled(<span class="number">123</span>);</span><br></pre></td></tr></table></figure></p><p><strong>泛型方法</strong><br>泛型方法可以定义在普通类或泛型类中，与普通方法不同，泛型方法可以在调用它的时候定义类型变量。<br>例如 <code>public static &lt;T&gt; T getStaticData(T data)</code> 就是一个泛型方法，在方法的返回值前加上 <code>&lt;T&gt;</code> ，在调用时指定类型变量，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer staticData = ClassTest.getStaticData(<span class="number">9090</span>);</span><br><span class="line">String hello = ClassTest.getStaticData(<span class="string">"hello"</span>);</span><br></pre></td></tr></table></figure></p><p><strong>类型变量的限制</strong><br>先看这个代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">getMinData</span><span class="params">(T data)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span>  data.compareTo(data) &gt; <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>之所以在定义泛型方法时给 <code>&lt;T&gt;</code> 继承 <code>Comparable</code> 接口，是因为 <code>data</code> 的类型无法确定，不能保证对象都有 <code>compareTo</code> 方法。<br>一个类型变量或通配符可以有多个限定，例如 <code>T extends Comparable &amp; Serializable</code><br>限定类型用“&amp;”分隔，而逗号用来分隔类型变量。<br>在Java的继承中，可以根据需要拥有多个接口超类型，但限定中至多有一个类。如果用一个类作为限定，它必须是限定列表中的第一个。(core Java)</p><p><strong>类型擦除</strong><br>在虚拟机中没有泛型类型对象，所有对象都属于普通类。Java中的泛型基本上都是在编译器这个级别实现的，生成的字节码信息中是不包含泛型中的类型信息的。在定义一个泛型类型时， 都会提供一个删去类型参数后的原始类型，擦除类型变量，并替换为限定类型（无限定的变量用Object）。<br>例如以上的泛型类擦除类型后的原始类型：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object firtsFiled;</span><br><span class="line">    <span class="keyword">public</span> Object secondFiled;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirtsFiled</span><span class="params">(Object data)</span></span>&#123;</span><br><span class="line">        firtsFiled = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSecondFiled</span><span class="params">(Object data)</span></span>&#123;</span><br><span class="line">        secondFiled = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getFirtsFiled</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> firtsFiled;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getSecondFiled</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> secondFiled;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getStaticData</span><span class="params">(Object data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以，不能存在如此两个方法，编译器会提示错误<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFirtsFiled</span><span class="params">(T a)</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"1"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFirtsFiled</span><span class="params">(Object w)</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"1"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>通配符类型</strong><br>在泛型操作中进行参数传递时泛型类型必须匹配才能传递，使用通配符来设置传递参数的类型<br>例子，其中Man是Peple的子类，不必关心实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(ClassTest&lt;Peple&gt; p)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(ClassTest&lt;? extends Peple&gt; p )</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SubClass sub = <span class="keyword">new</span> SubClass();</span><br><span class="line">        ClassTest&lt;Man&gt; tt = <span class="keyword">new</span> ClassTest&lt;&gt;();</span><br><span class="line">        <span class="comment">//sub.test(tt);错误</span></span><br><span class="line">        sub.transfer(tt);</span><br><span class="line"></span><br><span class="line">        ClassTest&lt;? extends Peple&gt; tt2 = <span class="keyword">new</span> ClassTest();</span><br><span class="line">        <span class="comment">//tt2.setFirtsFiled(new Man());错误</span></span><br><span class="line">        <span class="comment">//tt2.setFirtsFiled(new Peple());错误</span></span><br><span class="line">        Peple pp =tt2.getSecondFiled();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当调用 <code>sub.test(tt);</code> 时发生错误，我们不能把一个 <code>ClassTest&lt;Man&gt;</code> 传递给这个方法， tt 的类型是 <code>ClassTest&lt;People&gt;</code> ，但定义 <code>public void transfer(ClassTest&lt;? extends Peple&gt; p )</code> 使用通配符后 <code>sub.transfer(tt);</code> 可以正确使用。<br>再看下面的两个错误，使用通配符后set方法和get方法显然为<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setFirtsFiled</span><span class="params">(? extends Peple)</span></span></span><br><span class="line"><span class="function">? extends Peple <span class="title">getSecondFiled</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></p><p>编译器只知道要将 <code>People</code> 的子类型，但未具体指定，所有set方法会报错，而get方法就没这个问题，有点类似于多态的子类对象指定父类引用，返回一个 <code>People</code> 子类型没有问题。</p><p><strong>通配符的超类限定</strong><br>有 <code>extends</code> 来匹配子类，当然也有 <code>super</code> 来指定超类型限定，使用的意思刚好相反<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(ClassTest&lt;Man&gt; m)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(ClassTest&lt;? <span class="keyword">super</span> Man&gt; m )</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SubClass sub = <span class="keyword">new</span> SubClass();</span><br><span class="line">        ClassTest&lt;Peple&gt; tt = <span class="keyword">new</span> ClassTest&lt;&gt;();</span><br><span class="line">        <span class="comment">//sub.test(tt);错误</span></span><br><span class="line">        sub.transfer(tt);</span><br><span class="line"></span><br><span class="line">        ClassTest&lt;? <span class="keyword">super</span> Man&gt; tt2 = <span class="keyword">new</span> ClassTest();</span><br><span class="line">        tt2.setFirtsFiled(<span class="keyword">new</span> Tom());<span class="comment">//Tom继承自Man</span></span><br><span class="line">        tt2.setFirtsFiled(<span class="keyword">new</span> Man());</span><br><span class="line">        <span class="comment">//tt2.setFirtsFiled(new Peple());错误</span></span><br><span class="line">        <span class="comment">//Peple pp = tt2.getSecondFiled();错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>transfer</code> 方法允许使用通配符方式传进一个 <code>ClassTest&lt;Peple&gt;</code> ,因为 <code>People</code>  是 <code>Man</code> 的超类。下面的两个错误是因为此时不确定get方法返回的对象类型无法保证，只能把它赋给一个 Object ，而set方法可以使用任意 Man 对象或它的子类型调用它。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。使用泛型，意味着编写的代码可以被很多不同类型    的对象所重用。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="https://zgshen.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java基础" scheme="https://zgshen.me/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>SSM框架，基于JavaConfig配置方式，不用xml配置文件</title>
    <link href="https://zgshen.me/2017/06/14/SSM%E6%A1%86%E6%9E%B6%EF%BC%8C%E5%9F%BA%E4%BA%8EJavaConfig%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F%EF%BC%8C%E4%B8%8D%E7%94%A8xml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>https://zgshen.me/2017/06/14/SSM框架，基于JavaConfig配置方式，不用xml配置文件/</id>
    <published>2017-06-13T16:00:00.000Z</published>
    <updated>2019-03-03T14:48:00.085Z</updated>
    
    <content type="html"><![CDATA[<p>在使用Spring开发时，我们经常会看到各种各样xml配置，过于繁多的xml配置显得复杂烦人。在Spring3之后，Spring支持使用JavaConfig来代替xml配置，这种方式也得到越来越多人的推荐，甚至在Spring Boot的项目中，基本上已经见不到xml的影子了。这里将使用JavaConfig方式对SSM框架进行整合。<br><a id="more"></a><br>一、maven 的pom.xml配置<br>各种jar包的配置如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.open.ssm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.3.0.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jackson.version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">jackson.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mysql-connector-java.version</span>&gt;</span>5.1.37<span class="tag">&lt;/<span class="name">mysql-connector-java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fastjson.version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">fastjson.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.7.12<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">commons-io.version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">commons-io.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">commons-fileupload.version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">commons-fileupload.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">commons-collections.version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">commons-collections.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">commons-lang3.version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">commons-lang3.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">commons-codec.version</span>&gt;</span>1.10<span class="tag">&lt;/<span class="name">commons-codec.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javax.servlet-api.version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">javax.servlet-api.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.0.16<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mybatis-spring.version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">mybatis-spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 依赖管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!-- 单元测试 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- json --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;fastjson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- jdbc驱动包  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql-connector-java.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--common 组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-io.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-fileupload.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-collections.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-lang3.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-codec.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 日志处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- servlet --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- javax.servlet相关 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;javax.servlet-api.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">finalName</span>&gt;</span>ssm-demo<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">failOnMissingWebXml</span>&gt;</span>false<span class="tag">&lt;/<span class="name">failOnMissingWebXml</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span>&gt;</span>8088<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>二、SpringMvc的配置<br>首先创建一个初始化类，继承 <code>AbstractAnnotationConfigDispatcherServletInitializer</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.open.ssm.config;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *&lt;p&gt;Title: SpittrWebAppInitializer.java&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *&lt;p&gt;Description: 前端控制器配置&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *&lt;p&gt;CreateDate: 2017年6月12日&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@author</span> shen</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAppInitializer</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOG = Logger.getLogger(WebAppInitializer.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">LOG.info(<span class="string">"------root配置类初始化------"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Class&lt;?&gt;[] &#123; RootConfig.class &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">LOG.info(<span class="string">"------web配置类初始化------"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Class&lt;?&gt;[] &#123; WebConfig.class &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">LOG.info(<span class="string">"------映射根路径初始化------"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> String[]&#123; <span class="string">"/"</span> &#125;;<span class="comment">//请求路径映射，根路径</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要实现三个方法，可以其中两个方法看到需要两个配置类 <code>RootConfig</code> 和 <code>WebConfig</code> , <code>getServletMappings</code> 方法处理路径映射到 “/”，表示默认的Servlet，会处理进入应用的所有请求。</p><p>其中 <code>WebConfig</code> 用于定义 <code>DispatcherServlet</code> 加载应用上下文的配置，主要包含一些web组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.open.ssm.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.commons.CommonsMultipartResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ViewResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.view.InternalResourceViewResolver;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *&lt;p&gt;Title: WebConfig.java&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *&lt;p&gt;Description: 配置类，用于定义DispatcherServlet上下文的bean&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *&lt;p&gt;CreateDate: 2017年6月12日&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@author</span> shen</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@ComponentScan</span>( <span class="string">"com.open.ssm.controller"</span> )</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ViewResolver <span class="title">viewResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">InternalResourceViewResolver resolver = <span class="keyword">new</span> InternalResourceViewResolver();</span><br><span class="line">resolver.setPrefix(<span class="string">"/WEB-INF/view/"</span>);</span><br><span class="line">resolver.setSuffix(<span class="string">".jsp"</span>);</span><br><span class="line"><span class="keyword">return</span> resolver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件上传，bean必须写name属性且必须为multipartResolver，不然取不到文件对象，别问我为什么，我也唔知</span></span><br><span class="line"><span class="meta">@Bean</span>(name=<span class="string">"multipartResolver"</span>)</span><br><span class="line"><span class="function"><span class="keyword">protected</span> CommonsMultipartResolver <span class="title">MultipartResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CommonsMultipartResolver multipartResolver = <span class="keyword">new</span> CommonsMultipartResolver();</span><br><span class="line"><span class="comment">//multipartResolver.setUploadTempDir(new FileSystemResource("/tmp"));//可不设置</span></span><br><span class="line">multipartResolver.setMaxUploadSize(<span class="number">2097152</span>);<span class="comment">//2M</span></span><br><span class="line">multipartResolver.setMaxInMemorySize(<span class="number">0</span>);</span><br><span class="line">multipartResolver.setDefaultEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line"><span class="keyword">return</span> multipartResolver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//静态资源的处理</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> </span>&#123;</span><br><span class="line">        configurer.enable();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 <code>RootConfig</code> 类主要配置持久层的一些东西，包括数据库、Mybatis框架，事务之类的东西。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.open.ssm.config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *&lt;p&gt;Title: RootConfig.java&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *&lt;p&gt;Description: 配置类，用于管理ContextLoadListener创建的上下文的bean&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *&lt;p&gt;CreateDate: 2017年6月12日&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@author</span> shen</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages=&#123; <span class="string">"com.open.ssm.config"</span>, <span class="string">"com.open.ssm.dao"</span>, <span class="string">"com.open.ssm.service"</span> &#125;)</span><br><span class="line"><span class="meta">@Import</span>(DruidDataSourceConfig.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RootConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BeanNameAutoProxyCreator <span class="title">proxycreate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    BeanNameAutoProxyCreator proxycreate = <span class="keyword">new</span> BeanNameAutoProxyCreator();</span><br><span class="line">    proxycreate.setProxyTargetClass(<span class="keyword">true</span>);</span><br><span class="line">    proxycreate.setBeanNames(<span class="string">"*ServiceImpl"</span>);</span><br><span class="line">    proxycreate.setInterceptorNames(<span class="string">"transactionInterceptor"</span>);</span><br><span class="line">    <span class="keyword">return</span> proxycreate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>三、数据库与Mybatis相关配置<br>这里的数据源使用的是阿里的Druid，接上面 <code>RootConfig</code> 类，可以看到 <code>RootConfig</code> 类又 import 导入了一个配置类 <code>DruidDataSourceConfig</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.open.ssm.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.ResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.interceptor.TransactionInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *&lt;p&gt;Title: DruidDataSourceConfig.java&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *&lt;p&gt;Description: 数据源属性配置&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *&lt;p&gt;CreateDate: 2017年6月12日&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@author</span> shen</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:/jdbc.properties"</span>)</span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages=<span class="string">"com.open.ssm.dao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidDataSourceConfig</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOG = Logger.getLogger(DruidDataSourceConfig.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url&#125;"</span>)  </span><br><span class="line">    <span class="keyword">private</span> String dbUrl;  </span><br><span class="line">      </span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username&#125;"</span>)  </span><br><span class="line">    <span class="keyword">private</span> String username;  </span><br><span class="line">      </span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password&#125;"</span>)  </span><br><span class="line">    <span class="keyword">private</span> String password;  </span><br><span class="line">      </span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driverClassName&#125;"</span>)  </span><br><span class="line">    <span class="keyword">private</span> String driverClassName;  </span><br><span class="line">      </span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.initialSize&#125;"</span>)  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> initialSize;  </span><br><span class="line">      </span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.minIdle&#125;"</span>)  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> minIdle;  </span><br><span class="line">      </span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.maxActive&#125;"</span>)  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxActive;  </span><br><span class="line">      </span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.maxWait&#125;"</span>)  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxWait;  </span><br><span class="line">      </span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.timeBetweenEvictionRunsMillis&#125;"</span>)  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> timeBetweenEvictionRunsMillis;  </span><br><span class="line">      </span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.minEvictableIdleTimeMillis&#125;"</span>)  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> minEvictableIdleTimeMillis;  </span><br><span class="line">      </span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.validationQuery&#125;"</span>)  </span><br><span class="line">    <span class="keyword">private</span> String validationQuery;  </span><br><span class="line">      </span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.testWhileIdle&#125;"</span>)  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> testWhileIdle;  </span><br><span class="line">      </span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.testOnBorrow&#125;"</span>)  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> testOnBorrow;  </span><br><span class="line">      </span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.testOnReturn&#125;"</span>)  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> testOnReturn;  </span><br><span class="line">      </span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.poolPreparedStatements&#125;"</span>)  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> poolPreparedStatements;  </span><br><span class="line">      </span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.maxPoolPreparedStatementPerConnectionSize&#125;"</span>)  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxPoolPreparedStatementPerConnectionSize;  </span><br><span class="line">      </span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.filters&#125;"</span>)  </span><br><span class="line">    <span class="keyword">private</span> String filters;  </span><br><span class="line">      </span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"&#123;spring.datasource.connectionProperties&#125;"</span>)  </span><br><span class="line">    <span class="keyword">private</span> String connectionProperties;  </span><br><span class="line">      </span><br><span class="line">    <span class="meta">@Bean</span>     <span class="comment">//声明其为Bean实例  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LOG.info(<span class="string">"Initialize the data source..."</span>);</span><br><span class="line">        DruidDataSource datasource = <span class="keyword">new</span> DruidDataSource();  </span><br><span class="line">          </span><br><span class="line">        datasource.setUrl(<span class="keyword">this</span>.dbUrl);  </span><br><span class="line">        datasource.setUsername(username);  </span><br><span class="line">        datasource.setPassword(password);  </span><br><span class="line">        datasource.setDriverClassName(driverClassName);  </span><br><span class="line">          </span><br><span class="line">        <span class="comment">//configuration  </span></span><br><span class="line">        datasource.setInitialSize(initialSize);  </span><br><span class="line">        datasource.setMinIdle(minIdle);  </span><br><span class="line">        datasource.setMaxActive(maxActive);  </span><br><span class="line">        datasource.setMaxWait(maxWait);  </span><br><span class="line">        datasource.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis);  </span><br><span class="line">        datasource.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis);  </span><br><span class="line">        datasource.setValidationQuery(validationQuery);  </span><br><span class="line">        datasource.setTestWhileIdle(testWhileIdle);  </span><br><span class="line">        datasource.setTestOnBorrow(testOnBorrow);  </span><br><span class="line">        datasource.setTestOnReturn(testOnReturn);  </span><br><span class="line">        datasource.setPoolPreparedStatements(poolPreparedStatements);  </span><br><span class="line">        datasource.setMaxPoolPreparedStatementPerConnectionSize(maxPoolPreparedStatementPerConnectionSize);  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            datasource.setFilters(filters);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </span><br><span class="line">        LOG.error(<span class="string">"druid configuration initialization filter"</span>, e);  </span><br><span class="line">        &#125;  </span><br><span class="line">        datasource.setConnectionProperties(connectionProperties);  </span><br><span class="line">        <span class="keyword">return</span> datasource;  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //JdbcTemplate的配置</span></span><br><span class="line"><span class="comment">    @Bean</span></span><br><span class="line"><span class="comment">    public JdbcTemplate jdbcTemplate()&#123;</span></span><br><span class="line"><span class="comment">    JdbcTemplate jdbcTemplate = new JdbcTemplate();</span></span><br><span class="line"><span class="comment">    jdbcTemplate.setDataSource(dataSource());</span></span><br><span class="line"><span class="comment">    return jdbcTemplate;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    @Bean</span></span><br><span class="line"><span class="comment">    public NamedParameterJdbcTemplate namedParameterJdbcTemplate()&#123;</span></span><br><span class="line"><span class="comment">    NamedParameterJdbcTemplate namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(dataSource());</span></span><br><span class="line"><span class="comment">    return namedParameterJdbcTemplate;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//mybatis的配置</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactoryBean <span class="title">sqlSessionFactoryBean</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    ResourcePatternResolver resourcePatternResolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();  </span><br><span class="line">        SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();  </span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSource());  </span><br><span class="line">        sqlSessionFactoryBean.setMapperLocations(resourcePatternResolver.getResources(<span class="string">"classpath*:mappers/*.xml"</span>));</span><br><span class="line">        sqlSessionFactoryBean.setTypeAliasesPackage(<span class="string">"com.open.ssm.model"</span>);<span class="comment">//别名，让*Mpper.xml实体类映射可以不加上具体包名</span></span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"transactionManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">dataSourceTransactionManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">    DataSourceTransactionManager dataSourceTransactionManager = <span class="keyword">new</span> DataSourceTransactionManager();</span><br><span class="line">    dataSourceTransactionManager.setDataSource(dataSource());</span><br><span class="line">    <span class="keyword">return</span> dataSourceTransactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"transactionInterceptor"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TransactionInterceptor <span class="title">interceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">    TransactionInterceptor interceptor = <span class="keyword">new</span> TransactionInterceptor();</span><br><span class="line">    interceptor.setTransactionManager(dataSourceTransactionManager());</span><br><span class="line">    </span><br><span class="line">    Properties transactionAttributes = <span class="keyword">new</span> Properties();</span><br><span class="line">    transactionAttributes.setProperty(<span class="string">"save*"</span>, <span class="string">"PROPAGATION_REQUIRED"</span>);</span><br><span class="line">    transactionAttributes.setProperty(<span class="string">"del*"</span>, <span class="string">"PROPAGATION_REQUIRED"</span>);</span><br><span class="line">    transactionAttributes.setProperty(<span class="string">"update*"</span>, <span class="string">"PROPAGATION_REQUIRED"</span>);</span><br><span class="line">    transactionAttributes.setProperty(<span class="string">"get*"</span>, <span class="string">"PROPAGATION_REQUIRED,readOnly"</span>);</span><br><span class="line">    transactionAttributes.setProperty(<span class="string">"find*"</span>, <span class="string">"PROPAGATION_REQUIRED,readOnly"</span>);</span><br><span class="line">    transactionAttributes.setProperty(<span class="string">"*"</span>, <span class="string">"PROPAGATION_REQUIRED"</span>);</span><br><span class="line">    </span><br><span class="line">    interceptor.setTransactionAttributes(transactionAttributes);</span><br><span class="line">    <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //放这里会导致@value注解获取不到配置的值，移到RootConfig</span></span><br><span class="line"><span class="comment">    @Bean</span></span><br><span class="line"><span class="comment">    public BeanNameAutoProxyCreator proxycreate()&#123;</span></span><br><span class="line"><span class="comment">    BeanNameAutoProxyCreator proxycreate = new BeanNameAutoProxyCreator();</span></span><br><span class="line"><span class="comment">    proxycreate.setProxyTargetClass(true);</span></span><br><span class="line"><span class="comment">    proxycreate.setBeanNames("*ServiceImpl");</span></span><br><span class="line"><span class="comment">    proxycreate.setInterceptorNames("transactionInterceptor");</span></span><br><span class="line"><span class="comment">    return proxycreate;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>数据库连接信息文件 jdbc.properties 相关内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">spring.datasource.type=com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">spring.datasource.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/blog</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=root</span><br><span class="line"></span><br><span class="line">#连接池配置</span><br><span class="line">spring.datasource.initialSize=5</span><br><span class="line">spring.datasource.minIdle=5</span><br><span class="line">spring.datasource.maxActive=20</span><br><span class="line">#连接等待超时时间</span><br><span class="line">spring.datasource.maxWait=60000</span><br><span class="line">#配置隔多久进行一次检测(检测可以关闭的空闲连接)</span><br><span class="line">spring.datasource.timeBetweenEvictionRunsMillis=60000</span><br><span class="line">#配置连接在池中的最小生存时间</span><br><span class="line">spring.datasource.minEvictableIdleTimeMillis=300000</span><br><span class="line">spring.datasource.validationQuery=SELECT 1 FROM DUAL</span><br><span class="line">spring.datasource.testWhileIdle=true</span><br><span class="line">spring.datasource.testOnBorrow=false</span><br><span class="line">spring.datasource.testOnReturn=false</span><br><span class="line"># 打开PSCache，并且指定每个连接上PSCache的大小</span><br><span class="line">spring.datasource.poolPreparedStatements=true</span><br><span class="line">spring.datasource.maxPoolPreparedStatementPerConnectionSize=20</span><br><span class="line"># 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</span><br><span class="line">spring.datasource.filters=stat,wall,log4j</span><br><span class="line"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span><br><span class="line">spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</span><br></pre></td></tr></table></figure></p><p>这里数据库的事务配置方式有三种：</p><ul><li>第一种最简单的方式，在 <code>RootConfig</code> 加上 @EnableTransactionManagement 注解，再加上配置 DataSourceTransactionManager 的bean，就可以在service实现层使用 @Transactional 注解为方法手动加上事务，并且指定的传播属性等等，但老是要手动加 @Transactional 注解实在麻烦</li><li>第二种就是文中使用的方式，使用 <code>BeanNameAutoProxyCreator</code> 拦截代理方式，先创建一个 <code>TransactionInterceptor</code> bean，配置好事务传播等属性，在由 <code>BeanNameAutoProxyCreator</code> 进行事务代理。这里有个问题就是 <code>BeanNameAutoProxyCreator</code> 放在 <code>RootConfig</code> 中居然会导致 @value注解获取不到配置文件的值，而是键名字，将它直接放到 <code>RootConfig</code> 下就没事了</li><li>第三种是采用aop切面事务， @EnableAspectJAutoProxy 开启切面自动代理，这里写一个切面相关类 <code>AspectConfig</code> ，然后在 使用 @Import(AspectConfig.class) 导进配置就行，由于 <code>&lt;tx:</code> 开头的这种标签实在不知如何用java方式表示，在 stackoverflow 看到一个答案讲还是只能写一个xml文件，使用 @ImportResource(“classpath:/aop-config.xml”) 这种方式进行配置，具体实现如下(三种方式根据需要去掉无关代码，免得出冲突)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.open.ssm.config;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ImportResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *&lt;p&gt;Title: AspectConfig.java&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *&lt;p&gt;Description: 切面事务&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *&lt;p&gt;CreateDate: 2017年6月12日&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@author</span> shen</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ImportResource</span>(<span class="string">"classpath:/aop-config.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(* com.open.ssm.service.*.*(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serviceAnnotatedClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>四、Druid监控<br>Druid监控这里使用最简单的方式，就一个servlet和一个filter<br>servlet 继承自 StatViewServlet<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.open.ssm.web;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebInitParam;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.StatViewServlet;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *&lt;p&gt;Title: DruidServlMonitor.java&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *&lt;p&gt;Description: Druid Servlet&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *&lt;p&gt;CreateDate: 2017年6月14日&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@author</span> shen</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(name=<span class="string">"druidMonitor"</span>, urlPatterns=<span class="string">"/druid/*"</span>, initParams=&#123;</span><br><span class="line"><span class="meta">@WebInitParam</span>(name=<span class="string">"allow"</span>, value=<span class="string">"127.0.0.1"</span>),</span><br><span class="line"><span class="meta">@WebInitParam</span>(name=<span class="string">"loginUsername"</span>, value=<span class="string">"admin"</span>),</span><br><span class="line"><span class="meta">@WebInitParam</span>(name=<span class="string">"loginPassword"</span>, value=<span class="string">"123123"</span>),</span><br><span class="line"><span class="meta">@WebInitParam</span>(name=<span class="string">"resetEnable"</span>, value=<span class="string">"false"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidServletMonitor</span> <span class="keyword">extends</span> <span class="title">StatViewServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>filter继承自 WebStatFilter<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.open.ssm.web;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebInitParam;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.WebStatFilter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet Filter implementation class DruidStatFilter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter</span>(filterName=<span class="string">"druidFilter"</span>, urlPatterns=<span class="string">"/*"</span>, initParams=&#123;</span><br><span class="line"><span class="meta">@WebInitParam</span>(name=<span class="string">"exclusions"</span>, value=<span class="string">"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidStatFilter</span> <span class="keyword">extends</span> <span class="title">WebStatFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>浏览器直接输入ip+端口/druid，这里在本地是 <a href="http://localhost:8088/druid" target="_blank" rel="noopener">http://localhost:8088/druid</a> 进入登录页面，输入配置的用户名密码就可以进入监控页面了。</p><p>本文我写了一个demo，放在 <a href="https://github.com/shen28/ssm-demo" target="_blank" rel="noopener">https://github.com/shen28/ssm-demo</a> ，后续有时间会加上其他的一些东西。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用Spring开发时，我们经常会看到各种各样xml配置，过于繁多的xml配置显得复杂烦人。在Spring3之后，Spring支持使用JavaConfig来代替xml配置，这种方式也得到越来越多人的推荐，甚至在Spring Boot的项目中，基本上已经见不到xml的影子了。这里将使用JavaConfig方式对SSM框架进行整合。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="https://zgshen.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web框架" scheme="https://zgshen.me/tags/web%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 普通类调用Bean对象的一种方式</title>
    <link href="https://zgshen.me/2017/06/08/Spring%20Boot%20%E6%99%AE%E9%80%9A%E7%B1%BB%E8%B0%83%E7%94%A8Bean%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%80%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://zgshen.me/2017/06/08/Spring Boot 普通类调用Bean对象的一种方式/</id>
    <published>2017-06-07T16:00:00.000Z</published>
    <updated>2019-03-03T14:47:34.260Z</updated>
    
    <content type="html"><![CDATA[<p>有时我们有一些特殊的需要，可能要在一个不被Spring管理的普通类中去调用Spring管理的bean对象的一些方法，比如一般SpringMVC工程在controller中通过<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TestService testService;</span><br></pre></td></tr></table></figure></p><p>注入TestService 接口就可以调用此接口实现类的实现的方法。<a id="more"></a><br>但在一般类中显然不可以这么做，注入的 TestService  将会报空指针异常，你无法拿到这个bean，在一般的ssm工程中我们可以通过xml配置把普通类设置成一个bean对象，那么 TestService 就有效了， 或者使用 <code>ApplicationContext</code> 直接读取xml配置中的bean也可以拿到 TestService。`</p><p>Spring Boot 已经摒弃了各种繁琐的xml配置，当然就不再使用xml配置的方式，之前在网上看到一种很简便的方式，但现在又找不到链接了，这里做下记录。</p><p>在普通类中定义 <code>ApplicationContext</code> 静态变量和set方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;<span class="comment">//启动类set入，调用下面set方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">applicationContext = context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在启动类中，启动时事实已经生成 ConfigurableApplicationContext 对象， ConfigurableApplicationContext 是 ApplicationContext 接口的实现，这里直接传到普通类的 setApplicationContext 方法就行了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WxApplication</span> <span class="keyword">implements</span> <span class="title">EmbeddedServletContainerCustomizer</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ConfigurableApplicationContext applicationContext = SpringApplication.run(WxApplication.class, args);</span><br><span class="line">TestClass.setApplicationContext(applicationContext);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由于是静态变量，类加载时 applicationContext 已经存在，就可获取到 TestService 了，唯一不好就是静态变量在服务器启动后将一直存在<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;<span class="comment">//启动类set入，调用下面set方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">applicationContext = context;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getBeanTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">TestService testService  = (TestService)applicationContext.getBean(TestService.class);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>补充</strong>：<br>在普通 Spring 工程在启动的时候都会通过 <code>org.springframework.web.context.ContextLoaderListener</code> 监听器从加载系统资源并管理bean， Spring 提供的 <code>WebApplicationContextUtils</code> 工具类能在请求时获取到运行时工程的bean，如果看源码就可以知道监听器执行时与 <code>WebApplicationContextUtils</code> 类的关联</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//封装一下，类的class和请求request为必要参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;? extends Object&gt; cla,HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(request == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (T)WebApplicationContextUtils.getRequiredWebApplicationContext(request.getServletContext()).getBean(cla);<span class="comment">//getBean参数可为bean类的.class或直接是bean的Id</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这样获取bean</span></span><br><span class="line">TestService testService= (TestService)getBean(TestService.class, request);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时我们有一些特殊的需要，可能要在一个不被Spring管理的普通类中去调用Spring管理的bean对象的一些方法，比如一般SpringMVC工程在controller中通过&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; TestService testService;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注入TestService 接口就可以调用此接口实现类的实现的方法。
    
    </summary>
    
      <category term="技术" scheme="https://zgshen.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Spring" scheme="https://zgshen.me/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 过滤器、监听器和拦截器使用</title>
    <link href="https://zgshen.me/2017/06/07/Spring%20Boot%20%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8%E4%BD%BF%E7%94%A8/"/>
    <id>https://zgshen.me/2017/06/07/Spring Boot 过滤器、监听器和拦截器使用/</id>
    <published>2017-06-06T16:00:00.000Z</published>
    <updated>2019-03-03T14:47:44.957Z</updated>
    
    <content type="html"><![CDATA[<p>1、过滤器和监听器<br>Spring Boot中对于过滤器和监听器的使用跟一般web工程中使用方式没什么不同，使用注解方式就可以快速创建，只是要使用注解方式需要在Application类加上 <code>@ServletComponentScan</code> 注解表明开启servlet的注解<br>创建一个监听器<a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Logger LOG = LoggerFactory.getLogger(FirstListener.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">LOG.info(<span class="string">"FirstListener 初始化..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">LOG.info(<span class="string">"FirstListener 销毁..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建一个过滤器，过滤test和hello下文的所有路径<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter</span>(filterName=<span class="string">"firstFilter"</span>, urlPatterns = &#123;</span><br><span class="line"><span class="string">"/test/*"</span>,</span><br><span class="line"><span class="string">"/hello/*"</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirsrtFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Logger LOG = LoggerFactory.getLogger(FirsrtFilter.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">HttpServletRequest req = (HttpServletRequest) request;</span><br><span class="line">String requestURI = req.getRequestURI();</span><br><span class="line">LOG.info(<span class="string">"过滤到的请求---&gt;"</span>+requestURI);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行 application 类可看到日志输出<br><code>2017-06-08 17:14:55.252  INFO 7552 --- [ost-startStop-1] com.fyft.test.web.FirstListener          : FirstListener 初始化...</code></p><p>写一个请求路径为 <code>test</code> 的 controller 并访问，可看到<br><code>2017-06-08 17:15:50.799  INFO 7552 --- [nio-8003-exec-1] com.fyft.test.web.FirsrtFilter           : 过滤到的请求---&gt;/test</code></p><p>2、拦截器</p><p>实现 <code>HandlerInterceptor</code> 接口创建一个拦截器类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//在整个请求结束之后被调用，也就是在DispatcherServlet 渲染了对应的视图之后执行，主要是用于进行资源清理工作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//请求处理之后进行调用，但是在视图被渲染之前，即Controller方法调用之后</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object object)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//controller方法调用之前</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后在初始化配置类中注册拦截器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebAppConfigurer</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">registry.addInterceptor(<span class="keyword">new</span> MyInterceptor()).addPathPatterns(<span class="string">"/*"</span>);</span><br><span class="line"><span class="comment">//registry.addInterceptor(new MyInterceptor_copy()).addPathPatterns("/*");//有多个拦截器继续add进去</span></span><br><span class="line"><span class="keyword">super</span>.addInterceptors(registry);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里的拦截器只有经过DispatcherServlet 的请求，才会走拦截器链，默认不拦截静态资源，Spring Boot中默认的静态资源路径有 <code>classpath:/META-INF/resources/，classpath:/resources/，classpath:/static/，classpath:/public/</code> ，在拦截器中我们可以处理一些我们需要的业务，比如防xss攻击，在调用controller前对提交内容进行过滤等等。</p><p>参考博客 <code>http://blog.csdn.net/catoop/article/details/50501696</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、过滤器和监听器&lt;br&gt;Spring Boot中对于过滤器和监听器的使用跟一般web工程中使用方式没什么不同，使用注解方式就可以快速创建，只是要使用注解方式需要在Application类加上 &lt;code&gt;@ServletComponentScan&lt;/code&gt; 注解表明开启servlet的注解&lt;br&gt;创建一个监听器
    
    </summary>
    
      <category term="技术" scheme="https://zgshen.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web框架" scheme="https://zgshen.me/tags/web%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>深圳</title>
    <link href="https://zgshen.me/2017/05/28/%E6%B7%B1%E5%9C%B3/"/>
    <id>https://zgshen.me/2017/05/28/深圳/</id>
    <published>2017-05-27T16:00:00.000Z</published>
    <updated>2019-03-31T14:49:26.126Z</updated>
    
    <content type="html"><![CDATA[<p>深圳北站。<br><img src="/img/ba/TN4PUOw.jpg" alt="深圳北站" title width="500px"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;深圳北站。&lt;br&gt;&lt;img src=&quot;/img/ba/TN4PUOw.jpg&quot; alt=&quot;深圳北站&quot; title width=&quot;500px&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="其他" scheme="https://zgshen.me/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
</feed>
