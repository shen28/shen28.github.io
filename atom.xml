<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>⑨课编程</title>
  <subtitle>这个人很懒，神马都没有写…</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://javazgs.com/"/>
  <updated>2017-07-04T04:48:39.562Z</updated>
  <id>http://javazgs.com/</id>
  
  <author>
    <name>Shen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ThreadLcoal</title>
    <link href="http://javazgs.com/2017/07/01/ThreadLcoal/"/>
    <id>http://javazgs.com/2017/07/01/ThreadLcoal/</id>
    <published>2017-06-30T16:00:00.000Z</published>
    <updated>2017-07-04T04:48:39.562Z</updated>
    
    <content type="html"><![CDATA[<p>ThreadLcoal不是线程，而是一个创建线程的局部变量的类，主要用于存储多线程下类的某些变量，ThreadLocal为每个使用该变量的线程提供独立的变量副本，当前线程的ThreadLocal的变量只能被该线程访问，而其他线程访问不到。<br><a id="more"></a><br><strong>使用</strong><br>类定义，支持泛型<br><code>public class ThreadLocal&lt;T&gt;</code><br>初始化值<br><code>private T setInitialValue()</code><br>set方法<br><code>public void set(T value)</code><br>get方法<br><code>public T get()</code></p>
<p><strong>例子</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test04</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> ThreadLocal&lt;Integer&gt; local = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</div><div class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">localTread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">()</span></span>&#123;</div><div class="line">            local.set(i++);</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">getNum</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">return</span> local.get();</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span>(local.get() == <span class="keyword">null</span>)&#123;</div><div class="line">                setNum();</div><div class="line">                System.out.println(<span class="string">"set threadlocal num..."</span>);</div><div class="line">            &#125;</div><div class="line">            System.out.print(<span class="string">"the object is: "</span>);</div><div class="line">            System.out.println(local);</div><div class="line">            System.out.println(local.get());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            localTread t = <span class="keyword">new</span> Test04().new localTread();</div><div class="line">            </div><div class="line">            Thread t1 = <span class="keyword">new</span> Thread(t);</div><div class="line">            Thread t2 = <span class="keyword">new</span> Thread(t);</div><div class="line">            Thread t3 = <span class="keyword">new</span> Thread(t);</div><div class="line">            </div><div class="line">            t1.start();</div><div class="line">            Thread.sleep(<span class="number">1000</span>);</div><div class="line">            t2.start();</div><div class="line">            Thread.sleep(<span class="number">1000</span>);</div><div class="line">            t3.start();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">set threadlocal num...</div><div class="line">the object is: java.lang.ThreadLocal@6b2ce86d</div><div class="line">0</div><div class="line">set threadlocal num...</div><div class="line">the object is: java.lang.ThreadLocal@6b2ce86d</div><div class="line">1</div><div class="line">set threadlocal num...</div><div class="line">the object is: java.lang.ThreadLocal@6b2ce86d</div><div class="line">2</div></pre></td></tr></table></figure></p>
<p>可以看到三个线程访问的都是同一个ThreadLocal，但只能访问当前线程存储的各自的变量。<br>看源码set方法的实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</div><div class="line">	Thread t = Thread.currentThread();</div><div class="line">	ThreadLocalMap map = getMap(t);</div><div class="line">	<span class="keyword">if</span> (map != <span class="keyword">null</span>)</div><div class="line">		map.set(<span class="keyword">this</span>, value);</div><div class="line">	<span class="keyword">else</span></div><div class="line">		createMap(t, value);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过获取当前线程，再ThreadL中，ThreadLocalMap用弱引用实现<br>get方法实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">	Thread t = Thread.currentThread();</div><div class="line">	ThreadLocalMap map = getMap(t);</div><div class="line">	<span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</div><div class="line">		ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</div><div class="line">		<span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">			T result = (T)e.value;</div><div class="line">			<span class="keyword">return</span> result;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> setInitialValue();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>同样是为了解决多线程中变量冲突的问题，线程同步机制实现在某个时间点只有一个线程能访问变量，而ThreadLcoal是通过存储每个线程自己变量，以隔离多线程访问数据的冲突，一个损耗时间，一个损耗空间。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ThreadLcoal不是线程，而是一个创建线程的局部变量的类，主要用于存储多线程下类的某些变量，ThreadLocal为每个使用该变量的线程提供独立的变量副本，当前线程的ThreadLocal的变量只能被该线程访问，而其他线程访问不到。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="http://javazgs.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>泛型</title>
    <link href="http://javazgs.com/2017/06/30/%E6%B3%9B%E5%9E%8B/"/>
    <id>http://javazgs.com/2017/06/30/泛型/</id>
    <published>2017-06-29T16:00:00.000Z</published>
    <updated>2017-07-07T08:46:39.495Z</updated>
    
    <content type="html"><![CDATA[<p>泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。使用泛型，意味着编写的代码可以被很多不同类型    的对象所重用。<br><a id="more"></a><br><strong>泛型类</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassTest</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> T firtsFiled;</div><div class="line">    <span class="keyword">public</span> T secondFiled;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirtsFiled</span><span class="params">(T data)</span></span>&#123;</div><div class="line">        firtsFiled = data;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSecondFiled</span><span class="params">(T data)</span></span>&#123;</div><div class="line">        secondFiled = data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getFirtsFiled</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> firtsFiled;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getSecondFiled</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> secondFiled;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getStaticData</span><span class="params">(T data)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> data;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以上是一个简单的泛型类，T成为类型变量，一般使用大写字母命名。在Java中常用变量E表示集合的元素类型，K和V表示关键字与值的类型，T表示任意类型（约定俗成的用法，事实随便一个字母都行）。<br>当实例化泛型类型需要用具体类型替代类型变量<br>例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ClassTest&lt;String&gt; one  = <span class="keyword">new</span> ClassTest&lt;&gt;();</div><div class="line">ClassTest&lt;Integer&gt; two  = <span class="keyword">new</span> ClassTest&lt;&gt;();</div><div class="line">one.setFirtsFiled(<span class="string">"data1"</span>);      </div><div class="line">two.setFirtsFiled(<span class="number">123</span>);</div></pre></td></tr></table></figure></p>
<p><strong>泛型方法</strong><br>泛型方法可以定义在普通类或泛型类中，与普通方法不同，泛型方法可以在调用它的时候定义类型变量。<br>例如 <code>public static &lt;T&gt; T getStaticData(T data)</code> 就是一个泛型方法，在方法的返回值前加上 <code>&lt;T&gt;</code> ，在调用时指定类型变量，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Integer staticData = ClassTest.getStaticData(<span class="number">9090</span>);</div><div class="line">String hello = ClassTest.getStaticData(<span class="string">"hello"</span>);</div></pre></td></tr></table></figure></p>
<p><strong>类型变量的限制</strong><br>先看这个代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">getMinData</span><span class="params">(T data)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span>  data.compareTo(data) &gt; <span class="number">0</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>之所以在定义泛型方法时给 <code>&lt;T&gt;</code> 继承 <code>Comparable</code> 接口，是因为 <code>data</code> 的类型无法确定，不能保证对象都有 <code>compareTo</code> 方法。<br>一个类型变量或通配符可以有多个限定，例如 <code>T extends Comparable &amp; Serializable</code><br>限定类型用“&amp;”分隔，而逗号用来分隔类型变量。<br>在Java的继承中，可以根据需要拥有多个接口超类型，但限定中至多有一个类。如果用一个类作为限定，它必须是限定列表中的第一个。(core Java)</p>
<p><strong>类型擦除</strong><br>在虚拟机中没有泛型类型对象，所有对象都属于普通类。Java中的泛型基本上都是在编译器这个级别实现的，生成的字节码信息中是不包含泛型中的类型信息的。在定义一个泛型类型时， 都会提供一个删去类型参数后的原始类型，擦除类型变量，并替换为限定类型（无限定的变量用Object）。<br>例如以上的泛型类擦除类型后的原始类型：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> Object firtsFiled;</div><div class="line">    <span class="keyword">public</span> Object secondFiled;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirtsFiled</span><span class="params">(Object data)</span></span>&#123;</div><div class="line">        firtsFiled = data;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSecondFiled</span><span class="params">(Object data)</span></span>&#123;</div><div class="line">        secondFiled = data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getFirtsFiled</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> firtsFiled;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getSecondFiled</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> secondFiled;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getStaticData</span><span class="params">(Object data)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> data;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>所以，不能存在如此两个方法，编译器会提示错误<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFirtsFiled</span><span class="params">(T a)</span></span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="string">"1"</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFirtsFiled</span><span class="params">(Object w)</span></span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="string">"1"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>通配符类型</strong><br>在泛型操作中进行参数传递时泛型类型必须匹配才能传递，使用通配符来设置传递参数的类型<br>例子，其中Man是Peple的子类，不必关心实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(ClassTest&lt;Peple&gt; p)</span></span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(ClassTest&lt;? extends Peple&gt; p )</span></span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SubClass sub = <span class="keyword">new</span> SubClass();</div><div class="line">        ClassTest&lt;Man&gt; tt = <span class="keyword">new</span> ClassTest&lt;&gt;();</div><div class="line">        <span class="comment">//sub.test(tt);错误</span></div><div class="line">        sub.transfer(tt);</div><div class="line"></div><div class="line">        ClassTest&lt;? extends Peple&gt; tt2 = <span class="keyword">new</span> ClassTest();</div><div class="line">        <span class="comment">//tt2.setFirtsFiled(new Man());错误</span></div><div class="line">        <span class="comment">//tt2.setFirtsFiled(new Peple());错误</span></div><div class="line">        Peple pp =tt2.getSecondFiled();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当调用 <code>sub.test(tt);</code> 时发生错误，我们不能把一个 <code>ClassTest&lt;Man&gt;</code> 传递给这个方法， tt 的类型是 <code>ClassTest&lt;People&gt;</code> ，但定义 <code>public void transfer(ClassTest&lt;? extends Peple&gt; p )</code> 使用通配符后 <code>sub.transfer(tt);</code> 可以正确使用。<br>再看下面的两个错误，使用通配符后set方法和get方法显然为<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setFirtsFiled</span><span class="params">(? extends Peple)</span></span></div><div class="line">? extends Peple <span class="title">getSecondFiled</span><span class="params">()</span></div></pre></td></tr></table></figure></p>
<p>编译器只知道要将 <code>People</code> 的子类型，但未具体指定，所有set方法会报错，而get方法就没这个问题，有点类似于多态的子类对象指定父类引用，返回一个 <code>People</code> 子类型没有问题。</p>
<p><strong>通配符的超类限定</strong><br>有 <code>extends</code> 来匹配子类，当然也有 <code>super</code> 来指定超类型限定，使用的意思刚好相反<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(ClassTest&lt;Man&gt; m)</span></span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(ClassTest&lt;? <span class="keyword">super</span> Man&gt; m )</span></span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SubClass sub = <span class="keyword">new</span> SubClass();</div><div class="line">        ClassTest&lt;Peple&gt; tt = <span class="keyword">new</span> ClassTest&lt;&gt;();</div><div class="line">        <span class="comment">//sub.test(tt);错误</span></div><div class="line">        sub.transfer(tt);</div><div class="line"></div><div class="line">        ClassTest&lt;? <span class="keyword">super</span> Man&gt; tt2 = <span class="keyword">new</span> ClassTest();</div><div class="line">        tt2.setFirtsFiled(<span class="keyword">new</span> Tom());<span class="comment">//Tom继承自Man</span></div><div class="line">        tt2.setFirtsFiled(<span class="keyword">new</span> Man());</div><div class="line">        <span class="comment">//tt2.setFirtsFiled(new Peple());错误</span></div><div class="line">        <span class="comment">//Peple pp = tt2.getSecondFiled();错误</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>transfer</code> 方法允许使用通配符方式传进一个 <code>ClassTest&lt;Peple&gt;</code> ,因为 <code>People</code>  是 <code>Man</code> 的超类。下面的两个错误是因为此时不确定get方法返回的对象类型无法保证，只能把它赋给一个 Object ，而set方法可以使用任意 Man 对象或它的子类型调用它。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。使用泛型，意味着编写的代码可以被很多不同类型    的对象所重用。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java继承" scheme="http://javazgs.com/tags/Java%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>SSM框架，基于JavaConfig配置方式，不用xml配置文件</title>
    <link href="http://javazgs.com/2017/06/14/SSM%E6%A1%86%E6%9E%B6%EF%BC%8C%E5%9F%BA%E4%BA%8EJavaConfig%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F%EF%BC%8C%E4%B8%8D%E7%94%A8xml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://javazgs.com/2017/06/14/SSM框架，基于JavaConfig配置方式，不用xml配置文件/</id>
    <published>2017-06-13T16:00:00.000Z</published>
    <updated>2017-06-14T14:26:20.599Z</updated>
    
    <content type="html"><![CDATA[<p>在使用Spring开发时，我们经常会看到各种各样xml配置，过于繁多的xml配置显得复杂烦人。在Spring3之后，Spring支持使用JavaConfig来代替xml配置，这种方式也得到越来越多人的推荐，甚至在Spring Boot的项目中，基本上已经见不到xml的影子了。这里将使用JavaConfig方式对SSM框架进行整合。<br><a id="more"></a><br>一、maven 的pom.xml配置<br>各种jar包的配置如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.open.ssm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line">  </div><div class="line">  	</div><div class="line">  	<span class="comment">&lt;!-- 版本 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.3.0.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">jackson.version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">jackson.version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">mysql-connector-java.version</span>&gt;</span>5.1.37<span class="tag">&lt;/<span class="name">mysql-connector-java.version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">fastjson.version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">fastjson.version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.7.12<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">commons-io.version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">commons-io.version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">commons-fileupload.version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">commons-fileupload.version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">commons-collections.version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">commons-collections.version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">commons-lang3.version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">commons-lang3.version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">commons-codec.version</span>&gt;</span>1.10<span class="tag">&lt;/<span class="name">commons-codec.version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">javax.servlet-api.version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">javax.servlet-api.version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.0.16<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">mybatis-spring.version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">mybatis-spring.version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 依赖管理 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">   	</div><div class="line">	   	<span class="comment">&lt;!-- 单元测试 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- json --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;fastjson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- spring --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- jdbc驱动包  --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql-connector-java.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="comment">&lt;!--common 组件 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-io.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-fileupload.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-collections.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-lang3.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-codec.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- 日志处理 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- servlet --&gt;</span></div><div class="line">		<span class="comment">&lt;!-- javax.servlet相关 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;javax.servlet-api.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		</div><div class="line">  	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">  	</div><div class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">finalName</span>&gt;</span>ssm-demo<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">			</div><div class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">failOnMissingWebXml</span>&gt;</span>false<span class="tag">&lt;/<span class="name">failOnMissingWebXml</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">port</span>&gt;</span>8088<span class="tag">&lt;/<span class="name">port</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">			</div><div class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>二、SpringMvc的配置<br>首先创建一个初始化类，继承 <code>AbstractAnnotationConfigDispatcherServletInitializer</code> </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.open.ssm.config;</div><div class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *&lt;p&gt;Title: SpittrWebAppInitializer.java&lt;/p&gt;</div><div class="line"> *&lt;p&gt;Description: 前端控制器配置&lt;/p&gt;</div><div class="line"> *&lt;p&gt;CreateDate: 2017年6月12日&lt;/p&gt;</div><div class="line"> *<span class="doctag">@author</span> shen</div><div class="line"> *<span class="doctag">@version</span> v1.0</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAppInitializer</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOG = Logger.getLogger(WebAppInitializer.class);</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</div><div class="line">		LOG.info(<span class="string">"------root配置类初始化------"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Class&lt;?&gt;[] &#123; RootConfig.class &#125;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</div><div class="line">		LOG.info(<span class="string">"------web配置类初始化------"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Class&lt;?&gt;[] &#123; WebConfig.class &#125;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="keyword">protected</span> String[] getServletMappings() &#123;</div><div class="line">		LOG.info(<span class="string">"------映射根路径初始化------"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> String[]&#123; <span class="string">"/"</span> &#125;;<span class="comment">//请求路径映射，根路径</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里需要实现三个方法，可以其中两个方法看到需要两个配置类 <code>RootConfig</code> 和 <code>WebConfig</code> , <code>getServletMappings</code> 方法处理路径映射到 “/”，表示默认的Servlet，会处理进入应用的所有请求。</p>
<p>其中 <code>WebConfig</code> 用于定义 <code>DispatcherServlet</code> 加载应用上下文的配置，主要包含一些web组件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.open.ssm.config;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.web.multipart.commons.CommonsMultipartResolver;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.ViewResolver;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.view.InternalResourceViewResolver;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *&lt;p&gt;Title: WebConfig.java&lt;/p&gt;</div><div class="line"> *&lt;p&gt;Description: 配置类，用于定义DispatcherServlet上下文的bean&lt;/p&gt;</div><div class="line"> *&lt;p&gt;CreateDate: 2017年6月12日&lt;/p&gt;</div><div class="line"> *<span class="doctag">@author</span> shen</div><div class="line"> *<span class="doctag">@version</span> v1.0</div><div class="line"> */</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableWebMvc</span></div><div class="line"><span class="meta">@ComponentScan</span>( <span class="string">"com.open.ssm.controller"</span> )</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function"><span class="keyword">public</span> ViewResolver <span class="title">viewResolver</span><span class="params">()</span></span>&#123;</div><div class="line">		InternalResourceViewResolver resolver = <span class="keyword">new</span> InternalResourceViewResolver();</div><div class="line">		resolver.setPrefix(<span class="string">"/WEB-INF/view/"</span>);</div><div class="line">		resolver.setSuffix(<span class="string">".jsp"</span>);</div><div class="line">		<span class="keyword">return</span> resolver;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//文件上传，bean必须写name属性且必须为multipartResolver，不然取不到文件对象，别问我为什么，我也唔知</span></div><div class="line">	<span class="meta">@Bean</span>(name=<span class="string">"multipartResolver"</span>)</div><div class="line">	<span class="function"><span class="keyword">protected</span> CommonsMultipartResolver <span class="title">MultipartResolver</span><span class="params">()</span> </span>&#123;</div><div class="line">		CommonsMultipartResolver multipartResolver = <span class="keyword">new</span> CommonsMultipartResolver();</div><div class="line">		<span class="comment">//multipartResolver.setUploadTempDir(new FileSystemResource("/tmp"));//可不设置</span></div><div class="line">		multipartResolver.setMaxUploadSize(<span class="number">2097152</span>);<span class="comment">//2M</span></div><div class="line">		multipartResolver.setMaxInMemorySize(<span class="number">0</span>);</div><div class="line">		multipartResolver.setDefaultEncoding(<span class="string">"UTF-8"</span>);</div><div class="line">		<span class="keyword">return</span> multipartResolver;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">   <span class="comment">//静态资源的处理</span></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> </span>&#123;</div><div class="line">        configurer.enable();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而 <code>RootConfig</code> 类主要配置持久层的一些东西，包括数据库、Mybatis框架，事务之类的东西。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.open.ssm.config;</div><div class="line"><span class="keyword">import</span> org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *&lt;p&gt;Title: RootConfig.java&lt;/p&gt;</div><div class="line"> *&lt;p&gt;Description: 配置类，用于管理ContextLoadListener创建的上下文的bean&lt;/p&gt;</div><div class="line"> *&lt;p&gt;CreateDate: 2017年6月12日&lt;/p&gt;</div><div class="line"> *<span class="doctag">@author</span> shen</div><div class="line"> *<span class="doctag">@version</span> v1.0</div><div class="line"> */</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(basePackages=&#123; <span class="string">"com.open.ssm.config"</span>, <span class="string">"com.open.ssm.dao"</span>, <span class="string">"com.open.ssm.service"</span> &#125;)</div><div class="line"><span class="meta">@Import</span>(DruidDataSourceConfig.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RootConfig</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function"><span class="keyword">public</span> BeanNameAutoProxyCreator <span class="title">proxycreate</span><span class="params">()</span></span>&#123;</div><div class="line">    	BeanNameAutoProxyCreator proxycreate = <span class="keyword">new</span> BeanNameAutoProxyCreator();</div><div class="line">    	proxycreate.setProxyTargetClass(<span class="keyword">true</span>);</div><div class="line">    	proxycreate.setBeanNames(<span class="string">"*ServiceImpl"</span>);</div><div class="line">    	proxycreate.setInterceptorNames(<span class="string">"transactionInterceptor"</span>);</div><div class="line">    	<span class="keyword">return</span> proxycreate;</div><div class="line">    &#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>三、数据库与Mybatis相关配置<br>这里的数据源使用的是阿里的Druid，接上面 <code>RootConfig</code> 类，可以看到 <code>RootConfig</code> 类又 import 导入了一个配置类 <code>DruidDataSourceConfig</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.open.ssm.config;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.sql.DataSource;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</div><div class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</div><div class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</div><div class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</div><div class="line"><span class="keyword">import</span> org.springframework.core.io.support.ResourcePatternResolver;</div><div class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</div><div class="line"><span class="keyword">import</span> org.springframework.transaction.interceptor.TransactionInterceptor;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *&lt;p&gt;Title: DruidDataSourceConfig.java&lt;/p&gt;</div><div class="line"> *&lt;p&gt;Description: 数据源属性配置&lt;/p&gt;</div><div class="line"> *&lt;p&gt;CreateDate: 2017年6月12日&lt;/p&gt;</div><div class="line"> *<span class="doctag">@author</span> shen</div><div class="line"> *<span class="doctag">@version</span> v1.0</div><div class="line"> */</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:/jdbc.properties"</span>)</div><div class="line"><span class="meta">@MapperScan</span>(basePackages=<span class="string">"com.open.ssm.dao"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidDataSourceConfig</span></span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOG = Logger.getLogger(DruidDataSourceConfig.class);</div><div class="line">	</div><div class="line">	<span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> String dbUrl;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> String username;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> String password;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driverClassName&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> String driverClassName;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.initialSize&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> initialSize;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.minIdle&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> minIdle;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.maxActive&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxActive;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.maxWait&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxWait;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.timeBetweenEvictionRunsMillis&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> timeBetweenEvictionRunsMillis;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.minEvictableIdleTimeMillis&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> minEvictableIdleTimeMillis;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.validationQuery&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> String validationQuery;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.testWhileIdle&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> testWhileIdle;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.testOnBorrow&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> testOnBorrow;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.testOnReturn&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> testOnReturn;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.poolPreparedStatements&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> poolPreparedStatements;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.maxPoolPreparedStatementPerConnectionSize&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxPoolPreparedStatementPerConnectionSize;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.filters&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> String filters;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"&#123;spring.datasource.connectionProperties&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> String connectionProperties;  </div><div class="line">      </div><div class="line">    <span class="meta">@Bean</span>     <span class="comment">//声明其为Bean实例  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span></span>&#123;</div><div class="line">    	LOG.info(<span class="string">"Initialize the data source..."</span>);</div><div class="line">        DruidDataSource datasource = <span class="keyword">new</span> DruidDataSource();  </div><div class="line">          </div><div class="line">        datasource.setUrl(<span class="keyword">this</span>.dbUrl);  </div><div class="line">        datasource.setUsername(username);  </div><div class="line">        datasource.setPassword(password);  </div><div class="line">        datasource.setDriverClassName(driverClassName);  </div><div class="line">          </div><div class="line">        <span class="comment">//configuration  </span></div><div class="line">        datasource.setInitialSize(initialSize);  </div><div class="line">        datasource.setMinIdle(minIdle);  </div><div class="line">        datasource.setMaxActive(maxActive);  </div><div class="line">        datasource.setMaxWait(maxWait);  </div><div class="line">        datasource.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis);  </div><div class="line">        datasource.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis);  </div><div class="line">        datasource.setValidationQuery(validationQuery);  </div><div class="line">        datasource.setTestWhileIdle(testWhileIdle);  </div><div class="line">        datasource.setTestOnBorrow(testOnBorrow);  </div><div class="line">        datasource.setTestOnReturn(testOnReturn);  </div><div class="line">        datasource.setPoolPreparedStatements(poolPreparedStatements);  </div><div class="line">        datasource.setMaxPoolPreparedStatementPerConnectionSize(maxPoolPreparedStatementPerConnectionSize);  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            datasource.setFilters(filters);  </div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </div><div class="line">        	LOG.error(<span class="string">"druid configuration initialization filter"</span>, e);  </div><div class="line">        &#125;  </div><div class="line">        datasource.setConnectionProperties(connectionProperties);  </div><div class="line">        <span class="keyword">return</span> datasource;  </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/*</span></div><div class="line">    //JdbcTemplate的配置</div><div class="line">    @Bean</div><div class="line">    public JdbcTemplate jdbcTemplate()&#123;</div><div class="line">    	JdbcTemplate jdbcTemplate = new JdbcTemplate();</div><div class="line">    	jdbcTemplate.setDataSource(dataSource());</div><div class="line">    	return jdbcTemplate;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Bean</div><div class="line">    public NamedParameterJdbcTemplate namedParameterJdbcTemplate()&#123;</div><div class="line">    	NamedParameterJdbcTemplate namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(dataSource());</div><div class="line">    	return namedParameterJdbcTemplate;</div><div class="line">    &#125;*/</div><div class="line">    </div><div class="line">    <span class="comment">//mybatis的配置</span></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactoryBean <span class="title">sqlSessionFactoryBean</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">    	ResourcePatternResolver resourcePatternResolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();  </div><div class="line">        SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();  </div><div class="line">        sqlSessionFactoryBean.setDataSource(dataSource());  </div><div class="line">        sqlSessionFactoryBean.setMapperLocations(resourcePatternResolver.getResources(<span class="string">"classpath*:mappers/*.xml"</span>));</div><div class="line">        sqlSessionFactoryBean.setTypeAliasesPackage(<span class="string">"com.open.ssm.model"</span>);<span class="comment">//别名，让*Mpper.xml实体类映射可以不加上具体包名</span></div><div class="line">        <span class="keyword">return</span> sqlSessionFactoryBean;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"transactionManager"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">dataSourceTransactionManager</span><span class="params">()</span></span>&#123;</div><div class="line">    	DataSourceTransactionManager dataSourceTransactionManager = <span class="keyword">new</span> DataSourceTransactionManager();</div><div class="line">    	dataSourceTransactionManager.setDataSource(dataSource());</div><div class="line">    	<span class="keyword">return</span> dataSourceTransactionManager;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Bean</span>(name=<span class="string">"transactionInterceptor"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> TransactionInterceptor <span class="title">interceptor</span><span class="params">()</span></span>&#123;</div><div class="line">    	TransactionInterceptor interceptor = <span class="keyword">new</span> TransactionInterceptor();</div><div class="line">    	interceptor.setTransactionManager(dataSourceTransactionManager());</div><div class="line">    	</div><div class="line">    	Properties transactionAttributes = <span class="keyword">new</span> Properties();</div><div class="line">    	transactionAttributes.setProperty(<span class="string">"save*"</span>, <span class="string">"PROPAGATION_REQUIRED"</span>);</div><div class="line">    	transactionAttributes.setProperty(<span class="string">"del*"</span>, <span class="string">"PROPAGATION_REQUIRED"</span>);</div><div class="line">    	transactionAttributes.setProperty(<span class="string">"update*"</span>, <span class="string">"PROPAGATION_REQUIRED"</span>);</div><div class="line">    	transactionAttributes.setProperty(<span class="string">"get*"</span>, <span class="string">"PROPAGATION_REQUIRED,readOnly"</span>);</div><div class="line">    	transactionAttributes.setProperty(<span class="string">"find*"</span>, <span class="string">"PROPAGATION_REQUIRED,readOnly"</span>);</div><div class="line">    	transactionAttributes.setProperty(<span class="string">"*"</span>, <span class="string">"PROPAGATION_REQUIRED"</span>);</div><div class="line">    	</div><div class="line">    	interceptor.setTransactionAttributes(transactionAttributes);</div><div class="line">    	<span class="keyword">return</span> interceptor;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/*</span></div><div class="line">    //放这里会导致@value注解获取不到配置的值，移到RootConfig</div><div class="line">    @Bean</div><div class="line">    public BeanNameAutoProxyCreator proxycreate()&#123;</div><div class="line">    	BeanNameAutoProxyCreator proxycreate = new BeanNameAutoProxyCreator();</div><div class="line">    	proxycreate.setProxyTargetClass(true);</div><div class="line">    	proxycreate.setBeanNames("*ServiceImpl");</div><div class="line">    	proxycreate.setInterceptorNames("transactionInterceptor");</div><div class="line">    	return proxycreate;</div><div class="line">    &#125;*/</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>数据库连接信息文件 jdbc.properties 相关内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">spring.datasource.type=com.alibaba.druid.pool.DruidDataSource</div><div class="line">spring.datasource.driverClassName=com.mysql.jdbc.Driver</div><div class="line">spring.datasource.url=jdbc:mysql://localhost:3306/blog</div><div class="line">spring.datasource.username=root</div><div class="line">spring.datasource.password=root</div><div class="line"></div><div class="line">#连接池配置</div><div class="line">spring.datasource.initialSize=5</div><div class="line">spring.datasource.minIdle=5</div><div class="line">spring.datasource.maxActive=20</div><div class="line">#连接等待超时时间</div><div class="line">spring.datasource.maxWait=60000</div><div class="line">#配置隔多久进行一次检测(检测可以关闭的空闲连接)</div><div class="line">spring.datasource.timeBetweenEvictionRunsMillis=60000</div><div class="line">#配置连接在池中的最小生存时间</div><div class="line">spring.datasource.minEvictableIdleTimeMillis=300000</div><div class="line">spring.datasource.validationQuery=SELECT 1 FROM DUAL</div><div class="line">spring.datasource.testWhileIdle=true</div><div class="line">spring.datasource.testOnBorrow=false</div><div class="line">spring.datasource.testOnReturn=false</div><div class="line"># 打开PSCache，并且指定每个连接上PSCache的大小</div><div class="line">spring.datasource.poolPreparedStatements=true</div><div class="line">spring.datasource.maxPoolPreparedStatementPerConnectionSize=20</div><div class="line"># 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</div><div class="line">spring.datasource.filters=stat,wall,log4j</div><div class="line"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录</div><div class="line">spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</div></pre></td></tr></table></figure></p>
<p>这里数据库的事务配置方式有三种：</p>
<ul>
<li>第一种最简单的方式，在 <code>RootConfig</code> 加上 @EnableTransactionManagement 注解，再加上配置 DataSourceTransactionManager 的bean，就可以在service实现层使用 @Transactional 注解为方法手动加上事务，并且指定的传播属性等等，但老是要手动加 @Transactional 注解实在麻烦</li>
<li>第二种就是文中使用的方式，使用 <code>BeanNameAutoProxyCreator</code> 拦截代理方式，先创建一个 <code>TransactionInterceptor</code> bean，配置好事务传播等属性，在由 <code>BeanNameAutoProxyCreator</code> 进行事务代理。这里有个问题就是 <code>BeanNameAutoProxyCreator</code> 放在 <code>RootConfig</code> 中居然会导致 @value注解获取不到配置文件的值，而是键名字，将它直接放到 <code>RootConfig</code> 下就没事了</li>
<li>第三种是采用aop切面事务， @EnableAspectJAutoProxy 开启切面自动代理，这里写一个切面相关类 <code>AspectConfig</code> ，然后在 使用 @Import(AspectConfig.class) 导进配置就行，由于 <code>&lt;tx:</code> 开头的这种标签实在不知如何用java方式表示，在 stackoverflow 看到一个答案讲还是只能写一个xml文件，使用 @ImportResource(“classpath:/aop-config.xml”) 这种方式进行配置，具体实现如下(三种方式根据需要去掉无关代码，免得出冲突)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.open.ssm.config;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.ImportResource;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *&lt;p&gt;Title: AspectConfig.java&lt;/p&gt;</div><div class="line"> *&lt;p&gt;Description: 切面事务&lt;/p&gt;</div><div class="line"> *&lt;p&gt;CreateDate: 2017年6月12日&lt;/p&gt;</div><div class="line"> *<span class="doctag">@author</span> shen</div><div class="line"> *<span class="doctag">@version</span> v1.0</div><div class="line"> */</div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@ImportResource</span>(<span class="string">"classpath:/aop-config.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectConfig</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Pointcut</span>(<span class="string">"execution(* com.open.ssm.service.*.*(..))"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serviceAnnotatedClass</span><span class="params">()</span> </span>&#123;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>四、Druid监控<br>Druid监控这里使用最简单的方式，就一个servlet和一个filter<br>servlet 继承自 StatViewServlet<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.open.ssm.web;</div><div class="line"><span class="keyword">import</span> javax.servlet.annotation.WebInitParam;</div><div class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</div><div class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.StatViewServlet;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *&lt;p&gt;Title: DruidServlMonitor.java&lt;/p&gt;</div><div class="line"> *&lt;p&gt;Description: Druid Servlet&lt;/p&gt;</div><div class="line"> *&lt;p&gt;CreateDate: 2017年6月14日&lt;/p&gt;</div><div class="line"> *<span class="doctag">@author</span> shen</div><div class="line"> *<span class="doctag">@version</span> v1.0</div><div class="line"> */</div><div class="line"><span class="meta">@WebServlet</span>(name=<span class="string">"druidMonitor"</span>, urlPatterns=<span class="string">"/druid/*"</span>, initParams=&#123;</div><div class="line">		<span class="meta">@WebInitParam</span>(name=<span class="string">"allow"</span>, value=<span class="string">"127.0.0.1"</span>),</div><div class="line">		<span class="meta">@WebInitParam</span>(name=<span class="string">"loginUsername"</span>, value=<span class="string">"admin"</span>),</div><div class="line">		<span class="meta">@WebInitParam</span>(name=<span class="string">"loginPassword"</span>, value=<span class="string">"123123"</span>),</div><div class="line">		<span class="meta">@WebInitParam</span>(name=<span class="string">"resetEnable"</span>, value=<span class="string">"false"</span>)</div><div class="line">&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidServletMonitor</span> <span class="keyword">extends</span> <span class="title">StatViewServlet</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * </div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>filter继承自 WebStatFilter<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.open.ssm.web;</div><div class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</div><div class="line"><span class="keyword">import</span> javax.servlet.annotation.WebInitParam;</div><div class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.WebStatFilter;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Servlet Filter implementation class DruidStatFilter</div><div class="line"> */</div><div class="line"><span class="meta">@WebFilter</span>(filterName=<span class="string">"druidFilter"</span>, urlPatterns=<span class="string">"/*"</span>, initParams=&#123;</div><div class="line">		<span class="meta">@WebInitParam</span>(name=<span class="string">"exclusions"</span>, value=<span class="string">"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"</span>)</div><div class="line">&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidStatFilter</span> <span class="keyword">extends</span> <span class="title">WebStatFilter</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>浏览器直接输入ip+端口/druid，这里在本地是 <a href="http://localhost:8088/druid" target="_blank" rel="external">http://localhost:8088/druid</a> 进入登录页面，输入配置的用户名密码就可以进入监控页面了。</p>
<p>本文我写了一个demo，放在 <a href="https://github.com/shen28/ssm-demo" target="_blank" rel="external">https://github.com/shen28/ssm-demo</a> ，后续有时间会加上其他的一些东西。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用Spring开发时，我们经常会看到各种各样xml配置，过于繁多的xml配置显得复杂烦人。在Spring3之后，Spring支持使用JavaConfig来代替xml配置，这种方式也得到越来越多人的推荐，甚至在Spring Boot的项目中，基本上已经见不到xml的影子了。这里将使用JavaConfig方式对SSM框架进行整合。&lt;br&gt;
    
    </summary>
    
    
      <category term="web框架" scheme="http://javazgs.com/tags/web%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 普通类调用Bean对象的一种方式</title>
    <link href="http://javazgs.com/2017/06/08/Spring%20Boot%20%E6%99%AE%E9%80%9A%E7%B1%BB%E8%B0%83%E7%94%A8Bean%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%80%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://javazgs.com/2017/06/08/Spring Boot 普通类调用Bean对象的一种方式/</id>
    <published>2017-06-07T16:00:00.000Z</published>
    <updated>2017-06-12T14:50:57.913Z</updated>
    
    <content type="html"><![CDATA[<p>有时我们有一些特殊的需要，可能要在一个不被Spring管理的普通类中去调用Spring管理的bean对象的一些方法，比如一般SpringMVC工程在controller中通过<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> TestService testService;</div></pre></td></tr></table></figure></p>
<p>注入TestService 接口就可以调用此接口实现类的实现的方法。<a id="more"></a><br>但在一般类中显然不可以这么做，注入的 TestService  将会报空指针异常，你无法拿到这个bean，在一般的ssm工程中我们可以通过xml配置把普通类设置成一个bean对象，那么 TestService 就有效了， 或者使用 <code>ApplicationContext</code> 直接读取xml配置中的bean也可以拿到 TestService。`</p>
<p>Spring Boot 已经摒弃了各种繁琐的xml配置，当然就不再使用xml配置的方式，之前在网上看到一种很简便的方式，但现在又找不到链接了，这里做下记录。</p>
<p>在普通类中定义 <code>ApplicationContext</code> 静态变量和set方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;<span class="comment">//启动类set入，调用下面set方法</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext context)</span> </span>&#123;</div><div class="line">	applicationContext = context;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在启动类中，启动时事实已经生成 ConfigurableApplicationContext 对象， ConfigurableApplicationContext 是 ApplicationContext 接口的实现，这里直接传到普通类的 setApplicationContext 方法就行了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@ServletComponentScan</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WxApplication</span> <span class="keyword">implements</span> <span class="title">EmbeddedServletContainerCustomizer</span></span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		ConfigurableApplicationContext applicationContext = SpringApplication.run(WxApplication.class, args);</div><div class="line">		TestClass.setApplicationContext(applicationContext);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>由于是静态变量，类加载时 applicationContext 已经存在，就可获取到 TestService 了，唯一不好就是静态变量在服务器启动后将一直存在<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClass</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;<span class="comment">//启动类set入，调用下面set方法</span></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext context)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		applicationContext = context;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getBeanTest</span><span class="params">()</span></span>&#123;</div><div class="line">		TestService testService  = (TestService)applicationContext.getBean(TestService.class);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时我们有一些特殊的需要，可能要在一个不被Spring管理的普通类中去调用Spring管理的bean对象的一些方法，比如一般SpringMVC工程在controller中通过&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; TestService testService;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注入TestService 接口就可以调用此接口实现类的实现的方法。
    
    </summary>
    
    
      <category term="Spring" scheme="http://javazgs.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 过滤器、监听器和拦截器使用</title>
    <link href="http://javazgs.com/2017/06/07/Spring%20Boot%20%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8%E4%BD%BF%E7%94%A8/"/>
    <id>http://javazgs.com/2017/06/07/Spring Boot 过滤器、监听器和拦截器使用/</id>
    <published>2017-06-06T16:00:00.000Z</published>
    <updated>2017-06-12T14:49:15.383Z</updated>
    
    <content type="html"><![CDATA[<p>1、过滤器和监听器<br>Spring Boot中对于过滤器和监听器的使用跟一般web工程中使用方式没什么不同，使用注解方式就可以快速创建，只是要使用注解方式需要在Application类加上 <code>@ServletComponentScan</code> 注解表明开启servlet的注解<br>创建一个监听器<a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebListener</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Logger LOG = LoggerFactory.getLogger(FirstListener.class);</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</div><div class="line">		LOG.info(<span class="string">"FirstListener 初始化..."</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</div><div class="line">		LOG.info(<span class="string">"FirstListener 销毁..."</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>创建一个过滤器，过滤test和hello下文的所有路径<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebFilter</span>(filterName=<span class="string">"firstFilter"</span>, urlPatterns = &#123;</div><div class="line">		<span class="string">"/test/*"</span>,</div><div class="line">		<span class="string">"/hello/*"</span></div><div class="line">		&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirsrtFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Logger LOG = LoggerFactory.getLogger(FirsrtFilter.class);</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></div><div class="line">			<span class="keyword">throws</span> IOException, ServletException &#123;</div><div class="line">		HttpServletRequest req = (HttpServletRequest) request;</div><div class="line">		String requestURI = req.getRequestURI();</div><div class="line">		LOG.info(<span class="string">"过滤到的请求---&gt;"</span>+requestURI);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行 application 类可看到日志输出<br><code>2017-06-08 17:14:55.252  INFO 7552 --- [ost-startStop-1] com.fyft.test.web.FirstListener          : FirstListener 初始化...</code></p>
<p>写一个请求路径为 <code>test</code> 的 controller 并访问，可看到<br><code>2017-06-08 17:15:50.799  INFO 7552 --- [nio-8003-exec-1] com.fyft.test.web.FirsrtFilter           : 过滤到的请求---&gt;/test</code></p>
<p>2、拦截器</p>
<p>实现 <code>HandlerInterceptor</code> 接口创建一个拦截器类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)</span></span></div><div class="line">			<span class="keyword">throws</span> Exception &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="comment">//在整个请求结束之后被调用，也就是在DispatcherServlet 渲染了对应的视图之后执行，主要是用于进行资源清理工作</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)</span></span></div><div class="line">			<span class="keyword">throws</span> Exception &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="comment">//请求处理之后进行调用，但是在视图被渲染之前，即Controller方法调用之后</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object object)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="comment">//controller方法调用之前</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后在初始化配置类中注册拦截器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebAppConfigurer</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 添加拦截器</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</div><div class="line">		registry.addInterceptor(<span class="keyword">new</span> MyInterceptor()).addPathPatterns(<span class="string">"/*"</span>);</div><div class="line">		<span class="comment">//registry.addInterceptor(new MyInterceptor_copy()).addPathPatterns("/*");//有多个拦截器继续add进去</span></div><div class="line">		<span class="keyword">super</span>.addInterceptors(registry);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里的拦截器只有经过DispatcherServlet 的请求，才会走拦截器链，默认不拦截静态资源，Spring Boot中默认的静态资源路径有 <code>classpath:/META-INF/resources/，classpath:/resources/，classpath:/static/，classpath:/public/</code> ，在拦截器中我们可以处理一些我们需要的业务，比如防xss攻击，在调用controller前对提交内容进行过滤等等。</p>
<p>参考博客 <code>http://blog.csdn.net/catoop/article/details/50501696</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、过滤器和监听器&lt;br&gt;Spring Boot中对于过滤器和监听器的使用跟一般web工程中使用方式没什么不同，使用注解方式就可以快速创建，只是要使用注解方式需要在Application类加上 &lt;code&gt;@ServletComponentScan&lt;/code&gt; 注解表明开启servlet的注解&lt;br&gt;创建一个监听器
    
    </summary>
    
    
      <category term="web框架" scheme="http://javazgs.com/tags/web%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>深圳</title>
    <link href="http://javazgs.com/2017/05/28/%E6%B7%B1%E5%9C%B3/"/>
    <id>http://javazgs.com/2017/05/28/深圳/</id>
    <published>2017-05-27T16:00:00.000Z</published>
    <updated>2017-06-04T10:00:00.190Z</updated>
    
    <content type="html"><![CDATA[<p>深圳是一个充满活力的城市。<br><img src="\assets\articleImg\shenzhen.jpg" alt="深圳北站"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;深圳是一个充满活力的城市。&lt;br&gt;&lt;img src=&quot;\assets\articleImg\shenzhen.jpg&quot; alt=&quot;深圳北站&quot;&gt;&lt;/p&gt;

    
    </summary>
    
    
      <category term="其他" scheme="http://javazgs.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boor配置Druid数据源</title>
    <link href="http://javazgs.com/2017/05/18/Spring%20Boor%E9%85%8D%E7%BD%AEDruid%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
    <id>http://javazgs.com/2017/05/18/Spring Boor配置Druid数据源/</id>
    <published>2017-05-17T16:00:00.000Z</published>
    <updated>2017-05-18T10:03:27.228Z</updated>
    
    <content type="html"><![CDATA[<p>Druid是阿里巴巴开源平台上的一个项目,整个项目由数据库连接池、插件框架和SQL解析器组成。</p>
<h3 id="添加Druid数据源"><a href="#添加Druid数据源" class="headerlink" title="添加Druid数据源"></a>添加Druid数据源</h3><p>要使用Druid数据源，我们需要在 application.properties 下添加配置信息<a id="more"></a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">#数据库访问配置</div><div class="line">#mysql</div><div class="line">#spring.datasource.type=com.alibaba.druid.pool.DruidDataSource</div><div class="line">#spring.datasource.driver-class-name=com.mysql.jdbc.Driver</div><div class="line">#spring.datasource.url=jdbc:mysql://localhost:3306/blog</div><div class="line">#oracle</div><div class="line">spring.datasource.driverClassName=oracle.jdbc.driver.OracleDriver</div><div class="line">spring.datasource.url=jdbc:oracle:thin:@127.0.0.1:1521:orcl</div><div class="line">spring.datasource.username=system</div><div class="line">spring.datasource.password=123456</div><div class="line"></div><div class="line">#连接池配置</div><div class="line">spring.datasource.initialSize=5</div><div class="line">spring.datasource.minIdle=5</div><div class="line">spring.datasource.maxActive=20</div><div class="line">#连接等待超时时间</div><div class="line">spring.datasource.maxWait=60000</div><div class="line">#配置隔多久进行一次检测(检测可以关闭的空闲连接)</div><div class="line">spring.datasource.timeBetweenEvictionRunsMillis=60000</div><div class="line">#配置连接在池中的最小生存时间</div><div class="line">spring.datasource.minEvictableIdleTimeMillis=300000</div><div class="line">spring.datasource.validationQuery=SELECT 1 FROM DUAL</div><div class="line">spring.datasource.testWhileIdle=true</div><div class="line">spring.datasource.testOnBorrow=false</div><div class="line">spring.datasource.testOnReturn=false</div><div class="line"># 打开PSCache，并且指定每个连接上PSCache的大小</div><div class="line">spring.datasource.poolPreparedStatements=true</div><div class="line">spring.datasource.maxPoolPreparedStatementPerConnectionSize=20</div><div class="line"># 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</div><div class="line">spring.datasource.filters=stat,wall,log4j</div><div class="line"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录</div><div class="line">spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</div></pre></td></tr></table></figure></p>
<p>上面提供了mysql和oracle两种数据库驱动的配置，由于maven中心仓库不提供oracle驱动，需要到oracle官网自行下载你自己版本需要的oracle数据库驱动，再安装到本地仓库。我这里用的eclipse自带的maven，安装oracle数据库驱动到本地仓库是直接建个文件夹丢进去重命下名的，简单粗暴。</p>
<p>参考：jar包放com/oracle/ojdbc6/10.2.0.1.0 文件夹下，命名ojdbc6-10.2.0.1.0.jar<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oracle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ojdbc6<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;ojdbc6.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>此外，在本版本（1.5.2）的Spring Boot 中，对于上面Druid连接池的配置都不支持，意味着这些配置属性不会生效，所以，需要些一个配置类来读取这些配置并设置到数据源中去</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.fyft.wx.config;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"><span class="keyword">import</span> javax.sql.DataSource;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</div><div class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *&lt;p&gt;Title: DruidDataSourceConfig.java&lt;/p&gt;</div><div class="line"> *&lt;p&gt;Description: 数据源属性配置&lt;/p&gt;</div><div class="line"> *&lt;p&gt;CreateDate: 2017年5月18日&lt;/p&gt;</div><div class="line"> *<span class="doctag">@author</span> shen</div><div class="line"> *<span class="doctag">@version</span> v1.0</div><div class="line"> */</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@Primary</span> <span class="comment">//在同样的DataSource中，首先使用被标注的DataSource</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidDataSourceConfig</span> <span class="keyword">extends</span> <span class="title">DataSourceProperties</span></span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(DruidDataSourceConfig.class);</div><div class="line">	</div><div class="line">	<span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> String dbUrl;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> String username;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> String password;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driverClassName&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> String driverClassName;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.initialSize&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> initialSize;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.minIdle&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> minIdle;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.maxActive&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxActive;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.maxWait&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxWait;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.timeBetweenEvictionRunsMillis&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> timeBetweenEvictionRunsMillis;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.minEvictableIdleTimeMillis&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> minEvictableIdleTimeMillis;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.validationQuery&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> String validationQuery;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.testWhileIdle&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> testWhileIdle;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.testOnBorrow&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> testOnBorrow;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.testOnReturn&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> testOnReturn;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.poolPreparedStatements&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> poolPreparedStatements;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.maxPoolPreparedStatementPerConnectionSize&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxPoolPreparedStatementPerConnectionSize;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.filters&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> String filters;  </div><div class="line">      </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"&#123;spring.datasource.connectionProperties&#125;"</span>)  </div><div class="line">    <span class="keyword">private</span> String connectionProperties;  </div><div class="line">      </div><div class="line">    <span class="meta">@Bean</span>     <span class="comment">//声明其为Bean实例  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span></span>&#123;  </div><div class="line">        DruidDataSource datasource = <span class="keyword">new</span> DruidDataSource();  </div><div class="line">          </div><div class="line">        datasource.setUrl(<span class="keyword">this</span>.dbUrl);  </div><div class="line">        datasource.setUsername(username);  </div><div class="line">        datasource.setPassword(password);  </div><div class="line">        datasource.setDriverClassName(driverClassName);  </div><div class="line">          </div><div class="line">        <span class="comment">//configuration  </span></div><div class="line">        datasource.setInitialSize(initialSize);  </div><div class="line">        datasource.setMinIdle(minIdle);  </div><div class="line">        datasource.setMaxActive(maxActive);  </div><div class="line">        datasource.setMaxWait(maxWait);  </div><div class="line">        datasource.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis);  </div><div class="line">        datasource.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis);  </div><div class="line">        datasource.setValidationQuery(validationQuery);  </div><div class="line">        datasource.setTestWhileIdle(testWhileIdle);  </div><div class="line">        datasource.setTestOnBorrow(testOnBorrow);  </div><div class="line">        datasource.setTestOnReturn(testOnReturn);  </div><div class="line">        datasource.setPoolPreparedStatements(poolPreparedStatements);  </div><div class="line">        datasource.setMaxPoolPreparedStatementPerConnectionSize(maxPoolPreparedStatementPerConnectionSize);  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            datasource.setFilters(filters);  </div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </div><div class="line">            logger.error(<span class="string">"druid configuration initialization filter"</span>, e);  </div><div class="line">        &#125;  </div><div class="line">        datasource.setConnectionProperties(connectionProperties);  </div><div class="line">          </div><div class="line">        <span class="keyword">return</span> datasource;  </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>本段配置参考自 <a href="http://blog.csdn.net/blueheart20/article/details/52384032" target="_blank" rel="external">http://blog.csdn.net/blueheart20/article/details/52384032</a><br>其中 @Primary 注解需要放在类上，不然本类配置还是不会覆盖默认的数据源配置，原作者是放在 <code>public DataSource dataSource()</code> 方法上，会报存在两个配置的错误，估计是Spring Boot版本的差异问题。</p>
<h3 id="配置监控统计功能"><a href="#配置监控统计功能" class="headerlink" title="配置监控统计功能"></a>配置监控统计功能</h3><p>新建一个配置类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.fyft.wx.config;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.StatViewServlet;</div><div class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.WebStatFilter;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *&lt;p&gt;Title: DruidConfiguration.java&lt;/p&gt;</div><div class="line"> *&lt;p&gt;Description: Druid监控配置&lt;/p&gt;</div><div class="line"> *&lt;p&gt;CreateDate: 2017年5月3日&lt;/p&gt;</div><div class="line"> *<span class="doctag">@author</span> shen</div><div class="line"> *<span class="doctag">@version</span> v1.0</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidMonitorConfig</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">     * 注册ServletRegistrationBean</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">registrationBean</span><span class="params">()</span> </span>&#123;</div><div class="line">        ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(), <span class="string">"/druid/*"</span>);</div><div class="line">        <span class="comment">/** 初始化参数配置，initParams**/</span></div><div class="line">        <span class="comment">//白名单</span></div><div class="line">        bean.addInitParameter(<span class="string">"allow"</span>, <span class="string">"127.0.0.1"</span>);<span class="comment">//多个ip逗号隔开</span></div><div class="line">        <span class="comment">//IP黑名单 (存在共同时，deny优先于allow) : 如果满足deny的话提示:Sorry, you are not permitted to view this page.</span></div><div class="line">        <span class="comment">//bean.addInitParameter("deny", "192.168.1.73");</span></div><div class="line">        <span class="comment">//登录查看信息的账号密码.</span></div><div class="line">        bean.addInitParameter(<span class="string">"loginUsername"</span>, <span class="string">"admin"</span>);</div><div class="line">        bean.addInitParameter(<span class="string">"loginPassword"</span>, <span class="string">"123456"</span>);</div><div class="line">        <span class="comment">//是否能够重置数据.</span></div><div class="line">        bean.addInitParameter(<span class="string">"resetEnable"</span>, <span class="string">"false"</span>);</div><div class="line">        <span class="keyword">return</span> bean;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 注册FilterRegistrationBean</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">druidStatFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">        FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean(<span class="keyword">new</span> WebStatFilter());</div><div class="line">        <span class="comment">//添加过滤规则.</span></div><div class="line">        bean.addUrlPatterns(<span class="string">"/*"</span>);</div><div class="line">        <span class="comment">//添加不需要忽略的格式信息.</span></div><div class="line">        bean.addInitParameter(<span class="string">"exclusions"</span>,<span class="string">"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"</span>);</div><div class="line">        <span class="keyword">return</span> bean;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>启动项目后访问 ip:端口/druid 输入配置类设置的账号密码进入监控后台。我们先执行一个数据库操作，可以在sql监控选项卡看到执行的sql<br><img src="http://img.blog.csdn.net/20170518175834838?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjgwOTA2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>查看数据源选项卡可以看到配置连接池参数也都生效了<br><img src="http://img.blog.csdn.net/20170518175931672?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjgwOTA2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Druid是阿里巴巴开源平台上的一个项目,整个项目由数据库连接池、插件框架和SQL解析器组成。&lt;/p&gt;
&lt;h3 id=&quot;添加Druid数据源&quot;&gt;&lt;a href=&quot;#添加Druid数据源&quot; class=&quot;headerlink&quot; title=&quot;添加Druid数据源&quot;&gt;&lt;/a&gt;添加Druid数据源&lt;/h3&gt;&lt;p&gt;要使用Druid数据源，我们需要在 application.properties 下添加配置信息
    
    </summary>
    
    
      <category term="web框架" scheme="http://javazgs.com/tags/web%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 热部署与日志配置</title>
    <link href="http://javazgs.com/2017/05/11/Spring%20Boot%20%E7%83%AD%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE/"/>
    <id>http://javazgs.com/2017/05/11/Spring Boot 热部署与日志配置/</id>
    <published>2017-05-10T16:00:00.000Z</published>
    <updated>2017-05-11T10:11:47.845Z</updated>
    
    <content type="html"><![CDATA[<p>热部署和日志是开发中常用的功能，Srping Boot同样集成了相应的工具，可以方便地实现这些功能。</p>
<h3 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h3><p>Spring Boot提供了 <code>spring-boot-devtools</code> 模块用于热部署，直接引入就行。<a id="more"></a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>当修改代码重新编译时，工程就会重新启动加载。</p>
<h3 id="日志功能"><a href="#日志功能" class="headerlink" title="日志功能"></a>日志功能</h3><p>当引入 <code>spring-boot-starter-web</code>  时候，Spring Boot已经自动引入 <code>spring-boot-starter-logging</code> ，这里我们使用Logback来实现日志管理。Logback是log4j框架的作者开发的新一代日志框架，它效率更高、能够适应诸多的运行环境，同时天然支持SLF4J。</p>
<p>在spring-boot-starter-xx.RELEASE.jar （xx为版本号）下    <code>org.springframework.boot.logging.logback</code> 包中可看到一个base.xml文件,这是Spring Boot 的logback的默认配置。内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">Base logback configuration provided for compatibility with Spring Boot 1.1</div><div class="line">--&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">included</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/defaults.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_FILE"</span> <span class="attr">value</span>=<span class="string">"$&#123;LOG_FILE:-$&#123;LOG_PATH:-$&#123;LOG_TEMP:-$&#123;java.io.tmpdir:-/tmp&#125;&#125;&#125;/spring.log&#125;"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/console-appender.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/file-appender.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">root</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">included</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>可以看到日志的输出级别是INFO，输出到文件需要我们东东配置下路径。在application.properties进行配置如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#日志配置</div><div class="line">logging.file=test.log</div><div class="line">logging.level.com.fyft.wx.controller=warn</div></pre></td></tr></table></figure></p>
<p>运行会在工程根目录看到生成的日志文件，把<code>com.fyft.wx.controller</code> 包的日志级别设置为warn了<br>controller下写个测试类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.fyft.wx.controller;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOG = LoggerFactory.getLogger(IndexController.class);</div><div class="line">	</div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"test"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</div><div class="line">		LOG.info(<span class="string">"a info logger..."</span>);</div><div class="line">		LOG.error(<span class="string">"a error logger..."</span>);</div><div class="line">		<span class="keyword">return</span> <span class="string">"welcome to the FYFT index page.I'm shen."</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>访问本controller，输出（日志级别ALL &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL &lt; OFF，所以只输出error的）<br><img src="http://img.blog.csdn.net/20170511174825740?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjgwOTA2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>如果我们需要更复杂的日志功能，可以自己写一个xml文件来配置，比如输出到控制台使用Spring Boot的默认配置，而输出到文件使用自定义配置。<br>在resources下新建一个logback.xml配置文件并把刚才logging.file的配置删掉，配置如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 继承默认配置 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/base.xml"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework.web"</span> <span class="attr">level</span>=<span class="string">"WARN"</span>/&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 日志存储路径 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"D:\\logs"</span> /&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 文件输出配置 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">File</span>&gt;</span>$&#123;LOG_HOME&#125;\\fyft-wx.log<span class="tag">&lt;/<span class="name">File</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></div><div class="line">	        <span class="comment">&lt;!-- daily rollover 保存历史记录到这个文件夹一日起为后缀 --&gt;</span></div><div class="line">		    <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;\\temp\\fyft-wx.%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></div><div class="line">		    <span class="comment">&lt;!-- keep 30 days' worth of history 保存天数--&gt;</span></div><div class="line">		    <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></div><div class="line">		    <span class="comment">&lt;!-- 日志大小 --&gt;</span></div><div class="line">		    <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>2MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></div><div class="line">		    <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;35&#125; - %msg %n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></div><div class="line">		    <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></div><div class="line">	    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- root节点，配置日志级别，添加输出节点 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span>&gt;</span><span class="tag">&lt;/<span class="name">appender-ref</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">root</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>如果输出到控制台的日志也需要自定义，就再加上一个 appender 配置，并添加到root节点。需要注意的是继承自 Spring Bootd 配置需要去掉，不然控制台的日志会输出两次（logger输出一次，root输出一次）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </div><div class="line">	<span class="comment">&lt;!-- 去掉继承的配置 --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- &lt;include resource="org/springframework/boot/logging/logback/base.xml"/&gt;</span></div><div class="line">	&lt;logger name="org.springframework.web" level="WARN"/&gt; --&gt;</div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 日志存储路径 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"D:\\logs"</span> /&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 文件输出配置 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">File</span>&gt;</span>$&#123;LOG_HOME&#125;\\fyft-wx.log<span class="tag">&lt;/<span class="name">File</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></div><div class="line">	        <span class="comment">&lt;!-- daily rollover 保存历史记录到这个文件夹一日起为后缀 --&gt;</span></div><div class="line">		    <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;\\temp\\fyft-wx.%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></div><div class="line">		    <span class="comment">&lt;!-- keep 30 days' worth of history 保存天数--&gt;</span></div><div class="line">		    <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></div><div class="line">		    <span class="comment">&lt;!-- 日志大小 --&gt;</span></div><div class="line">		    <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>2MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></div><div class="line">		    <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;35&#125; - %msg %n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></div><div class="line">		    <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></div><div class="line">	    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 控制台输出配置 --&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span> </div><div class="line">            <span class="comment">&lt;!--格式化输出：%d表示日期，$&#123;PID&#125; 进程Id， %thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span> </div><div class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; $&#123;PID&#125; [%thread] %-5level %logger&#123;35&#125; - %msg %n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- root节点，配置日志级别，添加输出节点 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span>&gt;</span><span class="tag">&lt;/<span class="name">appender-ref</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>&gt;</span><span class="tag">&lt;/<span class="name">appender-ref</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">root</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其他更多详细的logback配置可查看官方文档 <a href="https://logback.qos.ch/manual/configuration.html" target="_blank" rel="external">https://logback.qos.ch/manual/configuration.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;热部署和日志是开发中常用的功能，Srping Boot同样集成了相应的工具，可以方便地实现这些功能。&lt;/p&gt;
&lt;h3 id=&quot;热部署&quot;&gt;&lt;a href=&quot;#热部署&quot; class=&quot;headerlink&quot; title=&quot;热部署&quot;&gt;&lt;/a&gt;热部署&lt;/h3&gt;&lt;p&gt;Spring Boot提供了 &lt;code&gt;spring-boot-devtools&lt;/code&gt; 模块用于热部署，直接引入就行。
    
    </summary>
    
    
      <category term="web框架" scheme="http://javazgs.com/tags/web%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot入门</title>
    <link href="http://javazgs.com/2017/05/10/%E5%88%9B%E5%BB%BASpring%20Boot%E5%B7%A5%E7%A8%8B/"/>
    <id>http://javazgs.com/2017/05/10/创建Spring Boot工程/</id>
    <published>2017-05-09T16:00:00.000Z</published>
    <updated>2017-05-11T10:06:43.656Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在搭建传统的SpringMVC项目或其他Spring项目的的时候，我们通常都需要写一堆与Spring整合的xml配置文件，过程繁琐复杂不说，而且容易出错。为了简化开发，Spring Boot应运而生。<br>Spring Boot可以创建独立运行的基于Spring的应用，并且大多数时候只需编写少量的配置。能独立运行的原因是Spring Boot项目本身嵌入了Tomcat等其他web容器插件，详细介绍看官网<a href="http://projects.spring.io/spring-boot/。" target="_blank" rel="external">http://projects.spring.io/spring-boot/。</a></p>
</blockquote>
<h3 id="创建一个Spring-Boot-项目"><a href="#创建一个Spring-Boot-项目" class="headerlink" title="创建一个Spring Boot 项目"></a>创建一个Spring Boot 项目</h3><p>1、pom.xml配置<br>(1)基本配置<br>这里使用Maven构建工程，根据官网的推荐，项目可继承于<code>spring-boot-starter-parent</code> 来管理工程。<a id="more"></a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>(2)如果不使用官方依赖<br>实际开发中我们可能想自己创建父工程来管理依赖，例如我们创建聚合工程时有自己的parent工程，那么我们在自己的父工程定义版本号，根据需要引入对应的包。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 版本号 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>1.5.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>	</div><div class="line">   		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	  	  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、编写应用入口类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.fyft.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *&lt;p&gt;Title: TestApplication.java&lt;/p&gt;</div><div class="line"> *&lt;p&gt;Description: TODO&lt;/p&gt;</div><div class="line"> *&lt;p&gt;CreateDate: 2017年5月10日&lt;/p&gt;</div><div class="line"> *<span class="doctag">@author</span> shen</div><div class="line"> *<span class="doctag">@version</span> v1.0</div><div class="line"> */</div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApplication</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(TestApplication.class, args);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>直接执行此主函数项目就启动了，默认的端口是8080，如果需要改变端口可以在此类实现<code>EmbeddedServletContainerCustomizer</code> 接口，这个接口包含内置Servlet容器的一些配置，例如设置访问端口为8003<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApplication</span> <span class="keyword">implements</span> <span class="title">EmbeddedServletContainerCustomizer</span></span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(TestApplication.class, args);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableEmbeddedServletContainer config)</span> </span>&#123;</div><div class="line">		config.setPort(<span class="number">8003</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="创建Controller类"><a href="#创建Controller类" class="headerlink" title="创建Controller类"></a>创建Controller类</h3><p>要让Controller被扫描到，必须放在主入口类<code>TestApplication</code> 的同级目录或下级目录，这样才能被扫描到，注解才会生效。<br><img src="http://img.blog.csdn.net/20170510233944665?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjgwOTA2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>例如这种情况TestController将不会被扫描到，只有controller包的才被扫描到，改下位置就ok了<br><img src="http://img.blog.csdn.net/20170510234440490?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjgwOTA2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h3 id="打包部署启动"><a href="#打包部署启动" class="headerlink" title="打包部署启动"></a>打包部署启动</h3><p>Spring Boot工程直接打成jar包就行了，如果工程是要跑在外部web容器的，也可以打成war包发布，这需要修改一些配置，这里先不做介绍。<br>在eclipse上直接用maven打包就行，输入 <code>clean package</code> 命令，勾上<code>Skip Tests</code> 忽略测试就行。</p>
<p>在dos下cd到jar包目录下执行 <code>java -jar xx.jar</code>  启动工程，出现一个错误<br><img src="http://img.blog.csdn.net/20170510235640048?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjgwOTA2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>由于maven自身打包生成的目录结构和文件和Spring Boot 需要的有所不同，需要在pom.xml加上一段配置，使用<code>spring-boot-maven-plugin</code> 来打包<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">	 <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span> </div><div class="line">	 <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>若上面的dos正cd到target目录下，须退出此目录，在打包编译时会删除一次target目录，若不退出将会包无法删除此目录，因为你正打开它。<br>再次执行<code>java -jar</code> 命令启动成功</p>
<p><img src="http://img.blog.csdn.net/20170511003805734?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjgwOTA2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>Spring Boot的文章是对最近在写一个webapp工程的记录，工程代码放在<a href="https://github.com/shen28/fyft，主要是整合一年来所学的东西，使用Spring" target="_blank" rel="external">https://github.com/shen28/fyft，主要是整合一年来所学的东西，使用Spring</a> Boot构建。刚开坑的，也不知道能写多少东西，刚好最近离职才有时间鼓捣的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在搭建传统的SpringMVC项目或其他Spring项目的的时候，我们通常都需要写一堆与Spring整合的xml配置文件，过程繁琐复杂不说，而且容易出错。为了简化开发，Spring Boot应运而生。&lt;br&gt;Spring Boot可以创建独立运行的基于Spring的应用，并且大多数时候只需编写少量的配置。能独立运行的原因是Spring Boot项目本身嵌入了Tomcat等其他web容器插件，详细介绍看官网&lt;a href=&quot;http://projects.spring.io/spring-boot/。&quot;&gt;http://projects.spring.io/spring-boot/。&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;创建一个Spring-Boot-项目&quot;&gt;&lt;a href=&quot;#创建一个Spring-Boot-项目&quot; class=&quot;headerlink&quot; title=&quot;创建一个Spring Boot 项目&quot;&gt;&lt;/a&gt;创建一个Spring Boot 项目&lt;/h3&gt;&lt;p&gt;1、pom.xml配置&lt;br&gt;(1)基本配置&lt;br&gt;这里使用Maven构建工程，根据官网的推荐，项目可继承于&lt;code&gt;spring-boot-starter-parent&lt;/code&gt; 来管理工程。
    
    </summary>
    
    
      <category term="web框架" scheme="http://javazgs.com/tags/web%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>eclipse neon版本打开某些javascript文件异常问题</title>
    <link href="http://javazgs.com/2017/05/02/eclipse%20neon%E7%89%88%E6%9C%AC%E6%89%93%E5%BC%80%E6%9F%90%E4%BA%9Bjavascript%E6%96%87%E4%BB%B6%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/"/>
    <id>http://javazgs.com/2017/05/02/eclipse neon版本打开某些javascript文件异常问题/</id>
    <published>2017-05-01T16:00:00.000Z</published>
    <updated>2017-05-06T15:01:53.417Z</updated>
    
    <content type="html"><![CDATA[<p>eclipse neon版本的javascript编辑器无法处理某些异常信息，比如本人在用require js和vue js的时候碰过这种异常<br><code>java.lang.NoSuchMethodError:jdk.nashorn.internal.runtime.ECMAException.getEcmaError()Ljava/lang/Object;</code><br>然后js文件直接就打不开了，最终在stackoverflow找到相关问题，链接<br><a href="http://stackoverflow.com/questions/38089331/eclipse-neon-java-ee-ide-javascript-editor-broken" target="_blank" rel="external">http://stackoverflow.com/questions/38089331/eclipse-neon-java-ee-ide-javascript-editor-broken</a></p>
<p>照回答者意思是javascript开发工具没法解析某些特殊语法的js代码；<br>另一个回答是说新版本的jdk已经解决这个问题，尝试卸了jdk（一直用的1.8.0_05版），装上最新版本的（目前是1.8.0_131版），问题解决。（仅供参考）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;eclipse neon版本的javascript编辑器无法处理某些异常信息，比如本人在用require js和vue js的时候碰过这种异常&lt;br&gt;&lt;code&gt;java.lang.NoSuchMethodError:jdk.nashorn.internal.runtime
    
    </summary>
    
    
      <category term="其他" scheme="http://javazgs.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>多线程</title>
    <link href="http://javazgs.com/2017/05/01/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://javazgs.com/2017/05/01/多线程/</id>
    <published>2017-04-30T16:00:00.000Z</published>
    <updated>2017-05-30T13:49:08.494Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在编程中，多线程的意思是某个程序同时多个任务，这样的每一个任务则称为一个线程。线程这部分涉及的知识非常多，在实际开发的应用也是非常重要，这里将介绍基本的部分。</p>
</blockquote>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>线程：操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中实际运作单位。<br>进程：计算机中已运行程序的实体。进程本身不会运行，是线程的容器。<a id="more"></a><br>并行与并发：</p>
<ul>
<li>并行：多个cpu实例或者多台机器同时执行一段处理逻辑，是真正的同时。</li>
<li>并发：通过cpu调度算法，让用户看上去同时执行，实际上从cpu操作层面不是真正的同时。<a href="http://www.cnblogs.com/wxd0108/p/5479442.html" target="_blank">[1]</a></li>
</ul>
<h3 id="实现多线程的几种基本方式"><a href="#实现多线程的几种基本方式" class="headerlink" title="实现多线程的几种基本方式"></a>实现多线程的几种基本方式</h3><p>1、继承Thread类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Test02</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)&#123;</div><div class="line">			System.out.println(name + i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">		Test02 test1 = <span class="keyword">new</span> Test02(<span class="string">"one--&gt;"</span>);</div><div class="line">		Test02 test2 = <span class="keyword">new</span> Test02(<span class="string">"two--&gt;"</span>);</div><div class="line">		test1.start();</div><div class="line">		test2.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2、实现Runnable接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Test01</span><span class="params">(String name)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)&#123;</div><div class="line">			System.out.println(name+<span class="string">"---&gt;"</span>+i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Test01 test1 = <span class="keyword">new</span> Test01(<span class="string">"one"</span>);</div><div class="line">		Test01 test2 = <span class="keyword">new</span> Test01(<span class="string">"two"</span>);</div><div class="line"></div><div class="line">		Thread thread1 = <span class="keyword">new</span> Thread(test1);<span class="comment">//使用thread类执行start方法</span></div><div class="line">		Thread thread2 = <span class="keyword">new</span> Thread(test2);</div><div class="line">		thread1.start();</div><div class="line">		thread2.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3、使用Callable和Future接口创建线程</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)&#123;</div><div class="line">			System.out.println(Thread.currentThread().getName()+<span class="string">"---&gt;"</span>+i);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		</div><div class="line">		Test03 t1 = <span class="keyword">new</span> Test03();</div><div class="line">		Test03 t2 = <span class="keyword">new</span> Test03();</div><div class="line">		FutureTask&lt;Integer&gt; task1 = <span class="keyword">new</span> FutureTask&lt;&gt;(t1);</div><div class="line">		FutureTask&lt;Integer&gt; task2 = <span class="keyword">new</span> FutureTask&lt;&gt;(t2);</div><div class="line">		<span class="keyword">new</span> Thread(task1, <span class="string">"新建线程1"</span>).start();</div><div class="line">		<span class="keyword">new</span> Thread(task2, <span class="string">"新建线程2"</span>).start();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h3><p>使用<code>getState()</code>方法可获取当前线程的状态(枚举类型)，各种状态如下：</p>
<ul>
<li>New（新生)<br>当new一个新的线程时，线程还没开始运行时，状态是new<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Thread thread = <span class="keyword">new</span> Thread();</div><div class="line">		System.out.println(thread.getState());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>输出<br><code>NEW</code></p>
<ul>
<li>Runnable（可运行）<br>线程调用start执行时<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)&#123;</div><div class="line">		            System.out.println(<span class="string">"i is "</span>+i);</div><div class="line">		        &#125;</div><div class="line">		    &#125;</div><div class="line">		&#125;);</div><div class="line">		thread.start();</div><div class="line">		System.out.println(thread.getState());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>输出<br><code>RUNNABLE</code><br><code>i is 0</code><br><code>i is 1</code><br>…<br><code>i is 99</code></p>
<ul>
<li>Blocked（被阻塞）<br>当一个线程试图获取一个内部的对象锁（而不是java.util.concurrent库中的锁），而该锁被其他线程持有，则该线程进入阻塞状态。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Example</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">        <span class="keyword">private</span> String name;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Example</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.name = name;</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        	<span class="comment">//同步代码块</span></div><div class="line">            <span class="keyword">synchronized</span> (lock) &#123;</div><div class="line">            	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)&#123;</div><div class="line">                    System.out.println(name+<span class="string">": i is "</span>+i);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Example example1 = <span class="keyword">new</span> Test().new Example(<span class="string">"test1"</span>);</div><div class="line">        Example example2 = <span class="keyword">new</span> Test().new Example(<span class="string">"test2"</span>);</div><div class="line">        Thread thread1 = <span class="keyword">new</span> Thread(example1);</div><div class="line">        Thread thread2 = <span class="keyword">new</span> Thread(example2);</div><div class="line">        thread1.start();</div><div class="line">        thread2.start();</div><div class="line">        System.out.println(thread1.getState());</div><div class="line">        System.out.println(thread2.getState());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>输出<br><code>RUNNABLE</code><br><code>test1: i is 0</code><br><code>test2: i is 0</code><br><code>test1: i is 1</code><br><code>BLOCKED</code><br><code>test1: i is 2</code><br>…</p>
<ul>
<li>Waiting（等待）<br>等待状态，释放自身的锁进入Waiting状态并加入线程等待队列<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">this</span>.wait();</div><div class="line">            System.out.println(<span class="string">"waiting closed."</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">		Thread thread1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="keyword">new</span> Test().testMethod();</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">		thread1.start();</div><div class="line">		Thread.sleep(<span class="number">10</span>);<span class="comment">//主线程休眠，转而去执行子进程</span></div><div class="line">		System.out.println(thread1.getState());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>输出<br><code>WAITING</code><br>waiting closed并不会输出</p>
<ul>
<li><p>Timed waiting（计时等待）<br>在<code>this.wait();</code>加上等待时间就会进入计时等待状态，例如<code>this.wait(3000);</code>等待三秒输出内容<br><code>TIMED_WAITING</code><br><code>waiting closed.</code></p>
</li>
<li><p>Terminated（被终止）<br>run方法执行结束线程终止</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">		Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		        System.out.println(<span class="string">"run success"</span>);</div><div class="line">		    &#125;</div><div class="line">		&#125;);</div><div class="line">		thread.start();</div><div class="line">		Thread.sleep(<span class="number">100</span>);</div><div class="line">		System.out.println(thread.getState());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="线程管理"><a href="#线程管理" class="headerlink" title="线程管理"></a>线程管理</h3><ol>
<li><p>sleep方法<br><code>static void sleep(long millis)</code><br>让当前正在运行的线程休眠一段时间<br>sleep是一个静态方法，不要用实例化的线程对象调用，其作用的是当前正在运行的线程。<br><code>Thread.sleep(2000);</code>表示让当前线程休眠2秒，这里的2秒并不是准确的时间段，因为线程是由系统控制，实际时间可能大于2秒。</p>
</li>
<li><p>yield方法<br><code>static void yield()</code><br>暂停当前正在执行的线程，重新进入就绪状态，这也是和sleep方法的区别的地方。如果有其他的可运行线程具有至少与此线程同样高的优先级，那么这些线程接下来会被调度。</p>
</li>
<li><p>join方法<br>合并线程。等待终止指定的线程，让主线程等待子线程结束之后再执行</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">		Thread thread1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)&#123;</div><div class="line">					System.out.println(<span class="string">"one--"</span>+i);</div><div class="line">				&#125;</div><div class="line">		    &#125;</div><div class="line">		&#125;);</div><div class="line">		Thread thread2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				thread1.start();</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					thread1.join();</div><div class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)&#123;</div><div class="line">					System.out.println(<span class="string">"two--"</span>+i);</div><div class="line">				&#125;</div><div class="line">		    &#125;</div><div class="line">		&#125;);</div><div class="line">		thread2.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>thread1在thread2中启动，为thread2子线程，调用join，等待thread1执行结束再执行thread2，相当于把两线程合并了。<br><code>void join(long millis)</code><br>join重载方法带参数，在指定时间段子线程未执行完将重新进入就绪状态，等待cpu调度。</p>
<ol>
<li>notify和notifyAll方法<br>notify方法只唤醒一个等待（对象的）线程并使该线程开始执行。所以如果有多个线程等待一个对象，这个方法只会唤醒其中一个线程，选择哪个线程取决于操作系统对多线程管理的实现。<br>notifyAll 会唤醒所有等待(对象的)线程。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			System.out.println(<span class="string">"thread start."</span>);</div><div class="line">            <span class="keyword">this</span>.wait();</div><div class="line">            System.out.println(<span class="string">"waiting closed."</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">notifyMethod</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.notifyAll();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">		Test test = <span class="keyword">new</span> Test();</div><div class="line">		Thread thread1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				test.testMethod();</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line"></div><div class="line">		Thread thread2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				test.notifyMethod();</div><div class="line">				System.out.println(<span class="string">"唤醒线程....."</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">		thread1.start();</div><div class="line">		Thread.sleep(<span class="number">1000</span>);</div><div class="line">		System.out.println(thread1.getState());</div><div class="line">		thread2.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>输出<br><code>thread start.</code><br><code>WAITING</code><br><code>唤醒线程.....</code><br><code>waiting closed.</code></p>
<ol>
<li><p>interrupted和isInterrupted<br>Interrupted方法是一个静态方法，它检测当前的线程是否被中断。而且，调用interrupted方法会清除该线程的中断状态。<br>另一方面，isInterrupted方法是一个实例方法，可用来检验是否有线程被中断。调用这个方法不会改变中断状态。</p>
</li>
<li><p>setPriority和getPriority<br><code>void setPriority(int newPriority)</code><br>设置线程的优先级。优先级必须在Thread.MIN_PRIORITY 与Thread.MAX_PRIORITY之<br>间。一般使用Thread.NORM_PRIORITY 优先级。<br><code>final int getPriority()</code><br>获取线程的优先级</p>
</li>
<li><p>结束线程<br>Tread中有stop方法，但改方法已经过时，不推荐使用。要结束线程，可设置标志来实现。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">TestTread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">boolean</span> flag;</div><div class="line">		<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">stopThread</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.flag=<span class="keyword">true</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000</span> &amp;&amp; !flag; i++)&#123;</div><div class="line">				System.out.println(<span class="string">"i is "</span>+i);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">		TestTread test = <span class="keyword">new</span> Test().new TestTread();</div><div class="line">		Thread thread1 = <span class="keyword">new</span> Thread(test);</div><div class="line">		thread1.start();</div><div class="line">		Thread.sleep(<span class="number">3</span>);<span class="comment">//休眠延时</span></div><div class="line">		test.stopThread();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>输出一段i的值之后当执行stopThread方法线程就结束了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在编程中，多线程的意思是某个程序同时多个任务，这样的每一个任务则称为一个线程。线程这部分涉及的知识非常多，在实际开发的应用也是非常重要，这里将介绍基本的部分。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;线程：操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中实际运作单位。&lt;br&gt;进程：计算机中已运行程序的实体。进程本身不会运行，是线程的容器。
    
    </summary>
    
    
      <category term="Java基础" scheme="http://javazgs.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Linux下安装Nginx并配置一个图片服务器</title>
    <link href="http://javazgs.com/2017/04/21/Linux%E4%B8%8B%E5%AE%89%E8%A3%85Nginx%E5%B9%B6%E9%85%8D%E7%BD%AE%E4%B8%80%E4%B8%AA%E5%9B%BE%E7%89%87%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://javazgs.com/2017/04/21/Linux下安装Nginx并配置一个图片服务器/</id>
    <published>2017-04-20T16:00:00.000Z</published>
    <updated>2017-05-06T14:58:19.808Z</updated>
    
    <content type="html"><![CDATA[<p>首先到Nginx官网下载tar.gz格式的安装包，这里下载的是nginx-1.10.3版本，环境使用centos的虚拟机</p>
<p>1、将安装包上传，解压，命令tar -xvf nginx-1.10.3.tar.gz；</p>
<p>2、自定义创建一个文件夹作为Nginx安装目录，这里在home下创建nginx文件夹；<br><a id="more"></a><br><img src="http://img.blog.csdn.net/20170421004011580?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjgwOTA2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>3、在解压的文件夹（nginx-1.10.3）下执行./configure –prefix=/home/nginx 命令。<br>意思即配置安装环境，将会把Nginx安装到/home/nginx下；</p>
<p>若出现缺少依赖包则先安装依赖包，以下纯净centos mini版碰到的两个依赖包问题<br><img src="http://img.blog.csdn.net/20170421004354876?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjgwOTA2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>出现上面这个执行 yum -y install pcre-devel 安装依赖，</p>
<p><img src="http://img.blog.csdn.net/20170421004425814?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjgwOTA2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>出现这个yum install -y zlib-devel 安装依赖，</p>
<p>若还有其他依赖问题，根据缺少的文件提示安装相应的东西；</p>
<p>4、编译：在解压的文件夹下先后执行make 和 make install 命令</p>
<p>5、Nginx默认使用端口是80，这里直接先把Nginx端口改为8088，vi /home/nginx/conf/nginx.conf，修改server的端口，并配置一个图片服务器</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#user  nobody;</div><div class="line">worker_processes  1;</div><div class="line"></div><div class="line">#error_log  logs/error.log;</div><div class="line">#error_log  logs/error.log  notice;</div><div class="line">#error_log  logs/error.log  info;</div><div class="line"></div><div class="line">#pid        logs/nginx.pid;</div><div class="line"></div><div class="line"></div><div class="line">events &#123;</div><div class="line">    worker_connections  1024;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">http &#123;</div><div class="line">    include       mime.types;</div><div class="line">    default_type  application/octet-stream;</div><div class="line"></div><div class="line">    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</div><div class="line">    #                  '$status $body_bytes_sent "$http_referer" '</div><div class="line">    #                  '"$http_user_agent" "$http_x_forwarded_for"';</div><div class="line"></div><div class="line">    #access_log  logs/access.log  main;</div><div class="line"></div><div class="line">    sendfile        on;</div><div class="line">    #tcp_nopush     on;</div><div class="line"></div><div class="line">    #keepalive_timeout  0;</div><div class="line">    keepalive_timeout  65;</div><div class="line"></div><div class="line">    #gzip  on;</div><div class="line"></div><div class="line">    server &#123;</div><div class="line">        listen       8088;</div><div class="line">        server_name  localhost;</div><div class="line"></div><div class="line">        #charset koi8-r;</div><div class="line"></div><div class="line">        #access_log  logs/host.access.log  main;</div><div class="line">	</div><div class="line">		location ~ .*\.(gif|jpg|jpeg|png)$ &#123;  </div><div class="line">            expires 24h;  </div><div class="line">            root /home/images/;#指定图片存放路径  </div><div class="line">            access_log /home/nginx/logs/images.log;#图片 日志路径  </div><div class="line">            proxy_store on;  </div><div class="line">            proxy_store_access user:rw group:rw all:rw;  </div><div class="line">            proxy_temp_path         /home/images/;#代理临时路径</div><div class="line">            proxy_redirect          off;  </div><div class="line"></div><div class="line">            proxy_set_header        Host 127.0.0.1;  </div><div class="line">            proxy_set_header        X-Real-IP $remote_addr;  </div><div class="line">            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;  </div><div class="line">            client_max_body_size    10m;  </div><div class="line">            client_body_buffer_size 1280k;  </div><div class="line">            proxy_connect_timeout   900;  </div><div class="line">            proxy_send_timeout      900;  </div><div class="line">            proxy_read_timeout      900;  </div><div class="line">            proxy_buffer_size       40k;  </div><div class="line">            proxy_buffers           40 320k;  </div><div class="line">            proxy_busy_buffers_size 640k;  </div><div class="line">            proxy_temp_file_write_size 640k;  </div><div class="line">            if ( !-e $request_filename)  </div><div class="line">            &#123;  </div><div class="line">                 proxy_pass  http://127.0.0.1:8088;#代理访问地址  </div><div class="line">            &#125;  </div><div class="line">        &#125;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">            root   html;</div><div class="line">            index  index.html index.htm;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        #error_page  404              /404.html;</div><div class="line"></div><div class="line">        # redirect server error pages to the static page /50x.html</div><div class="line">        #</div><div class="line">        error_page   500 502 503 504  /50x.html;</div><div class="line">        location = /50x.html &#123;</div><div class="line">            root   html;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</div><div class="line">        #</div><div class="line">        #location ~ \.php$ &#123;</div><div class="line">        #    proxy_pass   http://127.0.0.1;</div><div class="line">        #&#125;</div><div class="line"></div><div class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</div><div class="line">        #</div><div class="line">        #location ~ \.php$ &#123;</div><div class="line">        #    root           html;</div><div class="line">        #    fastcgi_pass   127.0.0.1:9000;</div><div class="line">        #    fastcgi_index  index.php;</div><div class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</div><div class="line">        #    include        fastcgi_params;</div><div class="line">        #&#125;</div><div class="line"></div><div class="line">        # deny access to .htaccess files, if Apache's document root</div><div class="line">        # concurs with nginx's one</div><div class="line">        #</div><div class="line">        #location ~ /\.ht &#123;</div><div class="line">        #    deny  all;</div><div class="line">        #&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</div><div class="line">    #</div><div class="line">    #server &#123;</div><div class="line">    #    listen       8000;</div><div class="line">    #    listen       somename:8080;</div><div class="line">    #    server_name  somename  alias  another.alias;</div><div class="line"></div><div class="line">    #    location / &#123;</div><div class="line">    #        root   html;</div><div class="line">    #        index  index.html index.htm;</div><div class="line">    #    &#125;</div><div class="line">    #&#125;</div><div class="line"></div><div class="line"></div><div class="line">    # HTTPS server</div><div class="line">    #</div><div class="line">    #server &#123;</div><div class="line">    #    listen       443 ssl;</div><div class="line">    #    server_name  localhost;</div><div class="line"></div><div class="line">    #    ssl_certificate      cert.pem;</div><div class="line">    #    ssl_certificate_key  cert.key;</div><div class="line"></div><div class="line">    #    ssl_session_cache    shared:SSL:1m;</div><div class="line">    #    ssl_session_timeout  5m;</div><div class="line"></div><div class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</div><div class="line">    #    ssl_prefer_server_ciphers  on;</div><div class="line"></div><div class="line">    #    location / &#123;</div><div class="line">    #        root   html;</div><div class="line">    #        index  index.html index.htm;</div><div class="line">    #    &#125;</div><div class="line">    #&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>server下listen的端口改为8088，并增加一个location配置，用于访问图片文件，这一串配置有#号在前面的注释掉的都可以删掉，免得看起来又长又乱。</p>
<p>6、启动命令： /home/nginx/sbin/nginx -c /home/nginx/conf/nginx.conf。<br>打开防火墙对应端口供访问，8088，当然也可以直接关了防火墙。<br>若修改了nginx.conf配置，则需要重启才生效，命令：/home/nginx/sbin/nginx -s reload</p>
<p>7、访问。<br>输入ifconfig命令查看虚拟机ip，测试：</p>
<p><img src="http://img.blog.csdn.net/20170421010243601?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjgwOTA2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="" width="400px" height="200px"></p>
<p>在/home/images下放张图片，测试访问：<br><img src="http://img.blog.csdn.net/20170421005903034?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjgwOTA2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="doge" title="" width="300px" height="250px"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先到Nginx官网下载tar.gz格式的安装包，这里下载的是nginx-1.10.3版本，环境使用centos的虚拟机&lt;/p&gt;
&lt;p&gt;1、将安装包上传，解压，命令tar -xvf nginx-1.10.3.tar.gz；&lt;/p&gt;
&lt;p&gt;2、自定义创建一个文件夹作为Nginx安装目录，这里在home下创建nginx文件夹；&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://javazgs.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>eclipse neon git 提交窗口太小问题</title>
    <link href="http://javazgs.com/2017/04/16/eclipse%20neon%20git%20%E6%8F%90%E4%BA%A4%E7%AA%97%E5%8F%A3%E5%A4%AA%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <id>http://javazgs.com/2017/04/16/eclipse neon git 提交窗口太小问题/</id>
    <published>2017-04-15T16:00:00.000Z</published>
    <updated>2017-05-06T14:54:22.536Z</updated>
    
    <content type="html"><![CDATA[<p>eclipse neon版本的javascript编辑器无法处理某些异常信息，比如本人在用require js和vue js的时候碰过这种异常<br><code>java.lang.NoSuchMethodError:jdk.nashorn.internal.runtime.ECMAException.getEcmaError()Ljava/lang/Object;</code><br>然后js文件直接就打不开了，最终在stackoverflow找到相关问题，链接<br><a href="http://stackoverflow.com/questions/38089331/eclipse-neon-java-ee-ide-javascript-editor-broken" target="_blank" rel="external">http://stackoverflow.com/questions/38089331/eclipse-neon-java-ee-ide-javascript-editor-broken</a></p>
<p>照回答者意思是javascript开发工具没法解析某些特殊语法的js代码；<br>另一个回答是说新版本的jdk已经解决这个问题，尝试卸了jdk（一直用的1.8.0_05版），装上最新版本的（目前是1.8.0_131版），问题解决。（仅供参考）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;eclipse neon版本的javascript编辑器无法处理某些异常信息，比如本人在用require js和vue js的时候碰过这种异常&lt;br&gt;&lt;code&gt;java.lang.NoSuchMethodError:jdk.nashorn.internal.runtime
    
    </summary>
    
    
      <category term="其他" scheme="http://javazgs.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>反射</title>
    <link href="http://javazgs.com/2017/04/04/%E5%8F%8D%E5%B0%84/"/>
    <id>http://javazgs.com/2017/04/04/反射/</id>
    <published>2017-04-03T16:00:00.000Z</published>
    <updated>2017-05-06T15:01:43.492Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>相信大家经常听说某些框架设计用到了反射机制啥啥，但自己对此概念却了解甚少，虽然一般开发不会用到，但还是有必要知道反射的基本原理和操作。</p>
</blockquote>
<p>  使用反射，可以做到：</p>
<ul>
<li>在运行中分析类的能力。</li>
<li>在运行中查看对象，例如，编写一个toString方法供所有类使用。</li>
<li>实现数组的操作代码。</li>
<li>利用Method对象，这个对象很像C++中的函数指针。</li>
</ul>
<p>反射操作主要用到的类有Class（类）、Field（属性）、Method（成员函数）、Constructor（构造）和Modifier（修饰符）<br><a id="more"></a><br>一、反射获取类</p>
<p>新建一个Student类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	</div><div class="line">	<span class="comment">//无参构造</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//有参构造</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> age, String name)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		System.out.println(<span class="string">"My name is "</span>+name+<span class="string">",I'm "</span>+age+<span class="string">" years old."</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">learning</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"learning..."</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public class ReflexTest &#123;</div><div class="line">	public static void main(String[] args) throws ClassNotFoundException &#123;</div><div class="line">		Student student = new Student(20, &quot;shen&quot;);//一般创建对象</div><div class="line">		</div><div class="line">		Class stu = Class.forName(&quot;com.test.reflex.Student&quot;);//通过Class获取指定类的完整结构</div><div class="line">		System.out.println(&quot;getName---&gt;&quot;+stu.getName());</div><div class="line">		</div><div class="line">		Student s = null;</div><div class="line">		Student s1 = null; </div><div class="line">		try &#123;</div><div class="line">			s = (Student)stu.newInstance();//默认构造的是无参构造，若存在有参构造，这里将报错</div><div class="line">			</div><div class="line">			Constructor constructor = stu.getConstructor(int.class, String.class);//获取有参构造,已知确定参数</div><div class="line">			s1 = (Student)constructor.newInstance(23, &quot;shen&quot;);//有参构造</div><div class="line">			</div><div class="line">			Constructor[] constructors = stu.getConstructors();//所有构造</div><div class="line">			s1 = (Student)constructors[0].newInstance();//第一个构造(无参那个)</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出：<br><img src="http://img.blog.csdn.net/20170403212710052?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjgwOTA2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>Class类forName方法通过完整包路径类型来实例化Class对象，再通过Class对象获取Student类实例；<br>再使用newInstance()创建对象，这里要注意Student的构造方法，默认使用的试试无参构造，可使用Constructor类操作构造方法。</p>
<p>二、获取类的基本结构</p>
<p>1、使用反射操作对象属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class Test01 &#123;</div><div class="line">	public static void main(String[] args) throws Exception, Exception &#123;</div><div class="line">		try &#123;</div><div class="line">			Class stu = Class.forName(&quot;com.test.reflex.Student&quot;);</div><div class="line">			</div><div class="line">			Constructor constructor = stu.getConstructor(int.class, String.class);//获取有参构造,已知确定参数</div><div class="line">			Student s = (Student)constructor.newInstance(23, &quot;shen&quot;);//有参构造</div><div class="line">			</div><div class="line">			//Field[] fields = stu.getFields();//获取public的属性</div><div class="line">			Field[] fields = stu.getDeclaredFields();//获取所有属性</div><div class="line">			for(Field field : fields)&#123;</div><div class="line">				System.out.println(&quot;属性--&gt;&quot;+field);</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			Field fieldName = stu.getDeclaredField(&quot;name&quot;);//获取私有变量name</div><div class="line">			fieldName.setAccessible(true);</div><div class="line">			System.out.println(fieldName.getName());//私有属性名称</div><div class="line">			System.out.println(fieldName.get(s));//私有属性值</div><div class="line">			</div><div class="line">			fieldName.set(s, &quot;a-shen&quot;);</div><div class="line">			System.out.println(fieldName.get(s));//改变私有属性值</div><div class="line">			</div><div class="line">		&#125; catch (ClassNotFoundException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果输出<br><img src="http://img.blog.csdn.net/20170403212205519?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjgwOTA2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>其中对于fieldName.setAccessible(true);使用java反射获取类的属性值时，如果该属性被声明为private 的，需要将setAccessible设置为true. 默认的值为false</p>
<p>2、使用反射访问成员函数<br>通过反射调用方法，使用invoke方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class Test02 &#123;</div><div class="line">	public static void main(String[] args) throws Exception, Exception &#123;</div><div class="line">		try &#123;</div><div class="line">			Class stu = Class.forName(&quot;com.test.reflex.Student&quot;);</div><div class="line">			</div><div class="line">			Constructor constructor = stu.getConstructor(int.class, String.class);//获取有参构造,已知确定参数</div><div class="line">			Constructor[] constructors = stu.getConstructors();</div><div class="line">			Student s = (Student)constructors[0].newInstance();//无参构造对象</div><div class="line">			</div><div class="line">			//Method[] methods = stu.getMethods();//获取类所有方法，包括继承自父类和实现接口的方法</div><div class="line">			Method[] methods = stu.getDeclaredMethods();//获取类本身各类方法和实现接口的方法及重写的方法，不包括继承的方法</div><div class="line">			for(Method method : methods)&#123;</div><div class="line">				System.out.println(&quot;成员函数---&gt;&quot;+method);</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			Method m1 = s.getClass().getMethod(&quot;setName&quot;, String.class);</div><div class="line">			m1.invoke(s, &quot;ashen&quot;);//设置name值为&quot;ashen&quot;</div><div class="line">			</div><div class="line">			Method m2 = s.getClass().getMethod(&quot;getName&quot;);</div><div class="line">			String name = (String) m2.invoke(s);</div><div class="line">			System.out.println(&quot;getName---&gt;&quot;+name);//输出name值</div><div class="line">			</div><div class="line">		&#125;catch (ClassNotFoundException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果输出<br><img src="http://img.blog.csdn.net/20170404015222950?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjgwOTA2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;相信大家经常听说某些框架设计用到了反射机制啥啥，但自己对此概念却了解甚少，虽然一般开发不会用到，但还是有必要知道反射的基本原理和操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  使用反射，可以做到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在运行中分析类的能力。&lt;/li&gt;
&lt;li&gt;在运行中查看对象，例如，编写一个toString方法供所有类使用。&lt;/li&gt;
&lt;li&gt;实现数组的操作代码。&lt;/li&gt;
&lt;li&gt;利用Method对象，这个对象很像C++中的函数指针。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;反射操作主要用到的类有Class（类）、Field（属性）、Method（成员函数）、Constructor（构造）和Modifier（修饰符）&lt;br&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="http://javazgs.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Mysql存储过程</title>
    <link href="http://javazgs.com/2017/02/26/Mysql%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
    <id>http://javazgs.com/2017/02/26/Mysql存储过程/</id>
    <published>2017-02-25T16:00:00.000Z</published>
    <updated>2017-05-06T15:01:26.783Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>当需要实现复杂的逻辑，需要写多条sql语句或写的sql比较复杂时，可以考虑使用存储过程来处理，最终返回需要的结果集。存储过程即一组SQL语句集。</p>
</blockquote>
<p>存储过程的基本语法也不算复杂，以下为创建一个存储过程的模板<br><a id="more"></a><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> TEST_FUNCTION;</div><div class="line"><span class="comment">/*定义存储过程名称，设置入参，指定类型和大小*/</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> TEST_FUNCTION(<span class="keyword">in</span> DATA_A <span class="built_in">INT</span>(<span class="number">20</span>),<span class="keyword">in</span> DATA_B <span class="built_in">INT</span>(<span class="number">20</span>),<span class="keyword">in</span> B_TYPE <span class="built_in">varchar</span>(<span class="number">20</span>))</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">     <span class="comment">/*DECLARE 关键字用于定义变量*/</span></div><div class="line">    <span class="keyword">DECLARE</span> <span class="keyword">SUM</span> <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">DECLARE</span> t_error <span class="built_in">INTEGER</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">DECLARE</span> CONTINUE <span class="keyword">HANDLER</span> <span class="keyword">FOR</span> SQLEXCEPTION <span class="keyword">SET</span> t_error=<span class="number">1</span>;<span class="comment">/*异常标志*/</span></div><div class="line">    </div><div class="line">    <span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;<span class="comment">/*启动事务*/</span></div><div class="line">    <span class="comment">/*字符串的判断，STRCMP用法类似于C++*/</span></div><div class="line">    if STRCMP(B_TYPE,'SUM')=0 then</div><div class="line">    <span class="keyword">begin</span></div><div class="line">         <span class="keyword">SELECT</span>  DATA_A+DATA_B <span class="keyword">INTO</span> <span class="keyword">SUM</span>;<span class="comment">/*INTO 把值放到变量中*/</span></div><div class="line">         <span class="keyword">SELECT</span> <span class="keyword">SUM</span>;</div><div class="line">    <span class="keyword">end</span>;<span class="comment">/*一个begin对应一个end*/</span></div><div class="line">    <span class="keyword">end</span> <span class="keyword">if</span>;<span class="comment">/*一个if对应一个end if*/</span></div><div class="line">    </div><div class="line">    IF t_error = 1 THEN  </div><div class="line">    <span class="keyword">ROLLBACK</span>;<span class="comment">/*异常回滚*/</span></div><div class="line">    ELSE</div><div class="line">    <span class="keyword">COMMIT</span>;<span class="comment">/*正常提交*/</span></div><div class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure></p>
<p>创建生成的样子</p>
<p><img src="http://img.blog.csdn.net/20170226161939611?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjgwOTA2Mg==/font/5a6L5L2T/fontsize/200/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>DEFINER的信息是’用户名’@’host’</p>
<p>输入参数值测试<br><img src="http://img.blog.csdn.net/20170226162314021?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjgwOTA2Mg==/font/5a6L5L2T/fontsize/200/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>调用存储使用call命令<br><img src="http://img.blog.csdn.net/20170226162538526?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjgwOTA2Mg==/font/5a6L5L2T/fontsize/200/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;当需要实现复杂的逻辑，需要写多条sql语句或写的sql比较复杂时，可以考虑使用存储过程来处理，最终返回需要的结果集。存储过程即一组SQL语句集。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;存储过程的基本语法也不算复杂，以下为创建一个存储过程的模板&lt;br&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://javazgs.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>内部类相关——定义、匿名内部类、回调实现及静态内部类</title>
    <link href="http://javazgs.com/2017/02/23/%E5%86%85%E9%83%A8%E7%B1%BB%E7%9B%B8%E5%85%B3%E2%80%94%E2%80%94%E5%AE%9A%E4%B9%89%E3%80%81%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB%E3%80%81%E5%9B%9E%E8%B0%83%E5%AE%9E%E7%8E%B0%E5%8F%8A%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>http://javazgs.com/2017/02/23/内部类相关——定义、匿名内部类、回调实现及静态内部类/</id>
    <published>2017-02-22T16:00:00.000Z</published>
    <updated>2017-05-06T14:53:09.456Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>内部类，顾名思义就是在一个类中的类。内部类可以访问所在类的数据，包括私有数据，而又可以对其他类隐藏，在快速实现回调函数时可以使用匿名内部类，比较便捷。</p>
</blockquote>
<p>1、以下为一个简单的内部类例子，内部类可以定义为私有以对其他类隐藏起来；可以用内部类来达到实现多继承的效果。需要注意的是，通过成员函数传入内部类的变量必须定义为final类型，以保证数据的一致性。<a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Walk</span></span>&#123;</div><div class="line">	<span class="comment">//private私有类，继承Walk和Eat</span></div><div class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">LittleCat</span> <span class="keyword">extends</span> <span class="title">Eat</span> </span>&#123;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">			System.out.println(<span class="string">"Walking....Eating...."</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		LittleCat lCat = <span class="keyword">new</span> Cat().new LittleCat();<span class="comment">//创建内部类对象方式，通过先创建所在外围类对象再创建内部类对象</span></div><div class="line">		lCat.doSomething();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">event</span><span class="params">(<span class="keyword">final</span> String name)</span> </span>&#123;</div><div class="line">		<span class="class"><span class="keyword">class</span> <span class="title">EatFish</span></span>&#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="comment">//name = "Tom";//在这里修改会报错，name 必须为final类型，保证数据一致</span></div><div class="line">				System.out.println(name);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		EatFish test = <span class="keyword">new</span> EatFish();</div><div class="line">		test.eat();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>两个父类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public class Walk &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public class Eat &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2、匿名内部类<br>从名称可以知道匿名就是没有类名的类，匿名内部类用于快速调用接口或抽象类等等中的方法，不需要多写一个实现类来实现调用。</p>
<p>抽象类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public abstract class Dog &#123;</div><div class="line">	abstract void eat();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface Animal &#123;</div><div class="line">	void eat();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public class AnonymousDemo &#123;</div><div class="line">	</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		 </div><div class="line">		/**</div><div class="line">		 * 通过创建的一个接口或抽象类分引用，快速便捷重写需要实现的方法，不需要先写一个实现类再实例化以调用方法</div><div class="line">		 */</div><div class="line">		</div><div class="line">		//实现接口方式</div><div class="line">		Animal dog = new Animal() &#123;</div><div class="line">			@Override</div><div class="line">			public void eat() &#123;</div><div class="line">				System.out.println(&quot;like bone.&quot;);</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">		dog.eat();//向上转型的实例，直接调用重写的eat方法</div><div class="line">		</div><div class="line">		//继承抽象类的方式</div><div class="line">		Dog littleDog = new Dog() &#123;</div><div class="line">			@Override</div><div class="line">			void eat() &#123;</div><div class="line">				System.out.println(&quot;I like bone.&quot;);</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">		littleDog.eat();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此外，Java的回调函数式可以通过匿名内部类来实现，比如以下例子</p>
<p>(1)封装的类和提供的接口<br>封装给别人调用的类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public class Person &#123;</div><div class="line">	</div><div class="line">	private EatFood eatFood;</div><div class="line">	</div><div class="line">	/**</div><div class="line">	 * 普通方式，构造传递引用</div><div class="line">	 */</div><div class="line">	public Person(EatFood eatSomething)&#123;</div><div class="line">		this.eatFood = eatSomething;//构造时传入引用</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	/**</div><div class="line">	 * 普通方式，成员函数传递引用</div><div class="line">	 */</div><div class="line">	public Person()&#123;</div><div class="line">	&#125;</div><div class="line">	public void setCallBack(EatFood eatSomething) &#123;</div><div class="line">		this.eatFood = eatSomething;//用成员函数传入引用</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	//需要调用的方法</div><div class="line">	public void eatFood() &#123;</div><div class="line">		eatFood.eat();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>调用类需要的接口定义<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface EatFood &#123;</div><div class="line">	void eat();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>(2)实际调用<br>一般做法都会写一个类实现接口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class EatRice implements EatFood &#123;</div><div class="line">	@Override</div><div class="line">	public void eat() &#123;</div><div class="line">		// TODO Auto-generated method stub</div><div class="line">		System.out.println(&quot;It&apos;s time to eat rice.&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后是实际使用的类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class PeronEatTest &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		//普通方式，构造传递引用</div><div class="line">		Person personOne = new Person(new EatRice());//EatRice实现类方式。多写一个方法传入也可</div><div class="line">		personOne.eatFood();</div><div class="line"></div><div class="line">		//普通方式，成员函数传递引用</div><div class="line">		Person personOne = new Person();</div><div class="line">		EatRice eatRice = new EatRice();</div><div class="line">		personOne.setCallBack(eatRice);</div><div class="line">		personOne.eatFood();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果使用匿名内部类就便捷了许多<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class PeronEatTest &#123;</div><div class="line">	public static void main(String[] args) &#123;	</div><div class="line">		Person personTwo = new Person(new EatFood() &#123;</div><div class="line">			@Override</div><div class="line">			public void eat() &#123;</div><div class="line">				// TODO Auto-generated method stub</div><div class="line">				System.out.println(&quot;It&apos;s time to eat rice.&quot;);</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">		personTwo.eatFood();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、静态内部类<br>创建是不需要依赖于外围类，但也不能使用任何外围类的非static成员变量和方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public class Cat&#123;</div><div class="line">	</div><div class="line">	private String str = &quot;cat&quot;;</div><div class="line">	private static String str_static = &quot;cat&quot;;</div><div class="line">	</div><div class="line">	private class LittleCat&#123;</div><div class="line">		//public static String str_test = &quot;test&quot;;//错误，非静态内部类变量不能为静态</div><div class="line">		public static final String str_test = &quot;test&quot;;//但加上final就可以</div><div class="line">		public void doSomething() &#123;</div><div class="line">			str = &quot;little cat&quot;;</div><div class="line">			System.out.println(&quot;Walking....Eating....&quot;);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	static class BigCat&#123;</div><div class="line">		public void doSomething() &#123;</div><div class="line">			//str = &quot;little cat&quot;;//错误，静态内部类反问外围非静态变量和方法</div><div class="line">			str_static = &quot;big cat&quot;;</div><div class="line">			System.out.println(&quot;I am a big cat.&quot;);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		LittleCat lCat = new Cat().new LittleCat();//依赖外围类</div><div class="line">		lCat.doSomething();</div><div class="line">		</div><div class="line">		BigCat bigCat = new BigCat();//不依赖外围类</div><div class="line">		bigCat.doSomething();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;内部类，顾名思义就是在一个类中的类。内部类可以访问所在类的数据，包括私有数据，而又可以对其他类隐藏，在快速实现回调函数时可以使用匿名内部类，比较便捷。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1、以下为一个简单的内部类例子，内部类可以定义为私有以对其他类隐藏起来；可以用内部类来达到实现多继承的效果。需要注意的是，通过成员函数传入内部类的变量必须定义为final类型，以保证数据的一致性。
    
    </summary>
    
    
      <category term="Java基础" scheme="http://javazgs.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>无题</title>
    <link href="http://javazgs.com/2017/02/14/0214%E5%B9%BF%E5%B7%9E/"/>
    <id>http://javazgs.com/2017/02/14/0214广州/</id>
    <published>2017-02-13T16:00:00.000Z</published>
    <updated>2017-05-06T14:55:57.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本命年"><a href="#本命年" class="headerlink" title="本命年"></a>本命年</h1><p>暂且不用去想太多破事，认真过好今年</p>
<p>E时光上的广州<br><img src="\assets\articleImg\fyetime.jpg" alt="方圆E时光上的广州"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;本命年&quot;&gt;&lt;a href=&quot;#本命年&quot; class=&quot;headerlink&quot; title=&quot;本命年&quot;&gt;&lt;/a&gt;本命年&lt;/h1&gt;&lt;p&gt;暂且不用去想太多破事，认真过好今年&lt;/p&gt;
&lt;p&gt;E时光上的广州&lt;br&gt;&lt;img src=&quot;\assets\articleImg\f
    
    </summary>
    
    
      <category term="其他" scheme="http://javazgs.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>鸡年大吉</title>
    <link href="http://javazgs.com/2017/01/27/%E9%99%A4%E5%A4%95/"/>
    <id>http://javazgs.com/2017/01/27/除夕/</id>
    <published>2017-01-26T16:00:00.000Z</published>
    <updated>2017-05-06T14:56:30.940Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h1><p>除夕<br>辞旧迎新<br>新年快乐<br><img src="\assets\articleImg\chuxi.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;2017&quot;&gt;&lt;a href=&quot;#2017&quot; class=&quot;headerlink&quot; title=&quot;2017&quot;&gt;&lt;/a&gt;2017&lt;/h1&gt;&lt;p&gt;除夕&lt;br&gt;辞旧迎新&lt;br&gt;新年快乐&lt;br&gt;&lt;img src=&quot;\assets\articleImg\chuxi.png&quot; 
    
    </summary>
    
    
      <category term="其他" scheme="http://javazgs.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>给博客换个主题</title>
    <link href="http://javazgs.com/2016/12/29/%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%8D%A2%E4%B8%AA%E4%B8%BB%E9%A2%98/"/>
    <id>http://javazgs.com/2016/12/29/给博客换个主题/</id>
    <published>2016-12-28T16:00:00.000Z</published>
    <updated>2017-05-06T15:01:10.006Z</updated>
    
    <content type="html"><![CDATA[<p>搭好了博客之后，想把博客换了个hexo主题，挑来挑去最后选了Litten的Yilia主题。事实好多主题都做得很棒，现在不管是网站和移动端的应用，都很注重页面展示和交互体验，由此前端的技术也是日新月异，作为一个后端，看得真是眼花缭乱。</p>
<p>转眼间2016也即将过去了，这年毕业了，开始工作，真正地靠自己生活着，做了许多事情，也学会很多东西。整体上马马虎虎，但事实还有许多事情没有做好，找个时间再写个年终总结吧。</p>
<ul>
<li>加首歌试试</li>
</ul>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=848867&auto=0&height=66"></iframe>

<hr>
<p>markdown真是好用啊。顺便加上多说评论。</p>
<p><strong>以下测试</strong>    <a id="more"></a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	 System.out.println(<span class="string">"欢迎来到啊深的博客。"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>故人西辞黄鹤楼，烟花三月下扬州。孤帆远影碧空尽，惟见长江天际流。</p>
</blockquote>
<p>16/12/29</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搭好了博客之后，想把博客换了个hexo主题，挑来挑去最后选了Litten的Yilia主题。事实好多主题都做得很棒，现在不管是网站和移动端的应用，都很注重页面展示和交互体验，由此前端的技术也是日新月异，作为一个后端，看得真是眼花缭乱。&lt;/p&gt;
&lt;p&gt;转眼间2016也即将过去了，这年毕业了，开始工作，真正地靠自己生活着，做了许多事情，也学会很多东西。整体上马马虎虎，但事实还有许多事情没有做好，找个时间再写个年终总结吧。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加首歌试试&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=848867&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;

&lt;hr&gt;
&lt;p&gt;markdown真是好用啊。顺便加上多说评论。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以下测试&lt;/strong&gt;
    
    </summary>
    
    
      <category term="博客" scheme="http://javazgs.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>欢迎来到我的博客</title>
    <link href="http://javazgs.com/2016/12/20/hello-world/"/>
    <id>http://javazgs.com/2016/12/20/hello-world/</id>
    <published>2016-12-19T16:00:00.000Z</published>
    <updated>2017-05-10T17:55:56.416Z</updated>
    
    <content type="html"><![CDATA[<p>之前鼓捣服务器的时候买了个域名耍耍，空间到期之后域名一直放着，不久前才想起github上能搭个博客能用自定义域名，而且刚好又不需要备案，就鼓捣了这个博客。顺便把CSDN的博文同步过来试试，CSDN博客地址 <a href="http://blog.csdn.net/u012809062" target="_blank" rel="external">http://blog.csdn.net/u012809062</a> 。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前鼓捣服务器的时候买了个域名耍耍，空间到期之后域名一直放着，不久前才想起github上能搭个博客能用自定义域名，而且刚好又不需要备案，就鼓捣了这个博客。顺便把CSDN的博文同步过来试试，CSDN博客地址 &lt;a href=&quot;http://blog.csdn.net/u012
    
    </summary>
    
    
      <category term="其他" scheme="http://javazgs.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
</feed>
